[
["index.html", "Data Integration, Manipulation and Visualization of Phylogenetic Trees Preface", " Data Integration, Manipulation and Visualization of Phylogenetic Trees Guangchuang Yu Preface hello "],
["importing-tree-with-data.html", "Chapter 1 Importing tree with data", " Chapter 1 Importing tree with data hello world. "],
["manipulating-tree-with-data.html", "Chapter 2 Manipulating tree with data", " Chapter 2 Manipulating tree with data treeio + tidytree "],
["exporting-tree-with-data.html", "Chapter 3 Exporting tree with data", " Chapter 3 Exporting tree with data "],
["phylogenetic-tree-visualization.html", "Chapter 4 Phylogenetic Tree Visualization", " Chapter 4 Phylogenetic Tree Visualization "],
["phylogenetic-tree-annotation.html", "Chapter 5 Phylogenetic Tree Annotation", " Chapter 5 Phylogenetic Tree Annotation "],
["visual-exploration-of-phylogenetic-tree.html", "Chapter 6 Visual Exploration of Phylogenetic Tree", " Chapter 6 Visual Exploration of Phylogenetic Tree "],
["plotting-tree-with-data.html", "Chapter 7 Plotting tree with data", " Chapter 7 Plotting tree with data "],
["annotating-tree-with-silhouette-images-and-sub-plots.html", "Chapter 8 Annotating Tree with Silhouette Images and Sub-plots 8.1 Annotating Tree with Images 8.2 Annotating Tree with Phylopic 8.3 Annotating Tree with Sub-plots 8.4 Have Fun with Phylomoji", " Chapter 8 Annotating Tree with Silhouette Images and Sub-plots 8.1 Annotating Tree with Images We usually use text to label taxa, i.e. displaying taxa names. If the text is image file name (either local or remote), ggtree can read the image and display the actual image as label of the taxa. The geom_tiplab and geom_nodelab are capable to render silhouette image by internally called ggimage package. library(ggimage) library(ggtree) nwk &lt;- &quot;((((bufonidae, dendrobatidae), ceratophryidae), (centrolenidae, leptodactylidae)), hylidae);&quot; x = read.tree(text = nwk) ggtree(x) + xlim(NA, 7) + ylim(NA, 6.2) + geom_tiplab(aes(image=paste0(&quot;img/frogs/&quot;, label, &#39;.jpg&#39;)), geom=&quot;image&quot;, offset=2, align=2, size=.2) + geom_tiplab(geom=&#39;label&#39;, offset=1, hjust=.5) + geom_image(x=.8, y=5.5, image=&quot;img/frogs/frog.jpg&quot;, size=.2) 8.2 Annotating Tree with Phylopic Phylopic contains more than 3200 silhouettes and covers almost all life forms. ggtree also supports using phylopic1 to annotate the tree. Most importantly, we can color the image using numerical/categorical variable. tree &lt;- ape::read.nexus(&quot;https://raw.githubusercontent.com/rgriff23/Dissertation/master/Chapter_2/data/tree.nex&quot;) phylopic_info &lt;- data.frame(node = c(124, 113, 110, 96, 89, 70), phylopic = c(&quot;7fb9bea8-e758-4986-afb2-95a2c3bf983d&quot;, &quot;bac25f49-97a4-4aec-beb6-f542158ebd23&quot;, &quot;f598fb39-facf-43ea-a576-1861304b2fe4&quot;, &quot;aceb287d-84cf-46f1-868c-4797c4ac54a8&quot;, &quot;0174801d-15a6-4668-bfe0-4c421fbe51e8&quot;, &quot;72f2f854-f3cd-4666-887c-35d5c256ab0f&quot;), species = c(&quot;galagoids&quot;, &quot;lemurs&quot;, &quot;tarsiers&quot;, &quot;cebids&quot;, &quot;hominoids&quot;, &quot;cercopithecoids&quot;)) pg &lt;- ggtree(tree) pg %&lt;+% phylopic_info + geom_nodelab(aes(image=phylopic, color=species, subset=!is.na(species)), geom=&quot;phylopic&quot;) + theme(legend.position=c(.1, .8)) 8.3 Annotating Tree with Sub-plots ggtree provides a function, inset, for adding subplots to a phylogenetic tree. The input is a tree graphic object and a named list of ggplot graphic objects (can be any kind of charts), these objects should named by node numbers. To facilitate adding bar and pie charts (e.g. summarized stats of results from ancestral reconstruction) to phylogenetic tree, ggtree provides nodepie and nodebar functions to create a list of pie or bar charts. 8.3.1 Annotate with bar charts set.seed(2015-12-31) tr &lt;- rtree(15) p &lt;- ggtree(tr) a &lt;- runif(14, 0, 0.33) b &lt;- runif(14, 0, 0.33) c &lt;- runif(14, 0, 0.33) d &lt;- 1 - a - b - c dat &lt;- data.frame(a=a, b=b, c=c, d=d) ## input data should have a column of `node` that store the node number dat$node &lt;- 15+1:14 ## cols parameter indicate which columns store stats (a, b, c and d in this example) bars &lt;- nodebar(dat, cols=1:4) inset(p, bars, width=.2, height=1) Users can set the color via the parameter color. The x position can be one of ‘node’ or ‘branch’ and can be adjusted by the parameter hjust and vjust for horizontal and vertical adjustment respecitvely. bars2 &lt;- nodebar(dat, cols=1:4, position=&#39;dodge&#39;, color=c(a=&#39;blue&#39;, b=&#39;red&#39;, c=&#39;green&#39;, d=&#39;cyan&#39;)) p2 &lt;- inset(p, bars2, x=&#39;branch&#39;, width=.2, height=1, vjust=-.3) print(p2) 8.3.2 Annotate with pie charts Similarly, users can use nodepie function to generate a list of pie charts and place these charts to annotate corresponding nodes. Both nodebar and nodepie accepts parameter alpha to allow transparency. pies &lt;- nodepie(dat, cols=1:4, alpha=.6) inset(p, pies, width=1, height=1, hjust=-.06) 8.3.3 Annotate with other types of charts The inset function accepts a list of ggplot graphic objects and these input objects are not restricted to pie or bar charts. They can be any kinds of charts and hybrid of these charts. pies_and_bars &lt;- bars2 pies_and_bars[9:14] &lt;- pies[9:14] inset(p, pies_and_bars, width=.3, height=1) d &lt;- lapply(1:15, rnorm, n=100) ylim &lt;- range(unlist(d)) bx &lt;- lapply(d, function(y) { dd &lt;- data.frame(y=y) ggplot(dd, aes(x=1, y=y))+geom_boxplot() + ylim(ylim) + theme_inset() }) names(bx) &lt;- 1:15 inset(p, bx, width=.2, height=2, hjust=-.05) After annotating with insets, users can further annotate the tree with another layer of insets. p2 &lt;- inset(p, bars2, x=&#39;branch&#39;, width=.5, height=1, vjust=-.4) p2 &lt;- inset(p2, pies, x=&#39;branch&#39;, vjust=.4, width=.5, height=1) bx2 &lt;- lapply(bx, function(g) g+coord_flip()) inset(p2, bx2, width=2, height=1, vjust=.04, hjust=p2$data$x[1:15]-5) + xlim(NA, 6) 8.4 Have Fun with Phylomoji #phylomoji is fun and it is internally supported by ggtree since 20152. Here, we will use ggtree to recreate the figure: library(ggplot2) library(ggtree) tt = &#39;((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));&#39; tree = read.tree(text = tt) d &lt;- data.frame(label = c(&#39;snail&#39;,&#39;mushroom&#39;, &#39;sunflower&#39;, &#39;evergreen_tree&#39;,&#39;leaves&#39;, &#39;green_salad&#39;), group = c(&#39;animal&#39;, &#39;fungi&#39;, &#39;flowering plant&#39;, &#39;conifers&#39;, &#39;ferns&#39;, &#39;mosses&#39;)) ggtree(tree, linetype = &quot;dashed&quot;, size=1, color=&#39;firebrick&#39;) %&lt;+% d + xlim(0, 4.5) + ylim(0.5, 6.5) + geom_tiplab(aes(color=label), parse=&quot;emoji&quot;, size=15, vjust=.25) + geom_tiplab(aes(label = group), geom=&quot;label&quot;, x=3.5, hjust=.5) With ggtree, it is easy to generate phylomoji. The emoji is treated as text, like abc. We can use emojis to label taxa, clade, color and ratate emoji with any given color and angle. 8.4.1 emoji in cirular/fan layout tree p &lt;- ggtree(tree, layout = &quot;circular&quot;, size=1) + geom_tiplab2(aes(color=label), parse=&quot;emoji&quot;, size=10, vjust=.25) print(p) ## fan layout p2 &lt;- open_tree(p, angle=200) print(p2) p2 %&gt;% rotate_tree(-90) 8.4.2 emoji to label clades set.seed(123) tr &lt;- rtree(30) ggtree(tr) + xlim(NA, 5) + geom_cladelabel(node=41, label=&quot;chicken&quot;, parse=&quot;emoji&quot;, fontsize=12, align=TRUE, color=&quot;firebrick&quot;) + geom_cladelabel(node=51, label=&quot;duck&quot;, parse=&quot;emoji&quot;, fontsize=12, align=TRUE, color=&quot;steelblue&quot;) + geom_cladelabel(node=32, label=&quot;family&quot;, parse=&quot;emoji&quot;, fontsize=12, align=TRUE, color=&quot;darkkhaki&quot;) 8.4.3 Apple Color Emoji Although R’s graphical devices don’t support AppleColorEmoji font, it’s still possible to use it. We can export the plot to svg file and render it in Safari. library(ggtree) tree_text &lt;- &quot;(((((cow, (whale, dolphin)), (pig2, boar)), camel), fish), seedling);&quot; x &lt;- read.tree(text=tree_text) library(ggimage) library(gridSVG) p &lt;- ggtree(x, size=2) + geom_tiplab(size=20, parse=&#39;emoji&#39;) + xlim(NA, 7) + ylim(NA, 8.5) + geom_phylopic(image=&quot;79ad5f09-cf21-4c89-8e7d-0c82a00ce728&quot;, color=&quot;firebrick&quot;, alpha = .3, size=Inf) p ps = grid.export(&quot;emoji.svg&quot;, addClass=T) https://twitter.com/guangchuangyu/status/593443854541434882↩ https://twitter.com/guangchuangyu/status/662095056610811904 and https://twitter.com/guangchuangyu/status/667337429704011777↩ "],
["references.html", "References", " References "]
]
