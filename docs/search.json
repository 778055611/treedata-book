[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"","code":""},{"path":"introduction.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"\n\n\ncan‚Äôt even begin understand biology, can‚Äôt understand life, unless\nunderstand ‚Äôs , arose - means\nevolution.‚Äî Richard Dawkins","code":""},{"path":"introduction.html","id":"motivation","chapter":"Introduction","heading":"üéØ Motivation","text":"book meant guide data integration, manipulation visualization phylogenetic trees using suite R packages, tidytree, treeio ggtree. Hence, starting read book, assume working knowledge use R ggplot2.","code":""},{"path":"introduction.html","id":"citation","chapter":"Introduction","heading":"üìù Citation","text":"use software suite published research, please cite appropriate paper(s) list:G Yu. Using ggtree visualize data tree-like structures. Current Protocols Bioinformatics, 2020, 69:e96. doi: 10.1002/cpbi.96.LG Wang, TTY Lam, S Xu, Z Dai, L Zhou, T Feng, P Guo, CW Dunn, BR Jones, T Bradley, H Zhu, Y Guan, Y Jiang, G Yu*. treeio: R package phylogenetic tree input output richly annotated associated data. Molecular Biology Evolution. 2020, 37(2):599-603.\ndoi: 10.1093/molbev/msz240.G Yu*, TTY Lam, H Zhu, Y Guan*. Two methods mapping visualizing associated data phylogeny using ggtree. Molecular Biology Evolution. 2018, 35(2):3041-3043.\ndoi: 10.1093/molbev/msy194.G Yu, DK Smith, H Zhu, Y Guan, TTY Lam*. ggtree: R package \nvisualization annotation phylogenetic trees covariates \nassociated data. Methods Ecology Evolution. 2017, 8(1):28-36.\ndoi: 10.1111/2041-210X.12628.","code":""},{"path":"introduction.html","id":"book-structure","chapter":"Introduction","heading":"üìö Book structure","text":"Part 1 (Tree data input, output manipulation) describes treeio package tree data input output, tidytree package tree data manipulation.Part 2 (Tree data visualization annotation) introduces tree visualization annotation using grammar graphic syntax implemented ggtree package. emphasizes presenting tree associated data tree.Part 3 (ggtree extensions) introduces ggtreeExtra presenting data circular layout trees extensions including MicrobiotaProcess ggnetworx etc..Part 4 (Miscellaneous topics) describes utilities provided ggtree package suite presents set reproducible examples.","code":""},{"path":"introduction.html","id":"want-to-help","chapter":"Introduction","heading":"üíñ Want to help?","text":"book‚Äôs source code hosted GitHub, https://github.com/YuLab-SMU/treedata-book. feedback book welcome. Feel free open issue GitHub send pull request notice typos issues (‚Äôm native English speaker ;) ).","code":""},{"path":"chapter1.html","id":"chapter1","chapter":"1 Importing Tree with Data","heading":"1 Importing Tree with Data","text":"","code":""},{"path":"chapter1.html","id":"pc","chapter":"1 Importing Tree with Data","heading":"1.1 Overview of Phylogenetic Tree Construction","text":"Phylogenetic trees used describe genealogical relationships among group organisms, can constructed based genetic sequences organisms. rooted phylogenetic tree represents model evolutionary history depicted ancestor-descendant relationships tree nodes clustering ‚Äòsister‚Äô ‚Äòcousin‚Äô organisms different level relatedness, illustrated Figure 1.1. infectious disease research, phylogenetic trees usually built pathogens‚Äô gene genome sequences show pathogen sample genetically closer pathogen sample, providing insights underlying unobserved epidemiologic linkage potential source outbreak.\nFigure 1.1: Components phylogenetic tree. External nodes (green circles), also called ‚Äòtips‚Äô, represent actual organisms sampled sequenced (e.g., virus infectious disease research). ‚Äòtaxa‚Äô terminology evolutionary biology. internal nodes (blue circles) represent hypothetical ancestors tips. root (red circle) common ancestor species tree. horizontal lines branches represent evolutionary changes (grey number) measured unit time genetic divergence. bar bottom provides scale branch lengths.\nPhylogenetic tree can constructed genetic sequences using distance-based methods character-based methods. Distance-based methods, including unweighted pair group method arithmetic means (UPGMA) Neighbor-joining (NJ), based matrix pairwise genetic distances calculated sequences. character-based methods, including maximum parsimony (MP) (Fitch 1971), maximum likelihood (ML) (Felsenstein 1981), Bayesian Markov Chain Monte Carlo (BMCMC) method (Rannala Yang 1996), based mathematical model describes evolution genetic characters search best phylogenetic tree according optimality criteria.Maximum Parsimony (MP) method assumes evolutionary change rare minimizes amount character-state changes (e.g., number DNA substitutions). criterion similar Occam‚Äôs razor, simplest hypothesis can explains data best hypothesis. Unweighted parsimony assumes mutations across different characters (nucleotides amino acids) equally likely weighted method assume unequal likely mutations (e.g., third codon position liable codon positions; transition mutations higher frequency transversion). concept MP method straightforward intuitive, probable reason popularity amongst biologists care research question rather computational details analysis. However, method number disadvantages, particular tree inference can biased well-known systematic error called long-branch attraction (LBA) incorrectly infer distantly related lineages closely related (Felsenstein 1978). MP method poorly takes consideration many sequence evolution factors (e.g., reversals convergence) hardly observable existing genetic data.Maximum likelihood (ML) method Bayesian Markov Chain Monte Carlo (BMCMC) method two commonly used methods phylogenetic tree construction often used scientific publications. ML BMCMC methods require substitution model sequence evolution. Different sequence data different substitution models formulate evolutionary process DNA, codon amino acid. several models nucleotide substitution, including JC69, K2P, F81, HKY GTR (Arenas 2015). models can used conjunction rate variation across sites (denoted +\\(\\Gamma\\))) (Yang 1994) proportion invariable sites (denoted +) (Shoemaker Fitch 1989). Previous research (Lemmon Moriarty 2004) suggested misspecification substitution model might bias phylogenetic inference. Procedural testing best-fit substitution model recommended.optimal criterion ML method find tree maximizes likelihood given sequence data. procedure ML method simple: calculating likelihood tree optimizing topology branches (substitution model parameters, fixed) best tree found. Heuristic search implemented PhyML RAxML, often used find best tree based likelihood criterion. Bayesian method finds tree maximizes posterior probability sampling trees MCMC based given substitution model. One advantage BMCMC parameter variance tree topological uncertainty, included posterior clade probability, can naturally conveniently obtained sampling trees MCMC process. Moreover, influence topological uncertainty parameter estimates also naturally integrated BMCMC phylogenetic framework.simple phylogenetic tree, data associated tree branches/nodes branch lengths (indicating genetic time divergence) lineage supports bootstrap values estimated bootstrapping procedure posterior clade probability summarized sampled trees BMCMC analysis.","code":""},{"path":"chapter1.html","id":"format","chapter":"1 Importing Tree with Data","heading":"1.2 Phylogenetic Tree Formats","text":"several file formats designed store phylogenetic trees data associated nodes branches. three commonly used formats Newick1, NEXUS (Maddison et al. 1997) Phylip (Felsenstein 1989). formats (e.g., NHX) extended Newick format. Newick NEXUS formats supported input software evolutionary biology, software tools output newer standard files (e.g., BEAST MrBayes) introducing new rules/data blocks storing evolutionary inferences. cases (e.g., PAML r8s), output log files recognized single software.","code":""},{"path":"chapter1.html","id":"newick-tree-format","chapter":"1 Importing Tree with Data","heading":"1.2.1 Newick tree format","text":"Newick tree format standard representing trees computer-readable form.\nFigure 1.2: sample tree demonstrating Newick text encode tree structure. Tips aligned right hand side branch lengths labelled middle branch.\nrooted tree shown Figure 1.2 can represented following sequence characters newick tree text.tree text ends semicolon. Internal nodes represented pair matched parentheses. parentheses descendant nodes node. instance (t4:0.59, t1:0.37) represents parent node t4 t1 immediate descendants. Sibling nodes separated comma tips represented names. branch length (parent node child node) represented real number child node preceded colon. Singular data (e.g., bootstrap values) associated internal nodes branches maybe encoded node label represented simple text/numbers colon.Newick tree format developed Meacham 1984 PHYLIP (Retief 2000) package. Newick format now widely used tree format used PHYLIP, PAUP* (Wilgenbusch Swofford 2003), TREE-PUZZLE (Schmidt et al. 2002), MrBayes many applications. Phylip tree format contains Phylip multiple sequence alignment (MSA) corresponding Newick tree text built based MSA sequences file.","code":"((t2:0.04,t1:0.34):0.89,(t5:0.37,(t4:0.03,t3:0.67):0.9):0.59); "},{"path":"chapter1.html","id":"nexus-tree-format","chapter":"1 Importing Tree with Data","heading":"1.2.2 NEXUS tree format","text":"NEXUS format (Maddison et al. 1997) incorporates Newick tree text related information organized separated units known blocks. NEXUS block following structure:example, example tree can saved following NEXUS format:Comments can placed using square brackets. blocks can recognized programs including TAXA (contains information taxa), DATA (contains data matrix, e.g., sequence alignment) TREE (contains phylogenetic tree, .e., Newick tree text). Notably, blocks can diversed recognized one particular program. example NEXUS file exported PAUP* paup block contains PAUP* commands, whereas FigTree exports NEXUS file figtree block contains visualization settings. NEXUS organizes different types data different blocks, whereas programs support reading NEXUS can parse blocks recognized ignore . good mechanism allow different programs use format without crashing unsupported types data present. Notably programs support parsing TAXA, DATA TREE blocks, therefore program/platform generically read kinds data blocks NEXUS useful phylogenetic data integration.DATA block widely used store sequence alignment. purpose, user can store tree sequence data Phylip format essentially Phylip multiple sequence alignment Newick tree text respectively. used Phylogeny Inference Package (PHYLIP).","code":"#NEXUS\n...\nBEGIN characters;\n...\nEND;#NEXUS\n[R-package APE, Wed Nov  9 11:46:32 2016]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 5;\n    TAXLABELS\n        t5\n        t4\n        t1\n        t2\n        t3\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   t5,\n        2   t4,\n        3   t1,\n        4   t2,\n        5   t3\n    ;\n    TREE * UNTITLED = [&R] (1:0.89,((2:0.59,3:0.37):0.34,\n    (4:0.03,5:0.67):0.9):0.04);\nEND;"},{"path":"chapter1.html","id":"nhxtext","chapter":"1 Importing Tree with Data","heading":"1.2.3 New Hampshire eXtended format","text":"Newick, NEXUS phylip mainly designed store phylogenetic tree basic singular data associated internal nodes branches. addition singular data annotation branches nodes (mentioned ), New Hampshire eXtended format (NHX), based Newick (also called New Hampshire), developed introduce tags associate multiple data fields tree nodes (internal nodes tips). Tags placed branch length must wrapped [&&NHX ] makes possible compatible NEXUS format defined characters [ ] comments. NHX also output format PHYLDOG (Boussau et al. 2013) RevBayes (H√∂hna et al. 2016). Tree Viewer (ATV) (Zmasek Eddy 2001) java tool supports displaying annotation data stored NHX format, package maintained.sample tree NHX definition document2:","code":"(((ADH2:0.1[&&NHX:S=human],\nADH1:0.11[&&NHX:S=human]):0.05[&&NHX:S=primates:D=Y:B=100],ADHY:0.1[&&NHX:S=nematode],ADHX:0.12[&&NHX:S=insect]):0.1[&&NHX:S=metazoa:D=N],\n(ADH4:0.09[&&NHX:S=yeast],ADH3:0.13[&&NHX:S=yeast],\nADH2:0.12[&&NHX:S=yeast],ADH1:0.11[&&NHX:S=yeast]):0.1[&&NHX:S=Fungi])\n[&&NHX:D=N];"},{"path":"chapter1.html","id":"jplace-format","chapter":"1 Importing Tree with Data","heading":"1.2.4 Jplace format","text":"order store NGS short reads mapped onto phylogenetic tree (purpose metagenomic classification), Matsen proposed jplace format phylogenetic placements (Matsen et al. 2012). Jplace format based JSON contains four keys: tree, fields, placements, metadata version. tree value contains tree text extended Newick tree format putting edge label brackets (available) branch length putting edge number curly braces edge label. fields value contains header information placement data. value placements list pqueries. pquery contains two keys: p placements n name nm names multiplicity. value p list placement pqueries.jplace sample file:Jplace output format pplacer (Frederick . Matsen, Kodner, Armbrust 2010) Evolutionary Placement Algorithm (EPA) (Berger, Krompass, Stamatakis 2011). two programs contain tools visualize placement results. Pplacer provides placeviz convert jplace file phyloXML Newick formats can visualized Archaeopteryx3.","code":"{\n    \"tree\": \"(((((((A:4{1},B:4{2}):6{3},C:5{4}):8{5},D:6{6}):\n    3{7},E:21{8}):10{9},((F:4{10},G:12{11}):14{12},H:8{13}):\n    13{14}):13{15},((I:5{16},J:2{17}):30{18},(K:11{19},\n    L:11{20}):2{21}):17{22}):4{23},M:56{24});\",\n    \"placements\": [\n    {\"p\":[24, -61371.300778, 0.333344, 0.000003, 0.003887], \n     \"n\":[\"AA\"]\n    },\n    {\"p\":[[1, -61312.210786, 0.333335, 0.000001, 0.000003],\n          [2, -61322.210823, 0.333322, 0.000003, 0.000003],\n          [3, -61352.210823, 0.333322, 0.000961, 0.000003]],\n     \"n\":[\"BB\"]\n    },\n    {\"p\":[[8, -61312.229128, 0.200011, 0.000001, 0.000003],\n          [9, -61322.229179, 0.200000, 0.000003, 0.000003],\n          [10, -61342.229223, 0.199992, 0.000003, 0.000003]], \n    \"n\":[\"CC\"]\n    }\n    ],\n    \"metadata\": {\"info\": \"a jplace sample file\"},\n    \"version\" : 2,\n    \"fields\": [\"edge_num\", \"likelihood\", \"like_weight_ratio\", \n    \"distal_length\", \"pendant_length\"\n    ]\n}"},{"path":"chapter1.html","id":"software-outputs","chapter":"1 Importing Tree with Data","heading":"1.2.5 Software outputs","text":"RAxML (Stamatakis 2014) can output Newick format storing bootstrap values internal node labels. Another way RAxML supported place bootstrap value inside square brackets branch length. supported software support Newick format square brackets ignored.BEAST (Bouckaert et al. 2014) output based NEXUS also introduce square brackets tree block store evolutionary evidences inferred BEAST. Inside brackets, curly braces may also incorporated feature values length 1 (e.g., HPD range substitution rate). brackets placed node branch length (.e., label exists colon). Bracket defined Newick format reserve character NEXUS comment. information ignored standard NEXUS parsers.sample TREE block BEAST output:BEAST output can contain many different evolutionary inferences, depending analysis models defined BEAUTi running. example molecular clock analysis, contains rate, length, height, posterior corresponding HPD range uncertainty estimation. Rate estimated evolutionary rate branch. Length length branch years. Height time node root posterior Bayesian clade credibility value. example output tree clock analysis contains inferences. save space, length estimation shown . Besides, MEGA (Kumar, Stecher, Tamura 2016) also supports exporting tree BEAST compatible Nexus format (see session 1.3.2).MrBayes (Huelsenbeck Ronquist 2001) program uses Markov Chain Monte Carlo method sample posterior probability distributions. output file annotates nodes branches separately two sets square brackets. example , posterior clade probabilities node branch length estimates branch:save space, inferences removed contains prob clade probability length_mean mean value branch length. full version file also contains prob_stddev, prob_range, prob(percent), prob+-sd probability inferences length_median, length_95%_HPD every branch.BEAST MrBayes outputs expected parsed without inferences (dropped comments) software support NEXUS. FigTree supports parsing BEAST MrBayes outputs inferences can used display annotate tree. extracting data analysis still challenging.HyPhy (Pond, Frost, Muse 2005) number phylogenetic analysis, including ancestral sequence reconstruction. ancestral sequence reconstruction, sequences Newick tree text stored NEXUS format major analysis output. completely follow NEXUS definition put ancestral node labels TAXA instead external node label. MATRIX block contains sequence alignment ancestral nodes referred back tree stored TREES block since contains node labels. sample output (save space, first 72bp alignment shown):applications output rich information text also contains phylogenetic trees associated data. example r8s (Sanderson 2003) output three trees log file, namely TREE, RATE PHYLO branches scaled time, substitution rate, absolute substitutions respectively.Phylogenetic Analysis Maximum Likelihood (PAML) (Yang 2007) package programs phylogenetic analyses DNA protein sequences. Two main programs, BaseML CodeML, implement variety models. BaseML estimates tree topology, branch lengths substitution parameters using number nucleotide substitution models available, including JC69, K80, F81, F84, HKY85, T92, TN93 GTR. CodeML estimates synonymous non-synonymous substitution rates, likelihood ratio test positive selection codon substitution models (Goldman Yang 1994).BaseML outputs mlb file contains input sequence (taxa) alignment phylogenetic tree branch length well substitution model parameters estimated. supplementary result file, rst, contains sequence alignment (ancestral sequence perform reconstruction ancestral sequences) Naive Empirical Bayes (NBE) probabilities site alignment evolved. CodeML outputs mlc file contains tree structure estimation synonymous non-synonymous substitution rates. CodeML also output supplementary result file, rst, similar BaseML except site defined codon instead nucleotide. Parsing files can tedious oftentimes need number post-processing steps require expertise programming (e.g.¬†Python4 Perl5).Introducing square brackets quite common storing extra information, including RAxML store bootstrap value, NHX format annotation, jplace edge label BEAST evolutionary estimation, etc.. positions place square brackets consistent different software contents employ different rules storing associated data, properties make difficult parse associated data. software, just ignore square brackets parse tree structure file compatible. contains invalid characters (e.g.¬†curly braces tree field jplace format) even tree structure can‚Äôt parsed standard parsers.difficult extract useful phylogeny/taxon-related information different analysis outputs produced various evolutionary inference software, displaying phylogenetic tree analysis. FigTree supports BEAST output, software outputs contains evolutionary inferences associated data. output rich text files (e.g.¬†r8s, PAML, etc.), tree structure parsed tree viewing software users need expertise manually extract phylogenetic tree useful result data output file. However, manual operation slow error-prone.easy retrieve phylogenetic trees evolutionary data different analysis outputs commonly used software field. (e.g., PAML output jplace file) without software programming library support parsing file, others (e.g., BEAST MrBayes output) can parsed without evolutionary inferences stored square brackets omitted comment software. Although FigTree support visualizing evolutionary statistics inferred BEAST MrBayes, extracting data analysis supported. Different software packages implement different algorithms different analyses (e.g., PAML dN/dS, HyPhy ancestral sequences BEAST skyline analysis). Therefore, encountering genomic sequence data, desire need efficiently flexibly integrate different analysis inference results comprehensive understanding, comparison analysis. motivated us develop programming library parse phylogenetic trees data various sources.","code":"tree TREE1 = [&R]\n(((11[&length=9.4]:9.38,14[&length=6.4]:6.385096430786298)\n[&length=25.7]:25.43,4[&length=9.1]:8.821663252749829)\n[&length=3.0]:3.10,(12[&length=0.6]:0.56,\n(10[&length=1.6]:1.56,(7[&length=5.2]:5.19,\n((((2[&length=3.3]:3.26,(1[&length=1.3]:1.32,\n(6[&length=0.8]:0.83,13[&length=0.8]:0.8311577761397366)\n[&length=2.4]:2.48917886025146)\n[&length=0.9]:0.9416178372674331)\n[&length=0.4]:0.49,9[&length=1.7]:1.757288031101215)\n[&length=2.4]:2.35,8[&length=2.1]:2.1125745387283246)\n[&length=0.2]:0.23,(3[&length=3.3]:3.31,\n(15[&length=5.2]:5.27,5[&length=3.2]:3.2710481368304585)\n[&length=1.0]:1.0409443024626412)\n[&length=1.9]:2.0372962536780435)\n[&length=2.8]:2.8446835614595685)\n[&length=5.3]:5.367459711197171)\n[&length=2.0]:2.0037467863383043)\n[&length=4.3]:4.360909907798238)[&length=0.0];tree con_all_compat = [&U]\n(8[&prob=1.0]:2.94e-1[&length_mean=2.9e-1],10[&prob=1.0]:2.25e-1[&length_mean=2.2e-1],\n((((1[&prob=1.0]:1.43e-1[&length_mean=1.4e-1],2[&prob=1.0]:1.92e-1[&length_mean=1.9e-1])\n[&prob=1.0]:1.24e-1[&length_mean=1.2e-1],9[&prob=1.0]:2.27e-1[&length_mean=2.2e-1])\n[&prob=1.0]:1.72e-1[&length_mean=1.7e-1],12[&prob=1.0]:5.11e-1[&length_mean=5.1e-1])\n[&prob=1.0]:1.76e-1[&length_mean=1.7e-1],\n(((3[&prob=1.0]:5.46e-2[&length_mean=5.4e-2],\n(6[&prob=1.0]:1.03e-2[&length_mean=1.0e-2],7[&prob=1.0]:7.13e-3[&length_mean=7.2e-3])\n[&prob=1.0]:6.93e-2[&length_mean=6.9e-2])\n[&prob=1.0]:6.03e-2[&length_mean=6.0e-2],\n(4[&prob=1.0]:6.27e-2[&length_mean=6.2e-2],5[&prob=1.0]:6.31e-2[&length_mean=6.3e-2])\n[&prob=1.0]:6.07e-2[&length_mean=6.0e-2])\n[&prob=1.0]:1.80e-1[&length_mean=1.8e-1],11[&prob=1.0]:2.37e-1[&length_mean=2.3e-1])\n[&prob=1.0]:4.05e-1[&length_mean=4.0e-1])\n[&prob=1.0]:1.16e+000[&length_mean=1.162699558201079e+000])\n[&prob=1.0][&length_mean=0];#NEXUS\n\n[\nGenerated by HYPHY 2.0020110620beta(MP) for MacOS(Universal Binary) \n    on Tue Dec 23 13:52:34 2014\n\n]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 13;\n    TAXLABELS\n        'Node1' 'Node2' 'Node3' 'Node4' 'Node5' 'Node12' 'Node13' 'Node15'\n            'Node18' 'Node20' 'Node22' 'Node24' 'Node26' ;\nEND;\n\nBEGIN CHARACTERS;\n    DIMENSIONS NCHAR = 2148;\n    FORMAT\n        DATATYPE = DNA\n\n        GAP=-\n        MISSING=?\n        NOLABELS\n    ;\n\nMATRIX\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATTGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAGTGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\nEND;\n\nBEGIN TREES;\n    TREE tree = (K,N,(D,(L,(J,(G,((C,(E,O)),(H,(I,(B,(A,(F,M)))))))))));\nEND;"},{"path":"chapter1.html","id":"getting-tree-data-with-treeio","chapter":"1 Importing Tree with Data","heading":"1.3 Getting Tree Data with treeio","text":"Phylogenetic trees commonly used present evolutionary relationships \nspecies. Information associated taxon species/strains may \nanalyzed context evolutionary history depicted phylogenetic\ntree. example, host information influenza virus strains tree\nstudied understand host range virus linage. Moreover, \nmeta-data (e.g., isolation host, time, location, etc.) directly associated\ntaxon strains also often subjected evolutionary \ncomparative phylogenetic models analyses, infer dynamics associated\nevolutionary transmission processes virus. \nmeta-data phenotypic experimental data stored either \nannotation data associated nodes branches, often produced \ninconsistent format different analysis programs.Getting trees R still limited. Newick Nexus can imported \nseveral packages, including ape, phylobase. NeXML\nformat can parsed RNeXML. However, analysis results \nwidely used software packages field well\nsupported. SIMMAP output can parsed phyext2 phytools.\nAlthough PHYLOCH can\nimport BEAST MrBayes output, internal node attributes parsed \ntip attributes ignore6. Many software outputs mainly required\nprogramming expertise import tree associated data. Linking external\ndata, including experimental clinical data, phylogeny another obstacle\nevolution biologists.fill gap tree formats software outputs parsed within software/platform, R package treeio (Wang et al. 2020) developed parsing various tree file formats outputs common evolutionary analysis software. treeio package developed R programming language (R Core Team 2016). tree structure can parsed also associated data evolutionary inferences, including NHX\nannotation, clock rate inferences (BEAST\nr8s (Sanderson 2003) programs),\nsnynonymous non-synonymous substitutions (CodeML), ancestral\nsequence construction (\nHyPhy,\nBaseML\nCodeML), etc..\nCurrently, treeio able read\nfollowing file formats: Newick, Nexus, New Hampshire eXtended format (NHX),\njplace Phylip well data outputs following analysis programs:\nASTRAL,\nBEAST,\nEPA,\nHyPhy,\nMEGA,\nMrBayes,\nPAML,\nPHYLDOG,\npplacer,\nr8s,\nRAxML \nRevBayes etc. made possible several parser functions developed treeio (Table 1.1) (Wang et al. 2020).\nTable 1.1: Parser functions defined treeio\ntreeio package defines base\nclasses functions phylogenetic tree input output. \ninfrastructure enables evolutionary evidences inferred commonly\nused software packages used R. instance, dN/dS values \nancestral sequences inferred\nCODEML (Yang 2007),\nclade support values (posterior) inferred\nBEAST (Bouckaert et al. 2014) short read placement\n\nEPA (Berger, Krompass, Stamatakis 2011)\npplacer (Frederick Matsen, Kodner, Armbrust 2010). \nevolutionary evidences can analyzed R used annotate\nphylogenetic tree using ggtree\n(Yu et al. 2017). growth analysis tools models introduces\nchallenge integrate different varieties data analysis results \ndifferent sources integral analysis phylogenetic tree\nbackground. treeio package (Wang et al. 2020)\nprovides merge_tree function allow combining tree data obtained \ndifferent sources. addition, treeio also enables external data linked phylogenetic tree structure.parsing, storage tree structure associated data made\nS4 class, treedata, defined tidytree package. parsed data\nmapped tree branches nodes inside treedata object, \ncan efficiently used visually annotate tree\nusing ggtree package (Yu et al. 2017) (described Chapter 4 5).\nprogrammable platform phylogenetic data parsing, integration annotations makes us easier identify evolutionary dynamics correlation patterns (Figure 1.3, Figure 1 (Wang et al. 2020)).\nFigure 1.3: Overview treeio package relations tidytree ggtree. Treeio supports parsing tree data number file formats software outputs. treedata object stores phylogenetic tree node/branch-associated data. Treeio provides several functions manipulate tree data. Users can convert treedata object tidy data frame (row represents node tree column represents variable) process tree data using tidy interface implemented tidytree. tree can extracted treedata object exported Newick NEXUS file can exported associated data single file (either BEAST NEXUS jtree format). Associated data stored treedata object can used annotate tree using ggtree. addition, ggtree supports number tree objects, including phyloseq microbiome data obkData outbreak data. phylo, multiPhylo (ape package), phylo4, phylo4d (phylobase package), phylog (ade4 package), phyloseq (phyloseq package), obkData (OutbreakTools package) tree objects defined R community store tree without domain-specific data. tree objects well hierachical clustering results (e.g., hclust dendrogram objects) supported ggtree.\n","code":""},{"path":"chapter1.html","id":"overview-of-treeio","chapter":"1 Importing Tree with Data","heading":"1.3.1 Overview of treeio","text":"treeio package (Wang et al. 2020) defined S4 classes storing phylogenetic tree diverse types associated data covariates different sources including analysis outputs different software packages. also defined corresponding parser functions parsing phylogenetic tree annotation data stored data object R manipulation analysis (see Table 1.1). Several accessor functions defined facilitate accessing tree annotation data, including get.fields obtaining annotation features available tree object, get.placements obtaining phylogenetic placement results (.e., output pplacer, EPA, etc.), get.subs obtaining genetic substitutions parent node child node, get.tipseq getting tip sequences.S3 class, phylo, defined ape (Paradis, Claude, Strimmer 2004) package, widely used R community many packages. treeio uses S4 class, enable available R packages analyze tree imported treeio, treeio provides .phylo function convert treeio-generated tree object phylo object contains tree structure without annotation data. way, treeio also provides .treedata function convert phylo object evolutionary analysis result (e.g., bootstrap values calculated ape ancestral states inferred phangorn (Schliep 2011) etc) stored treedata S4 object, making easy map data tree structure visualized using ggtree (Yu et al. 2017).allow integration different kinds data phylogenetic tree, treeio (Wang et al. 2020) provides merge_tree function (details section 2.2.1) combining evolutionary statistics/evidences imported different sources including common tree files outputs analysis programs (Table 1.1). information, sampling location, taxonomy information, experimental result evolutionary traits, etc. stored separate files user-defined format. treeio, read data users‚Äô files using standard R IO functions, attach tree object full_join methods defined tidytree treeio packages (see also %<+% operator defined ggtree). attaching, data become attributes associated nodes branches, can compared data incorporated, can visually displayed tree.facilitate storing merged data single file, treeio implemented write.baset write.jtree function export treedata object storing complex data associated phylogenetic tree (see Chapter 3).","code":""},{"path":"chapter1.html","id":"function-demonstration","chapter":"1 Importing Tree with Data","heading":"1.3.2 Function Demonstration","text":"","code":""},{"path":"chapter1.html","id":"parsing-beast-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.1 Parsing BEAST output","text":"Since % valid character names, feature names contain x% convert 0.x. example, length_95%_HPD changed length_0.95_HPD.tree structure also features inferred BEAST stored S4 object. features can used tree annotation (Figure 5.7).","code":"\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nbeast## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/BEAST/beast_mcc.tree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 14 internal nodes.\n## \n## Tip labels:\n##   A_1995, B_1996, C_1995, D_1987, E_1996, F_1997, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_median',\n##  'height_range', 'length',   'length_0.95_HPD',\n##  'length_median',    'length_range', 'posterior',    'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range'."},{"path":"chapter1.html","id":"mega","chapter":"1 Importing Tree with Data","heading":"1.3.2.2 Parsing MEGA output","text":"MEGA (Kumar, Stecher, Tamura 2016) supports exporting trees three distinct formats: Newick, tabular Nexus. Newick file can parsed using read.tree read.newick functions. MEGA Nexus file similar BEAST Nexus treeio (Wang et al. 2020) provides read.mega function parse tree.tabular output contains tree associated information (divergence time example) tabular flat text file. read.mega_tabular function can parse tree data simultaneously.","code":"\nfile <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree.nex\", package = \"treeio\")\nread.mega(file)## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/MEGA7/mtCDNA_timetree.nex'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 7 tips and 6 internal nodes.\n## \n## Tip labels:\n##   homo_sapiens, chimpanzee, bonobo, gorilla, orangutan, sumatran, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'branch_length',    'data_coverage',    'rate', 'reltime',\n##  'reltime_0.95_CI',  'reltime_stderr'.\nfile <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree_tabular.txt\", package = \"treeio\")\nread.mega_tabular(file) ## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/MEGA7/mtCDNA_timetree_tabular.txt'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 7 tips and 6 internal nodes.\n## \n## Tip labels:\n##   chimpanzee, bonobo, homo sapiens, gorilla, orangutan, sumatran, ...\n## Node labels:\n##   , , demoLabel2, , , \n## \n## Rooted; no branch lengths.\n## \n## with the following features available:\n##  'RelTime',  'CI_Lower', 'CI_Upper', 'Rate',\n##  'Data Coverage'."},{"path":"chapter1.html","id":"parsing-mrbayes-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.3 Parsing MrBayes output","text":"","code":"\nfile <- system.file(\"extdata/MrBayes\", \"Gq_nxs.tre\", package=\"treeio\")\nread.mrbayes(file)## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/MrBayes/Gq_nxs.tre'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 12 tips and 10 internal nodes.\n## \n## Tip labels:\n##   B_h, B_s, G_d, G_k, G_q, G_s, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'length_0.95HPD',   'length_mean',  'length_median',    'prob',\n##  'prob_range',   'prob_stddev',  'prob_percent', 'prob+-sd'."},{"path":"chapter1.html","id":"parsing-paml-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.4 Parsing PAML output","text":"read.paml_rst function can parse rst file\nBASEML\nCODEML. \ndifference space sequences.\nBASEML, ten bases\nseparated one space, \nCODEML, three bases\n(triplet) separated one space.Similarly, can parse rst file CODEML.Ancestral sequences inferred BASEML\nCODEML via marginal \njoint ML reconstruction methods stored S4 object mapped \ntree nodes. treeio (Wang et al. 2020) automatically determine substitutions \nsequences ends branch. Amino acid substitution also \ndetermined translating nucleotide sequences amino acid sequences. \ncomputed substitutions also stored S4 object efficient tree annotation later (Figure 5.9).CODEML infers selection\npressure estimated dN/dS, dN dS. information \nstored output file mlc, can parsed read.codeml_mlc function.previous session, separately parsed rst mlc files. However, \ncan also parsed together using read.codeml function.features rst mlc files imported single S4\nobject hence available annotation visualization. \nexample, can annotate display dN/dS (mlc file) \namino acid substitutions (derived rst file) phylogenetic tree (Yu et al. 2017).","code":"\nbrstfile <- system.file(\"extdata/PAML_Baseml\", \"rst\", package=\"treeio\")\nbrst <- read.paml_rst(brstfile)\nbrst## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Baseml/rst'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'subs', 'AA_subs'.\ncrstfile <- system.file(\"extdata/PAML_Codeml\", \"rst\", package=\"treeio\")\n## type can be one of \"Marginal\" or \"Joint\"\ncrst <- read.paml_rst(crstfile, type = \"Joint\")\ncrst## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/rst'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'subs', 'AA_subs'.\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nmlc <- read.codeml_mlc(mlcfile)\nmlc## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/mlc'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  't',    'N',    'S',    'dN_vs_dS', 'dN',   'dS',   'N_x_dN',   'S_x_dS'.\n## tree can be one of \"rst\" or \"mlc\" to specify\n## using tree from which file as base tree in the object\nml <- read.codeml(crstfile, mlcfile, tree = \"mlc\")\nml## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/rst',\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/mlc'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'subs', 'AA_subs',  't',    'N',    'S',    'dN_vs_dS', 'dN',   'dS',\n##  'N_x_dN',   'S_x_dS'."},{"path":"chapter1.html","id":"parsing-hyphy-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.5 Parsing HyPhy output","text":"Ancestral sequences inferred HyPhy \nstored Nexus output file, contains tree topology ancestral\nsequences. parse data file, users can use read.hyphy.seq function.map sequences tree, user also provide \ninternal-node-labelled tree. users want determine substitution, need\nalso provide tip sequences.","code":"\nancseq <- system.file(\"extdata/HYPHY\", \"ancseq.nex\", package=\"treeio\")\nread.hyphy.seq(ancseq)## 13 DNA sequences in binary format stored in a list.\n## \n## All sequences of same length: 2148 \n## \n## Labels:\n## Node1\n## Node2\n## Node3\n## Node4\n## Node5\n## Node12\n## ...\n## \n## Base composition:\n##     a     c     g     t \n## 0.335 0.208 0.237 0.220 \n## (Total: 27.92 kb)\nnwk <- system.file(\"extdata/HYPHY\", \"labelledtree.tree\", package=\"treeio\")\ntipfas <- system.file(\"extdata\", \"pa.fas\", package=\"treeio\")\nhy <- read.hyphy(nwk, ancseq, tipfas)\nhy## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/HYPHY/labelledtree.tree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   K, N, D, L, J, G, ...\n## Node labels:\n##   Node1, Node2, Node3, Node4, Node5, Node12, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'subs', 'AA_subs'."},{"path":"chapter1.html","id":"parsing-r8s-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.6 Parsing r8s output","text":"r8s uses parametric, semiparametric \nnonparametric methods relax molecular clock allow better estimations \ndivergence times evolution rates (Sanderson 2003). outputs three\ntrees log file, namely TREE, RATO PHYLO time tree, rate tree\nabsolute substitution tree respectively.Time tree scaled divergence time, rate tree scaled substitution rate\nabsolute substitution tree scaled absolute number substitution.\nparsing file, three trees stored multiPhylo object (Figure 4.15).","code":"\nr8s <- read.r8s(system.file(\"extdata/r8s\", \"H3_r8s_output.log\", package=\"treeio\"))\nr8s## 3 phylogenetic trees"},{"path":"chapter1.html","id":"parsing-output-of-raxml-bootstraping-analysis","chapter":"1 Importing Tree with Data","heading":"1.3.2.7 Parsing output of RAxML bootstraping analysis","text":"RAxML bootstraping analysis\noutput Newick tree text standard stores bootstrap values\ninside square brackets branch lengths. file usually parsed\ntraditional Newick parser, ape::read.tree. function\nread.raxml can read file stored bootstrap additional\nfeatures, can used display tree used color tree\nbranches, etc..","code":"\nraxml_file <- system.file(\"extdata/RAxML\", \"RAxML_bipartitionsBranchLabels.H3\", package=\"treeio\")\nraxml <- read.raxml(raxml_file)\nraxml## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/RAxML/RAxML_bipartitionsBranchLabels.H3'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 64 tips and 62 internal nodes.\n## \n## Tip labels:\n##   A_Hokkaido_M1_2014_H3N2_2014, A_Czech_Republic_1_2014_H3N2_2014, FJ532080_A_California_09_2008_H3N2_2008, EU199359_A_Pennsylvania_05_2007_H3N2_2007, EU857080_A_Hong_Kong_CUHK69904_2006_H3N2_2006, EU857082_A_Hong_Kong_CUHK7047_2005_H3N2_2005, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'bootstrap'."},{"path":"chapter1.html","id":"parsing-nhx-tree","chapter":"1 Importing Tree with Data","heading":"1.3.2.8 Parsing NHX tree","text":"NHX (New Hampshire eXtended) format extension Newick introducing NHX\ntags. NHX commonly used phylogenetics software,\nincluding\nPHYLDOG (Boussau et al. 2013),\nRevBayes (H√∂hna et al. 2014),\nstoring statistical inferences. following codes imported NHX tree \nassociated data inferred PHYLDOG (Figure 3.1A).","code":"\nnhxfile <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(nhxfile)\nnhx## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/NHX/phyldog.nhx'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431, Chuniphyes_multidentata@1277217, Apolemia_sp_@1353964, Bargmannia_amoena@263997, Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'Ev',   'S',    'ND'."},{"path":"chapter1.html","id":"parsing-phylip-tree","chapter":"1 Importing Tree with Data","heading":"1.3.2.9 Parsing Phylip tree","text":"Phylip format contains multiple sequence alignment taxa Phylip sequence\nformat corresponding Newick tree text built taxon sequences.\nMultiple sequence alignment can sorted based tree structure displayed \nright hand side tree using ggtree (see also msaplot function Basic Protocol 5 (Yu 2020)).","code":"\nphyfile <- system.file(\"extdata\", \"sample.phy\", package=\"treeio\")\nphylip <- read.phylip(phyfile)\nphylip## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/sample.phy'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   K, N, D, L, J, G, ...\n## \n## Unrooted; no branch lengths."},{"path":"chapter1.html","id":"parsing-epa-and-pplacer-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.10 Parsing EPA and pplacer output","text":"EPA\n(Berger, Krompass, Stamatakis 2011) PPLACER\n(Frederick Matsen, Kodner, Armbrust 2010) common output file format, jplace, can \nparsed read.jplace() function.number evolutionary placement branch calculated \nstored nplace feature, can mapped line size /color\nusing ggtree (Yu et al. 2017).","code":"\njpf <- system.file(\"extdata/EPA.jplace\",  package=\"treeio\")\njp <- read.jplace(jpf)\nprint(jp)## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/EPA.jplace'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 493 tips and 492 internal nodes.\n## \n## Tip labels:\n##   CIR000447A, CIR000479, CIR000078, CIR000083, CIR000070, CIR000060, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'nplace'."},{"path":"chapter1.html","id":"jtree","chapter":"1 Importing Tree with Data","heading":"1.3.2.11 Parsing jtree format","text":"jtree JSON based format defined \ntreeio package (Wang et al. 2020) support tree\ndata inter change (see session 3.3).\nPhylogenetic tree associated data can exported single jtree\nfile using write.jtree function. jtree can easily parsed using \nJSON parser. jtree format contains three keys: tree, data metadata.\ntree value contains tree text extended Newick tree format putting\nedge number curly braces branch length. data value contains\nnode/branch-specific data, metadata value contains additional meta information.","code":"\njtree_file <- tempfile(fileext = '.jtree')\nwrite.jtree(beast, file = jtree_file)\nread.jtree(file = jtree_file)## 'treedata' S4 object that stored information of\n##  '/tmp/RtmpAA5R0i/file538b2594f7f8a.jtree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 14 internal nodes.\n## \n## Tip labels:\n##   K_2013, N_2010, D_1987, L_1980, J_1983, G_1992, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_range', 'length',\n##  'length_0.95_HPD',  'length_median',    'length_range', 'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range',\n##  'height_median',    'posterior'."},{"path":"chapter1.html","id":"as-treedata","chapter":"1 Importing Tree with Data","heading":"1.3.3 Converting other tree-like object to phylo or treedata object","text":"extend application scopes treeio, tidytree ggtree, treeio (Wang et al. 2020) provides several .phylo .treedata methods convert tree-like objects, phylo4d pml, phylo treedata object. users can easily mapping associated data tree structure, exporting tree /without data single file, manipulating visualizing tree /without data. convert functions (Table 1.2) create possibility using tidytree process tree using tidy interface ggtree visualize tree using grammar graphic syntax.\nTable 1.2: Conversion tree-like object phylo treedata object\n, used pml object defined phangorn package, example. pml() function computes likelihood phylogenetic tree given sequence alignment model optim.pml() function optimizes different model parameters. output pml object can converted treedata object using .treedata provided treeio (Wang et al. 2020). amino acid substitution (ancestral sequence estimated pml) stored treedata object can visualized using ggtree demonstrated Figure 1.4.\nFigure 1.4: Converting pml object treedata object.\n","code":"\nlibrary(phangorn)\ntreefile <- system.file(\"extdata\", \"pa.nwk\", package=\"treeio\")\ntre <- read.tree(treefile)\ntipseqfile <- system.file(\"extdata\", \"pa.fas\", package=\"treeio\")\ntipseq <- read.phyDat(tipseqfile,format=\"fasta\")\nfit <- pml(tre, tipseq, k=4)\nfit <- optim.pml(fit, optNni=FALSE, optBf=T, optQ=T,\n                 optInv=T, optGamma=T, optEdge=TRUE,\n                 optRooted=FALSE, model = \"GTR\",\n                 control = pml.control(trace =0))\n\npmltree <- as.treedata(fit)\nggtree(pmltree) + geom_text(aes(x=branch, label=AA_subs, vjust=-.5))"},{"path":"chapter1.html","id":"get-treedata-data","chapter":"1 Importing Tree with Data","heading":"1.3.4 Getting information from treedata object","text":"tree imported, users may want extract information stored\ntreedata object. treeio provides several accessor\nmethods extract tree structure, features/attributes stored object\ncorresponding values.get.tree .phylo methods can convert treedata object \nphylo object fundamental tree object R community \nmany packages work phylo object.get.fields method return vector features/attributes stored \nobject associated phylogeny.get.data method return tibble associated data.users interesting subset features/attributes return \nget.fields, can extract information output get.data \ndirectly subset data [ [[.","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n# or get.tree\nas.phylo(beast_tree)## \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, A/New_York/452/1999, A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\nget.fields(beast_tree)##  [1] \"height\"          \"height_0.95_HPD\" \"height_median\"  \n##  [4] \"height_range\"    \"length\"          \"length_0.95_HPD\"\n##  [7] \"length_median\"   \"length_range\"    \"posterior\"      \n## [10] \"rate\"            \"rate_0.95_HPD\"   \"rate_median\"    \n## [13] \"rate_range\"\nget.data(beast_tree)## # A tibble: 151 x 14\n##    height height_0.95_HPD height_median height_range length\n##     <dbl> <list>                  <dbl> <list>        <dbl>\n##  1   19   <dbl [2]>                19   <dbl [2]>     2.34 \n##  2   17   <dbl [2]>                17   <dbl [2]>     1.18 \n##  3   14   <dbl [2]>                14   <dbl [2]>     0.966\n##  4   12   <dbl [2]>                12   <dbl [2]>     1.87 \n##  5    9   <dbl [2]>                 9   <dbl [2]>     2.93 \n##  6   10   <dbl [2]>                10   <dbl [2]>     0.827\n##  7   10   <dbl [2]>                10   <dbl [2]>     0.834\n##  8   10.8 <dbl [2]>                10.8 <dbl [2]>     0.233\n##  9    9   <dbl [2]>                 9   <dbl [2]>     1.28 \n## 10    9   <dbl [2]>                 9   <dbl [2]>     0.414\n## # ‚Ä¶ with 141 more rows, and 9 more variables:\n## #   length_0.95_HPD <list>, length_median <dbl>,\n## #   length_range <list>, posterior <dbl>, rate <dbl>,\n## #   rate_0.95_HPD <list>, rate_median <dbl>,\n## #   rate_range <list>, node <int>\nbeast_tree[, c(\"node\", \"height\")]## # A tibble: 151 x 2\n##     node height\n##    <int>  <dbl>\n##  1    10   19  \n##  2     9   17  \n##  3    36   14  \n##  4    31   12  \n##  5    29    9  \n##  6    28   10  \n##  7    39   10  \n##  8    90   10.8\n##  9    16    9  \n## 10     2    9  \n## # ‚Ä¶ with 141 more rows\nhead(beast_tree[[\"height_median\"]])## height_median1 height_median2 height_median3 height_median4 \n##             19             17             14             12 \n## height_median5 height_median6 \n##              9             10"},{"path":"chapter1.html","id":"summary1","chapter":"1 Importing Tree with Data","heading":"1.4 Summary","text":"Software tools inferring molecular evolution (e.g., ancestral states, molecular dating selection pressure, etc.) proliferating, single data format used different programs capable store different types phylogenetic data. software packages unique output formats formats compatible . Parsing software outputs challenging, restricts joint analysis using different tools. treeio (Wang et al. 2020) provides set functions (Table 1.1) parsing various types phylogenetic data files set converter (Table 1.2) convert tree-like object phylo treedata object. phylogenetic data can integrated together allows exploration comparison. date, software tools field molecular evolution isolated often fully compatible ‚Äôs input output files. software tools designed analysis outputs often readable software. tools designed unify inference data different analysis programs. efficient incorporation data different inference methods can enhance comparison understanding study target, may help discover new systematic patterns generate new hypothesis.phylogenetic trees growing application identify patterns evolutionary context, different disciplines employing phylogenetic trees research. example, spatial ecologists may map geographical positions organisms phylogenetic trees understand biogeography species (Sch√∂n et al. 2015); disease epidemiologists may incorporate pathogen sampling time locations phylogenetic analysis infer disease transmission dynamics spatiotemporal space (et al. 2013); microbiologists may determine pathogenicity different pathogen strains map phylogenetic trees identify genetic determinants pathogenicity (Bosi et al. 2016); genomic scientists may use phylogenetic trees help taxonomically classify metagenomic sequence data (Gupta Sharma 2015). robust tool treeio import map different types data phylogenetic tree important facilitate phylogenetics-related research, .k.‚Äòphylodynamics‚Äô. tool also help integrate different metadata (time, geography, genotype, epidemiological information) analysis results (selective pressure, evolutionary rates) highest level provide comprehensive understanding study organisms. field influenza research, attemps studying phylodynamics influenza virus mapping different meta-data analysis results phylogenetic tree evolutionary time scale (Lam et al. 2015).","code":""},{"path":"chapter2.html","id":"chapter2","chapter":"2 Manipulating Tree with Data","heading":"2 Manipulating Tree with Data","text":"","code":""},{"path":"chapter2.html","id":"tidytree","chapter":"2 Manipulating Tree with Data","heading":"2.1 Manipulating tree data using tidy interface","text":"tree data parsed/merged\ntreeio (Wang et al. 2020) can converted tidy\ndata frame using tidytree\npackage. tidytree package\nprovides tidy interfaces manipulate tree associated data. instances,\nexternal data can linked phylogeny evolutionary data obtained \ndifferent sources can merged using tidyverse verbs. tree data \nmanipulated, can converted back treedata object exported \nsingle tree file, analyzed R visualized using ggtree (Yu et al. 2017).","code":""},{"path":"chapter2.html","id":"the-phylo-object","chapter":"2 Manipulating Tree with Data","heading":"2.1.1 The phylo object","text":"phylo class defined ape package (Paradis, Claude, Strimmer 2004) \nfundamental phylogenetic analysis R. R packages\nfield rely\nextensively phylo object. tidytree package provides as_tibble\nmethod convert phylo object tidy data frame, tbl_tree object.tbl_tree object can converted back phylo object using .phylo() method.Using tbl_tree object makes tree data manipulation effective \neasier (see also example FAQ). example, can link evolutionary trait phylogeny using dplyr verbs full_join:","code":"\nlibrary(ape)\nset.seed(2017)\ntree <- rtree(4)\ntree## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\nx <- as_tibble(tree)\nx## # A tibble: 7 x 4\n##   parent  node branch.length label\n##    <int> <int>         <dbl> <chr>\n## 1      5     1       0.435   t4   \n## 2      7     2       0.674   t1   \n## 3      7     3       0.00202 t3   \n## 4      6     4       0.0251  t2   \n## 5      5     5      NA       <NA> \n## 6      5     6       0.472   <NA> \n## 7      6     7       0.274   <NA>\nas.phylo(x)## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\nd <- tibble(label = paste0('t', 1:4),\n            trait = rnorm(4))\n\ny <- full_join(x, d, by = 'label')\ny## # A tibble: 7 x 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     5      NA       <NA>  NA    \n## 6      5     6       0.472   <NA>  NA    \n## 7      6     7       0.274   <NA>  NA"},{"path":"chapter2.html","id":"the-treedata-object","chapter":"2 Manipulating Tree with Data","heading":"2.1.2 The treedata object","text":"tidytree package defines treedata class store phylogenetic tree \nassociated data. mapping external data tree structure, \ntbl_tree object can converted treedata object.treedata class also used\ntreeio package (Wang et al. 2020) store evolutionary evidences inferred commonly used software (BEAST, EPA, HYPHY,\nMrBayes, PAML, PHYLDOG, pplacer, r8s, RAxML RevBayes, etc.) (see details Chapter 1).tidytree package also provides as_tibble() method convert treedata object tidy data frame. phylogenetic tree structure evolutionary\ninferences stored tbl_tree object, making consistent easier\nmanipulating evolutionary statistics inferred different software well\nlinking external data tree structure.","code":"\nas.treedata(y)## 'treedata' S4 object'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'trait'.\ny %>% as.treedata %>% as_tibble## # A tibble: 7 x 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     5      NA       <NA>  NA    \n## 6      5     6       0.472   <NA>  NA    \n## 7      6     7       0.274   <NA>  NA"},{"path":"chapter2.html","id":"accesor-tidytree","chapter":"2 Manipulating Tree with Data","heading":"2.1.3 Access related nodes","text":"dplyr verbs can applied tbl_tree directly manipulate tree data. addition, tidytree provides several verbs filter related nodes, including\nchild, parent, offspring, ancestor, sibling MRCA.verbs accept tbl_tree selected node can node number label.methods also implemented treeio working phylo treedata objects. can try accessing related nodes using tree object. instance, following command output child nodes selected internal node 5:Beware methods work tree objects output related node numbers, methods implemented tbl_tree object output tibble object contains related information.","code":"\nchild(y, 5)## # A tibble: 2 x 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1         0.435 t4     0.943\n## 2      5     6         0.472 <NA>  NA\nparent(y, 2)## # A tibble: 1 x 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      6     7         0.274 <NA>     NA\noffspring(y, 5)## # A tibble: 6 x 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     6       0.472   <NA>  NA    \n## 6      6     7       0.274   <NA>  NA\nancestor(y, 2)## # A tibble: 3 x 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      5     5        NA     <NA>     NA\n## 2      5     6         0.472 <NA>     NA\n## 3      6     7         0.274 <NA>     NA\nsibling(y, 2)## # A tibble: 1 x 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      7     3       0.00202 t3    0.570\nMRCA(y, 2, 3)## # A tibble: 1 x 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      6     7         0.274 <NA>     NA\nchild(tree, 5)## [1] 1 6"},{"path":"chapter2.html","id":"data-integration","chapter":"2 Manipulating Tree with Data","heading":"2.2 Data Integration","text":"","code":""},{"path":"chapter2.html","id":"merge-tree","chapter":"2 Manipulating Tree with Data","heading":"2.2.1 Combining tree data","text":"treeio package (Wang et al. 2020) serves \ninfrastructure enables various types phylogenetic data inferred \ncommon analysis programs imported used R. instance dN/dS\nancestral sequences estimated\nCODEML,\nclade support values (posterior) inferred\nBEAST/MrBayes.\naddition, treeio supports linking external data phylogeny. brings external\nphylogenetic data (either software output exteranl sources) R\ncommunity make available analysis R.\nFurthermore, treeio can combine\nmultiple phylogenetic trees together one node/branch-specific\nattribute data. Essentially, result, one attribute (e.g.,\nsubstitution rate) can mapped another attribute (e.g., dN/dS) \nnode/branch comparison computations (Yu et al. 2017).previously published data set, seventy-six H3 hemagglutinin gene sequences \nlineage containing swine human influenza viruses\n(Liang et al. 2014), demonstrate utilities comparing\nevolutionary statistics inferred different software. dataset \nre-analyzed BEAST timescale estimation\nCODEML synonymous \nnon-synonymous substitution estimation. example, first parsed \noutputs BEAST using read.beast() function \nCODEML using\nread.codeml() function two treedata objects. two objects containing separate sets node/branch-specific data merged via merge_tree() function.merging beast_tree codeml_tree objects, \nnode/branch-specific data imported BEAST\nCODEML output files \navailable merged_tree object. tree object converted \ntidy data frame using tidytree\npackage visualized hexbin scatterplot dN/dS, dN dS inferred\nCODEML versus rate\n(substitution rate unit substitutions/site/year) inferred\nBEAST branches.\nFigure 2.1: Correlation dN/dS, dN dS versus substitution rate. merging BEAST CodeML outputs, branch-specific estimates (substitution rate, dN/dS , dN dS) two analysis programs compared branch basis. associations dN/dS, dN dS vs.¬†rate visualized hexbin scatter plots.\noutput illustrated Fig. 2.1. can test association node/branch-specific data using Pearson correlation, case showed dN dS, dN/dS significantly (p-values) associated rate.Using merge_tree() function, able compare analysis results using identical\nmodel different software packages different models using different \nidentical software. also allows users integrate different analysis finding\ndifferent software packages. Merging tree data restricted \nsoftware findings, associating external data analysis findings also\ngranted. merge_tree() function chainable allows several tree objects\nmerged one.triple_tree object showed contains analysis results obtained BEAST\nCODEML, evolutionary\ntrait external sources. information can used annotate \ntree using ggtree (Yu et al. 2017).","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nrst_file <- system.file(\"examples/rst\", package=\"ggtree\")\nmlc_file <- system.file(\"examples/mlc\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\ncodeml_tree <- read.codeml(rst_file, mlc_file)\n\nmerged_tree <- merge_tree(beast_tree, codeml_tree)\nmerged_tree## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree',\n##  '/home/ygc/R/library/ggtree/examples/rst',\n##  '/home/ygc/R/library/ggtree/examples/mlc'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, A/New_York/452/1999, A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_median',\n##  'height_range', 'length',   'length_0.95_HPD',\n##  'length_median',    'length_range', 'posterior',    'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range',   'subs',\n##  'AA_subs',  't',    'N',    'S',    'dN_vs_dS', 'dN',   'dS',   'N_x_dN',\n##  'S_x_dS'.\nlibrary(dplyr)\ndf <- merged_tree %>% \n  as_tibble() %>%\n  select(dN_vs_dS, dN, dS, rate) %>%\n  subset(dN_vs_dS >=0 & dN_vs_dS <= 1.5) %>%\n  tidyr::gather(type, value, dN_vs_dS:dS)\ndf$type[df$type == 'dN_vs_dS'] <- 'dN/dS'\ndf$type <- factor(df$type, levels=c(\"dN/dS\", \"dN\", \"dS\"))\nggplot(df, aes(rate, value)) + geom_hex() + \n  facet_wrap(~type, scale='free_y') \nphylo <- as.phylo(beast_tree)\nN <- Nnode2(phylo)\nd <- tibble(node = 1:N, fake_trait = rnorm(N), another_trait = runif(N))\nfake_tree <- treedata(phylo = phylo, data = d)\ntriple_tree <- merge_tree(merged_tree, fake_tree)\ntriple_tree## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree',\n##  '/home/ygc/R/library/ggtree/examples/rst',\n##  '/home/ygc/R/library/ggtree/examples/mlc'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, A/New_York/452/1999, A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_median',\n##  'height_range', 'length',   'length_0.95_HPD',\n##  'length_median',    'length_range', 'posterior',    'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range',   'subs',\n##  'AA_subs',  't',    'N',    'S',    'dN_vs_dS', 'dN',   'dS',   'N_x_dN',\n##  'S_x_dS',   'fake_trait',   'another_trait'."},{"path":"chapter2.html","id":"link-external-data","chapter":"2 Manipulating Tree with Data","heading":"2.2.2 Linking external data to phylogeny","text":"addition analysis findings associated tree showed\n, wide range heterogeneous data, including phenotypic data,\nexperimental data clinical data etc., need integrated \nlinked phylogeny. example, study viral evolution, tree nodes may\nassociated epidemiological information, location, age subtype.\nFunctional annotations may need mapped gene trees comparative\ngenomics studies. facilitate data\nintegration, treeio provides\nfull_join method link external data phylogeny stored either phylo treedata object. Beware linking external data phylo object produce treedata object store input phylo associated data. full_join methods can also used tidy data frame level (.e. tbl_tree object described previously) ggtree level (described session 7.1) (Yu et al. 2018).following example calculated bootstrap values merging values tree (phylo object) matching node numbers.Another example demonstrates merging evolutionary trait tree (treedata object) matching tip labels.Manipulating tree object frustrated fragmented functions available\nworking phylo object, mention linking external data \nphylogeny structure. treeio package (Wang et al. 2020), easy combine tree data various sources.\naddition, tidytree package (session 2.1), manipulating tree easier using\ntidy data principles \nconsistent tools already wide use, including\ndplyr,\ntidyr,\nggplot2\nggtree (Yu et al. 2017).","code":"\nlibrary(ape)\ndata(woodmouse)\nd <- dist.dna(woodmouse)\ntr <- nj(d)\nbp <- boot.phylo(tr, woodmouse, function(x) nj(dist.dna(x)))## \nRunning bootstraps:       100 / 100\n## Calculating bootstrap values... done.\nbp2 <- tibble(node=1:Nnode(tr) + Ntip(tr), bootstrap = bp)\nfull_join(tr, bp2, by=\"node\")## 'treedata' S4 object'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   No305, No304, No306, No0906S, No0908S, No0909S, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##  'bootstrap'.\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nx <- tibble(label = as.phylo(beast)$tip.label, trait = rnorm(Ntip(beast)))\nfull_join(beast, x, by=\"label\")## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/BEAST/beast_mcc.tree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 15 tips and 14 internal nodes.\n## \n## Tip labels:\n##   A_1995, B_1996, C_1995, D_1987, E_1996, F_1997, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_median',\n##  'height_range', 'length',   'length_0.95_HPD',\n##  'length_median',    'length_range', 'posterior',    'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range',   'trait'."},{"path":"chapter2.html","id":"grouping-taxa","chapter":"2 Manipulating Tree with Data","heading":"2.2.3 Grouping taxa","text":"groupOTU() groupClade() methods designed adding taxa grouping\ninformation input tree object. methods implemented tidytree,\ntreeio ggtree respectively support adding grouping information \ntbl_tree, phylo treedata, ggtree levels. grouping information can \nused directly tree visualization (e.g. coloring tree based grouping)\nggtree (Figure 6.5).","code":""},{"path":"chapter2.html","id":"groupclade","chapter":"2 Manipulating Tree with Data","heading":"2.2.3.1 groupClade","text":"groupClade() method accepts internal node vector internal nodes\nadd grouping information selected clade/clades.","code":"\nnwk <- '(((((((A:4,B:4):6,C:5):8,D:6):3,E:21):10,((F:4,G:12):14,H:8):13):13,((I:5,J:2):30,(K:11,L:11):2):17):4,M:56);'\ntree <- read.tree(text=nwk)\n\ngroupClade(as_tibble(tree), c(17, 21))## # A tibble: 25 x 5\n##    parent  node branch.length label group\n##     <int> <int>         <dbl> <chr> <fct>\n##  1     20     1             4 A     1    \n##  2     20     2             4 B     1    \n##  3     19     3             5 C     1    \n##  4     18     4             6 D     1    \n##  5     17     5            21 E     1    \n##  6     22     6             4 F     2    \n##  7     22     7            12 G     2    \n##  8     21     8             8 H     2    \n##  9     24     9             5 I     0    \n## 10     24    10             2 J     0    \n## # ‚Ä¶ with 15 more rows"},{"path":"chapter2.html","id":"groupotu","chapter":"2 Manipulating Tree with Data","heading":"2.2.3.2 groupOTU","text":"groupClade() groupOTU() work tbl_tree, phylo treedata, ggtree objects. example using groupOTU() phylo tree object.Another example working ggtree object can found session 6.5.groupOTU trace back input nodes recent common ancestor.\nexample, nodes 1, 4, 5 6 \ngrouping together (4 (t2) -> 6 -> 5 1 (t4) -> 5).Related OTUs grouping together necessarily within clade.\ncan monophyletic (clade), polyphyletic paraphyletic.conflicts tracing back recent common ancestor, user can set overlap\nparameter ‚Äúorigin‚Äù (first one counts), ‚Äúoverwrite‚Äù (default, last one\ncounts) ‚Äúabandon‚Äù (un-selected grouping)7.","code":"\nset.seed(2017)\ntr <- rtree(4)\nx <- as_tibble(tr)\n## the input nodes can be node ID or label\ngroupOTU(x, c('t1', 't4'), group_name = \"fake_group\")## # A tibble: 7 x 5\n##   parent  node branch.length label fake_group\n##    <int> <int>         <dbl> <chr> <fct>     \n## 1      5     1       0.435   t4    1         \n## 2      7     2       0.674   t1    1         \n## 3      7     3       0.00202 t3    0         \n## 4      6     4       0.0251  t2    0         \n## 5      5     5      NA       <NA>  1         \n## 6      5     6       0.472   <NA>  1         \n## 7      6     7       0.274   <NA>  1\ngroupOTU(tr, c('t2', 't4'), group_name = \"fake_group\") %>%\n  as_tibble## # A tibble: 7 x 5\n##   parent  node branch.length label fake_group\n##    <int> <int>         <dbl> <chr> <fct>     \n## 1      5     1       0.435   t4    1         \n## 2      7     2       0.674   t1    0         \n## 3      7     3       0.00202 t3    0         \n## 4      6     4       0.0251  t2    1         \n## 5      5     5      NA       <NA>  1         \n## 6      5     6       0.472   <NA>  1         \n## 7      6     7       0.274   <NA>  0\ncls <- list(c1=c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n            c2=c(\"F\", \"G\", \"H\"),\n            c3=c(\"L\", \"K\", \"I\", \"J\"),\n            c4=\"M\")\n\nas_tibble(tree) %>% groupOTU(cls)## # A tibble: 25 x 5\n##    parent  node branch.length label group\n##     <int> <int>         <dbl> <chr> <fct>\n##  1     20     1             4 A     c1   \n##  2     20     2             4 B     c1   \n##  3     19     3             5 C     c1   \n##  4     18     4             6 D     c1   \n##  5     17     5            21 E     c1   \n##  6     22     6             4 F     c2   \n##  7     22     7            12 G     c2   \n##  8     21     8             8 H     c2   \n##  9     24     9             5 I     c3   \n## 10     24    10             2 J     c3   \n## # ‚Ä¶ with 15 more rows"},{"path":"chapter2.html","id":"reroot-treeio","chapter":"2 Manipulating Tree with Data","heading":"2.3 Rerooting tree","text":"finished.","code":""},{"path":"chapter2.html","id":"rescale-treeio","chapter":"2 Manipulating Tree with Data","heading":"2.4 Rescaling Tree Branches","text":"Phylogenetic data can merged joint analysis (Figure 2.1). can displayed tree structure complex annotation help visually inspection evolutionary patterns. numerical data stored treedata object can used re-scale tree branches. example, CodeML infers dN/dS, dN dS, statistics can used branch lengths. values can also used color tree (session 4.3.4) can project vertical dimension create two-dimensional tree phenogram (session 4.2.2 Figure 4.5 4.11). Instead modifying branch lengths tree object, user can directly specifying variable branch length ggtree() demonstrated session 4.3.6.\nFigure 2.2: Re-scaling tree branches. tree branches scaled time (year root) (). tree re-scaled using dN branch lengths (B). tree re-scaled using substitution rates (C).\n","code":"\np1 <- ggtree(merged_tree) + theme_tree2()\np2 <- ggtree(rescale_tree(merged_tree, 'dN')) + theme_tree2()\np3 <- ggtree(rescale_tree(merged_tree, 'rate')) + theme_tree2()\n\ncowplot::plot_grid(p1, p2, p3, ncol=3, labels = LETTERS[1:3])"},{"path":"chapter2.html","id":"subsetting-tree-with-data","chapter":"2 Manipulating Tree with Data","heading":"2.5 Subsetting Tree with Data","text":"","code":""},{"path":"chapter2.html","id":"remove-tip","chapter":"2 Manipulating Tree with Data","heading":"2.5.1 Removing tips in a phylogenetic tree","text":"Sometimes want remove selected tips phylogenetic tree. due several reasons, including low sequence quality, errors sequence assembly, alignment error part sequence error phylogenetic inference etc.Let‚Äôs say want remove three tips (colored red) tree (Figure 2.3A), drop.tip() method removes specified tips update tree (Figure 2.3B). associated data maintained updated tree.\nFigure 2.3: Removing tips tree. Original tree three tips (colored red) remove (). Updated tree removed selected tips (B).\n","code":"\nf <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(f)\nto_drop <- c(\"Physonect_sp_@2066767\",\n            \"Lychnagalma_utricularia@2253871\",\n            \"Kephyes_ovata@2606431\")\np1 <- ggtree(nhx) + geom_tiplab(aes(color = label %in% to_drop)) +\n  scale_color_manual(values=c(\"black\", \"red\")) + xlim(0, 0.8)\n\nnhx_reduced <- drop.tip(nhx, to_drop)\np2 <- ggtree(nhx_reduced) + geom_tiplab() + xlim(0, 0.8)  \nplot_grid(p1, p2, ncol=2, labels = c(\"A\", \"B\"))"},{"path":"chapter2.html","id":"subset-tip","chapter":"2 Manipulating Tree with Data","heading":"2.5.2 Subsetting tree by tip label","text":"Tree can large difficult look portions interest. tree_subset() function created treeio package (Wang et al. 2020) extract subset tree portion still maintaining structure tree portion. beast_tree Figure 2.4A slightly crowded. Obviously, can make figure taller allow space labels (similar use ‚ÄúExpansion‚Äù slider FigTree) can make text smaller. However, solutions always applicable lot tips (e.g. hundreds thousands tips). particular, interested portion tree around particular tip, certainly don‚Äôt want explore large tree find centain species interested .Let‚Äôs say interested tip /Swine/HK/168/2012 tree (Figure 2.4A) want look immediate relatives tip.tree_subset() function allows look portions tree interest. default, tree_subset() function internally call groupOTU() assign group specified tip rest tips (Figure 2.4B). Additionally, branch lengths related associated data maintained subsetting (Figure 2.4C). root tree always anchored zero subset tree default distances relative root. want distances relative original root, can specify root position (root.position parameter) root edge subset tree, sum branch lengths original root root subset tree (Figure 2.4D E).\nFigure 2.4: Subsetting tree specific tip. original tree (). subset tree (B). Subset tree data (C). Visualize subset tree relative original position, without root edge (D) root edge (E).\n","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n\np1 = ggtree(beast_tree) + \n  geom_tiplab() +  xlim(0, 40) + theme_tree2()\n\ntree2 = tree_subset(beast_tree, \"A/Swine/HK/168/2012\", levels_back=4)  \np2 <- ggtree(tree2, aes(color=group)) +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  geom_tiplab() +  xlim(0, 4) + theme_tree2() \n\np3 <- ggtree(tree2, aes(color=group)) +\n  geom_tiplab(hjust = -.1) + xlim(0, 5) + \n  geom_point(aes(fill = rate), shape = 21, size = 4) +\n  scale_color_manual(values = c(\"black\", \"red\"), guide = FALSE) +\n  scale_fill_continuous(low = 'blue', high = 'red') +\n  theme_tree2() + theme(legend.position = 'right')\n\n\np4 <- ggtree(tree2, aes(color=group), \n          root.position = as.phylo(tree2)$root.edge) +\n  geom_tiplab() + xlim(18, 24) + \n  scale_color_manual(values = c(\"black\", \"red\")) +\n  theme_tree2()\n\np5 <- ggtree(tree2, aes(color=group), \n          root.position = as.phylo(tree2)$root.edge) +\n  geom_rootedge() + geom_tiplab() + xlim(0, 40) + \n  scale_color_manual(values = c(\"black\", \"red\")) +\n  theme_tree2()\n\nplot_grid(p2, p3, p4, p5, ncol=2, labels=LETTERS[2:5]) %>%\n  plot_grid(p1, ., ncol=2, labels=c(\"A\", \"\"), rel_widths=c(.5, 1))"},{"path":"chapter2.html","id":"subset-node","chapter":"2 Manipulating Tree with Data","heading":"2.5.3 Subsetting tree by internal node number","text":"interesting certain clade, can specify input node internal node number. tree_subset() function take clade whole also trace back particular levels look immediate relatives clade (Figure 2.5A B). can use tree_subset() function zoom selected portions plot whole tree portion , similar ape::zoom() function explore large tree (Figure 2.5C D). Users can also use viewClade() function restrict tree visualization specific clade demonstrated session 6.1.\nFigure 2.5: Subsetting tree specific clade. Extracting clade (). Extracting clade trace back look immediate relatives (B). Viewing large tree (C) selected portion (D).\n","code":"\nclade <- tree_subset(beast_tree, node=121, levels_back=0)\nclade2 <- tree_subset(beast_tree, node=121, levels_back=2)\np1 <- ggtree(clade) + geom_tiplab() + xlim(0, 5)\np2 <- ggtree(clade2, aes(color=group)) + geom_tiplab() + \n  xlim(0, 8) + scale_color_manual(values=c(\"black\", \"red\"))\n\n\nlibrary(ape)\nlibrary(tidytree)\nlibrary(treeio)\n\ndata(chiroptera)\n\nnodes <- grep(\"Plecotus\", chiroptera$tip.label)\nchiroptera <- groupOTU(chiroptera, nodes)\n\nclade <- MRCA(chiroptera, nodes)\nx <- tree_subset(chiroptera, clade, levels_back = 0)\n\np3 <- ggtree(chiroptera, aes(colour = group)) + \n  scale_color_manual(values=c(\"black\", \"red\")) +\n  theme(legend.position = \"none\")\np4 <- ggtree(x) + geom_tiplab() + xlim(0, 5)\nplot_grid(p1, p2, p3, p4, \n  ncol=2, labels=LETTERS[1:4])"},{"path":"chapter2.html","id":"ggtree-fortify","chapter":"2 Manipulating Tree with Data","heading":"2.6 Manipulating tree data for visualization","text":"Tree visualization supported ggtree (Yu et al. 2017). Although ggtree implemented several methods visual exploration tree data, may want something supported directly. case, need manipulate tree data node coordination positions used visualization. quite easy ggtree. User can use fortify() method internally call tidytree::as_tibble() convert tree tidy data frame add columns coordination positions (.e. x, y, branch angle) used plot tree. can also access data via ggtree(tree)$data.example plot two trees face face similar ape::cophyloplot().\nFigure 2.6: Plot two phylogenetic trees face face. Plotting tree using ggtree() (left hand side) subsequently add another layer tree geom_tree() (right hand side). relative positions plotted trees can manual adjusted adding layers tree (e.g. tip labels highlighting clades) independent.\nquite easy plot multiple trees connect taxa one figure. instance, plotting trees contructed internal gene segments influenza virus connecting equivalent strans across trees (Venkatesh et al. 2018).\nFigure 2.7: Plot multiple phylogenetic trees side side. Plotting tree using ggtree() subsequently add multiple layers trees geom_tree().\n","code":"\nlibrary(dplyr)\nlibrary(ggtree)\n\nset.seed(1024)\nx <- rtree(30)\ny <- rtree(30)\np1 <- ggtree(x, layout='roundrect') + \n  geom_hilight(\n         mapping=aes(subset = node %in% c(38, 48, 58, 36),\n                     node = node,\n                     fill = as.factor(node)\n                     )\n     ) +\n    labs(fill = \"clades for tree in left\" )\n\np2 <- ggtree(y)\n\nd1 <- p1$data\nd2 <- p2$data\n\n## reverse x-axis and \n## set offset to make the tree in the right hand side of the first tree\nd2$x <- max(d2$x) - d2$x + max(d1$x) + 1\n\npp <- p1 + geom_tree(data=d2, layout='ellipse') +      \n  ggnewscale::new_scale_fill() +\n  geom_hilight(\n         data = d2, \n         mapping = aes( \n            subset = node %in% c(38, 48, 58),\n            node=node,\n            fill=as.factor(node))\n  ) +\n  labs(fill = \"clades for tree in right\" ) \n\ndd <- bind_rows(d1, d2) %>% \n  filter(!is.na(label))\n\npp + geom_line(aes(x, y, group=label), data=dd, color='grey') +\n    geom_tiplab(geom = 'shadowtext', bg.colour = alpha('firebrick', .5)) +\n    geom_tiplab(data = d2, hjust=1, geom = 'shadowtext', bg.colour = alpha('firebrick', .5))\nz <- rtree(30)\nd2 <- fortify(y)\nd3 <- fortify(z)\nd2$x <- d2$x + max(d1$x) + 1\nd3$x <- d3$x + max(d2$x) + 1\n\ndd = bind_rows(d1, d2, d3) %>% \n  filter(!is.na(label))\n\np1 + geom_tree(data = d2) + geom_tree(data = d3) + geom_tiplab(data=d3) + \n  geom_line(aes(x, y, group=label, color=node < 15), data=dd, alpha=.3)"},{"path":"chapter2.html","id":"summary2","chapter":"2 Manipulating Tree with Data","heading":"2.7 Summary","text":"treeio package allows us import diverse phylogeny associated data R. However, phylogenetic tree stored way facilitate computational processing human fridenly need expertise manipulate explore tree data. tidytree package provides tidy interface exploring tree data, ggtree provides set utilitise visualize explore tree data using grammar graphics. full suit packages make easy ordinary users interact tree data, allow us integrate phylogeny associated data different sources (e.g. experimental result analysis finding), creates possibility comparative study.","code":""},{"path":"chapter3.html","id":"chapter3","chapter":"3 Exporting tree with data","heading":"3 Exporting tree with data","text":"","code":""},{"path":"chapter3.html","id":"introduction-1","chapter":"3 Exporting tree with data","heading":"3.1 Introduction","text":"treeio package (Wang et al. 2020) supports parsing various phylogenetic tree file formats including software outputs contain evolutionary evidences. formats just log file\n(e.g. PAML\nr8s outputs), others \nnon-standard formats (e.g. BEAST\nMrBayes outputs introduce square\nbracket, reserved store comment standard Nexus format, store\ninferences). treeio, \nnow able parse files extract phylogenetic tree map associated\ndata tree structure. Exporting tree structure easy, users can use\n.phyo() method defined treeio \nconvert treedata object phylo object using write.tree() \nwrite.nexus() implemented\nape package\n(Paradis, Claude, Strimmer 2004) export tree structure Newick text Nexus file.\nquite useful converting non-standard formats standard format \nextracting tree software outputs, log file.However, exporting tree associated data still challenging. \nassociated data can parsed analysis programs obtained external\nsources (e.g. phenotypic data, experimental data clinical data). major\nobstacle standard format designed storing\ntree data. NeXML (Vos et al. 2012) maybe \nflexible format, however currently widely supported. \nanalysis programs field rely extensively Newick string Nexus\nformat. opinion, although BEAST Nexus\nformat may best solution,\ncurrently good approach storing heterogeneous associated data. \nbeauty format annotate elements stored within square\nbracket, reserved comments. file can parsed \nstandard Nexus ignoring annotated elements existing programs \nable read .","code":""},{"path":"chapter3.html","id":"exporting-tree-data-to-beast-nexus-format","chapter":"3 Exporting tree with data","heading":"3.2 Exporting Tree Data to BEAST Nexus Format","text":"","code":""},{"path":"chapter3.html","id":"exportingconverting-software-output","chapter":"3 Exporting tree with data","heading":"3.2.1 Exporting/converting software output","text":"treeio package (Wang et al. 2020) provides write.beast() function export treedata object BEAST Nexus file (Bouckaert et al. 2014).\ntreeio, easy convert\nsoftware output BEAST format output can parsed\ntreeio (see Chapter 1). example, can\nconvert NHX file BEAST file use NHX tags color tree using\nFigTree (Figure 3.1A) convert CODEML output use\ndN/dS, dN dS color tree FigTree (Figure 3.1B).example converting NHX file BEAST format:Another example converting CodeML output BEAST format:\nFigure 3.1: Visualizing BEAST file FigTree. Directly visualizing NHX file () CodeML output (B) FigTree supported. treeio can convert files BEAST compatible NEXUS format can directly opened FigTree visualized annotated data.\n","code":"\nnhxfile <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(nhxfile)\n# write.beast(nhx, file = \"phyldog.tree\")\nwrite.beast(nhx)#NEXUS\n[R-package treeio, Tue Nov  3 10:38:58 2020]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 16;\n    TAXLABELS\n        Prayidae_D27SS7@2825365\n        Kephyes_ovata@2606431\n        Chuniphyes_multidentata@1277217\n        Apolemia_sp_@1353964\n        Bargmannia_amoena@263997\n        Bargmannia_elongata@946788\n        Physonect_sp_@2066767\n        Stephalia_dilata@2960089\n        Frillagalma_vityazi@1155031\n        Resomia_ornicephala@3111757\n        Lychnagalma_utricularia@2253871\n        Nanomia_bijuga@717864\n        Cordagalma_sp_@1525873\n        Rhizophysa_filiformis@3073669\n        Hydra_magnipapillata@52244\n        Ectopleura_larynx@3556167\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   Prayidae_D27SS7@2825365,\n        2   Kephyes_ovata@2606431,\n        3   Chuniphyes_multidentata@1277217,\n        4   Apolemia_sp_@1353964,\n        5   Bargmannia_amoena@263997,\n        6   Bargmannia_elongata@946788,\n        7   Physonect_sp_@2066767,\n        8   Stephalia_dilata@2960089,\n        9   Frillagalma_vityazi@1155031,\n        10  Resomia_ornicephala@3111757,\n        11  Lychnagalma_utricularia@2253871,\n        12  Nanomia_bijuga@717864,\n        13  Cordagalma_sp_@1525873,\n        14  Rhizophysa_filiformis@3073669,\n        15  Hydra_magnipapillata@52244,\n        16  Ectopleura_larynx@3556167\n    ;\n    TREE * UNTITLED = [&R] (((1[&Ev=S,S=58,ND=0]:0.0682841,(2[&Ev=S,S=69,ND=1]:0.0193941,3[&Ev=S,S=70,ND=2]:0.0121378)[&Ev=S,S=60,ND=3]:0.0217782)[&Ev=S,S=36,ND=4]:0.0607598,((4[&Ev=S,S=31,ND=9]:0.11832,(((5[&Ev=S,S=37,ND=10]:0.0144549,6[&Ev=S,S=38,ND=11]:0.0149723)[&Ev=S,S=33,ND=12]:0.0925388,7[&Ev=S,S=61,ND=13]:0.077429)[&Ev=S,S=24,ND=14]:0.0274637,(8[&Ev=S,S=52,ND=15]:0.0761163,((9[&Ev=S,S=53,ND=16]:0.0906068,10[&Ev=S,S=54,ND=17]:1e-06)[&Ev=S,S=45,ND=18]:1e-06,((11[&Ev=S,S=65,ND=19]:0.120851,12[&Ev=S,S=71,ND=20]:0.133939)[&Ev=S,S=56,ND=21]:1e-06,13[&Ev=S,S=64,ND=22]:0.0693814)[&Ev=S,S=46,ND=23]:1e-06)[&Ev=S,S=40,ND=24]:0.0333823)[&Ev=S,S=35,ND=25]:1e-06)[&Ev=D,S=24,ND=26]:0.0431861)[&Ev=S,S=19,ND=27]:1e-06,14[&Ev=S,S=26,ND=28]:0.22283)[&Ev=S,S=17,ND=29]:0.0292362)[&Ev=D,S=17,ND=8]:0.185603,(15[&Ev=S,S=16,ND=5]:0.0621782,16[&Ev=S,S=15,ND=6]:0.332505)[&Ev=S,S=12,ND=7]:0.185603)[&Ev=S,S=9,ND=30];\nEND;\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nml <- read.codeml_mlc(mlcfile)\n# write.beast(ml, file = \"codeml.tree\")\nwrite.beast(ml)#NEXUS\n[R-package treeio, Tue Nov  3 10:38:58 2020]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 15;\n    TAXLABELS\n        A\n        B\n        C\n        D\n        E\n        F\n        G\n        H\n        I\n        J\n        K\n        L\n        M\n        N\n        O\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   A,\n        2   B,\n        3   C,\n        4   D,\n        5   E,\n        6   F,\n        7   G,\n        8   H,\n        9   I,\n        10  J,\n        11  K,\n        12  L,\n        13  M,\n        14  N,\n        15  O\n    ;\n    TREE * UNTITLED = [&U] (11[&t=0.082,N=1514.9,S=633.1,dN_vs_dS=0.0224,dN=0.002,dS=0.0878,N_x_dN=3,S_x_dS=55.6]:0.081785,14[&t=0.062,N=1514.9,S=633.1,dN_vs_dS=0.0095,dN=7e-04,dS=0.0689,N_x_dN=1,S_x_dS=43.6]:0.062341,(4[&t=0.082,N=1514.9,S=633.1,dN_vs_dS=0.0385,dN=0.0033,dS=0.0849,N_x_dN=5,S_x_dS=53.8]:0.082021,(12[&t=0.006,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=0.0062,N_x_dN=0,S_x_dS=3.9]:0.005508,(10[&t=0.014,N=1514.9,S=633.1,dN_vs_dS=0.0457,dN=7e-04,dS=0.0143,N_x_dN=1,S_x_dS=9]:0.013996,(7[&t=0.046,N=1514.9,S=633.1,dN_vs_dS=0.1621,dN=0.006,dS=0.0373,N_x_dN=9.2,S_x_dS=23.6]:0.045746,((3[&t=0.028,N=1514.9,S=633.1,dN_vs_dS=0.0461,dN=0.0013,dS=0.0282,N_x_dN=2,S_x_dS=17.9]:0.02773,(5[&t=0.031,N=1514.9,S=633.1,dN_vs_dS=0.0641,dN=0.002,dS=0.0305,N_x_dN=3,S_x_dS=19.3]:0.031104,15[&t=0.048,N=1514.9,S=633.1,dN_vs_dS=0.0538,dN=0.0026,dS=0.0485,N_x_dN=4,S_x_dS=30.7]:0.048389)23[&t=0.008,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=0.0094,N_x_dN=0,S_x_dS=6]:0.008328)22[&t=0.016,N=1514.9,S=633.1,dN_vs_dS=0.0395,dN=7e-04,dS=0.0165,N_x_dN=1,S_x_dS=10.4]:0.015959,(8[&t=0.021,N=1514.9,S=633.1,dN_vs_dS=0.1028,dN=0.002,dS=0.0191,N_x_dN=3,S_x_dS=12.1]:0.021007,(9[&t=0.015,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=0.0167,N_x_dN=0,S_x_dS=10.6]:0.014739,(2[&t=0.032,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=0.0358,N_x_dN=0,S_x_dS=22.7]:0.031643,(1[&t=0.01,N=1514.9,S=633.1,dN_vs_dS=0.0646,dN=7e-04,dS=0.0101,N_x_dN=1,S_x_dS=6.4]:0.01034,(6[&t=0.007,N=1514.9,S=633.1,dN_vs_dS=0.298,dN=0.0013,dS=0.0044,N_x_dN=2,S_x_dS=2.8]:0.006649,13[&t=0.009,N=1514.9,S=633.1,dN_vs_dS=0.0738,dN=7e-04,dS=0.0088,N_x_dN=1,S_x_dS=5.6]:0.009195)28[&t=0.028,N=1514.9,S=633.1,dN_vs_dS=0.0453,dN=0.0013,dS=0.0289,N_x_dN=2,S_x_dS=18.3]:0.028303)27[&t=0.008,N=1514.9,S=633.1,dN_vs_dS=0.0863,dN=7e-04,dS=0.0076,N_x_dN=1,S_x_dS=4.8]:0.008072)26[&t=0.003,N=1514.9,S=633.1,dN_vs_dS=1.5591,dN=0.0013,dS=8e-04,N_x_dN=2,S_x_dS=0.5]:0.0035)25[&t=0.02,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=0.023,N_x_dN=0,S_x_dS=14.6]:0.020359)24[&t=0.001,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=6e-04,N_x_dN=0,S_x_dS=0.4]:0.000555)21[&t=0.024,N=1514.9,S=633.1,dN_vs_dS=0.0549,dN=0.0013,dS=0.0237,N_x_dN=2,S_x_dS=15]:0.023675)20[&t=0.046,N=1514.9,S=633.1,dN_vs_dS=0.0419,dN=0.002,dS=0.047,N_x_dN=3,S_x_dS=29.8]:0.045745)19[&t=0.015,N=1514.9,S=633.1,dN_vs_dS=1e-04,dN=0,dS=0.0166,N_x_dN=0,S_x_dS=10.5]:0.014684)18[&t=0.059,N=1514.9,S=633.1,dN_vs_dS=0.0964,dN=0.0053,dS=0.0545,N_x_dN=8,S_x_dS=34.5]:0.059308)17[&t=0.232,N=1514.9,S=633.1,dN_vs_dS=0.0129,dN=0.0033,dS=0.2541,N_x_dN=5,S_x_dS=160.9]:0.231628)16;\nEND;"},{"path":"chapter3.html","id":"combining-tree-with-external-data","chapter":"3 Exporting tree with data","heading":"3.2.2 Combining tree with external data","text":"Using utilities provided\ntidytree treeio, easy link\nexternal data onto corresponding phylogeny. write.beast() function enables users export tree external data single tree file.merging, fake_trait another_trait stored fake_data linked tree, phylo, store treedata object, fake_tree. write.beast() function export tree associated data single BEAST format file. associated data can used visualized tree using ggtree (Figure 5.7) FigTree (Figure 3.1).","code":"\nphylo <- as.phylo(nhx)\n## print the newick text\nwrite.tree(phylo)[1] \"(((Prayidae_D27SS7@2825365:0.0682841,(Kephyes_ovata@2606431:0.0193941,Chuniphyes_multidentata@1277217:0.0121378):0.0217782):0.0607598,((Apolemia_sp_@1353964:0.11832,(((Bargmannia_amoena@263997:0.0144549,Bargmannia_elongata@946788:0.0149723):0.0925388,Physonect_sp_@2066767:0.077429):0.0274637,(Stephalia_dilata@2960089:0.0761163,((Frillagalma_vityazi@1155031:0.0906068,Resomia_ornicephala@3111757:1e-06):1e-06,((Lychnagalma_utricularia@2253871:0.120851,Nanomia_bijuga@717864:0.133939):1e-06,Cordagalma_sp_@1525873:0.0693814):1e-06):0.0333823):1e-06):0.0431861):1e-06,Rhizophysa_filiformis@3073669:0.22283):0.0292362):0.185603,(Hydra_magnipapillata@52244:0.0621782,Ectopleura_larynx@3556167:0.332505):0.185603);\"\nN <- Nnode2(phylo)\nfake_data <- tibble(node = 1:N, fake_trait = rnorm(N), another_trait = runif(N))\nfake_tree <- full_join(phylo, fake_data, by = \"node\")\nwrite.beast(fake_tree)#NEXUS\n[R-package treeio, Tue Nov  3 10:39:01 2020]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 16;\n    TAXLABELS\n        Prayidae_D27SS7@2825365\n        Kephyes_ovata@2606431\n        Chuniphyes_multidentata@1277217\n        Apolemia_sp_@1353964\n        Bargmannia_amoena@263997\n        Bargmannia_elongata@946788\n        Physonect_sp_@2066767\n        Stephalia_dilata@2960089\n        Frillagalma_vityazi@1155031\n        Resomia_ornicephala@3111757\n        Lychnagalma_utricularia@2253871\n        Nanomia_bijuga@717864\n        Cordagalma_sp_@1525873\n        Rhizophysa_filiformis@3073669\n        Hydra_magnipapillata@52244\n        Ectopleura_larynx@3556167\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   Prayidae_D27SS7@2825365,\n        2   Kephyes_ovata@2606431,\n        3   Chuniphyes_multidentata@1277217,\n        4   Apolemia_sp_@1353964,\n        5   Bargmannia_amoena@263997,\n        6   Bargmannia_elongata@946788,\n        7   Physonect_sp_@2066767,\n        8   Stephalia_dilata@2960089,\n        9   Frillagalma_vityazi@1155031,\n        10  Resomia_ornicephala@3111757,\n        11  Lychnagalma_utricularia@2253871,\n        12  Nanomia_bijuga@717864,\n        13  Cordagalma_sp_@1525873,\n        14  Rhizophysa_filiformis@3073669,\n        15  Hydra_magnipapillata@52244,\n        16  Ectopleura_larynx@3556167\n    ;\n    TREE * UNTITLED = [&R] (((1[&fake_trait=0.810266619540347,another_trait=0.0979642828460783]:0.0682841,(2[&fake_trait=1.04780592797913,another_trait=0.255336594535038]:0.0193941,3[&fake_trait=-0.525315388149907,another_trait=0.0768492061179131]:0.0121378)[&fake_trait=1.14511328541082,another_trait=0.341676945565268]:0.0217782)[&fake_trait=1.47263175562671,another_trait=0.597173389280215]:0.0607598,(14[&fake_trait=-0.180105407408332,another_trait=0.405489857308567]:0.22283,(4[&fake_trait=1.25678468744393,another_trait=0.286884719505906]:0.11832,((7[&fake_trait=0.730359059846483,another_trait=0.497727471170947]:0.077429,(5[&fake_trait=1.25879013291401,another_trait=0.878254126058891]:0.0144549,6[&fake_trait=0.239815595891983,another_trait=0.379190814914182]:0.0149723)[&fake_trait=2.56125226634243,another_trait=0.432879082160071]:0.0925388)[&fake_trait=0.873442969677915,another_trait=0.13348799967207]:0.0274637,(8[&fake_trait=1.33865819182797,another_trait=0.787276627961546]:0.0761163,((9[&fake_trait=-0.791364091701768,another_trait=0.437938967952505]:0.0906068,10[&fake_trait=0.154576264658977,another_trait=0.10230500344187]:1e-06)[&fake_trait=-0.18939020426446,another_trait=0.154172978363931]:1e-06,(13[&fake_trait=0.953691105265616,another_trait=0.113366388017312]:0.0693814,(11[&fake_trait=0.52571254882219,another_trait=0.911556096747518]:0.120851,12[&fake_trait=-0.923096859920575,another_trait=0.944086311617866]:0.133939)[&fake_trait=-0.592732979571578,another_trait=0.509087640792131]:1e-06)[&fake_trait=-0.30156227532438,another_trait=0.591121553909034]:1e-06)[&fake_trait=-0.213737440972264,another_trait=0.828644473804161]:0.0333823)[&fake_trait=0.610056903753043,another_trait=0.710706093581393]:1e-06)[&fake_trait=-0.902209722316081,another_trait=0.944954794365913]:0.0431861)[&fake_trait=0.0949525197413311,another_trait=0.108365619787946]:1e-06)[&fake_trait=-1.90680389611356,another_trait=0.117206424707547]:0.0292362)[&fake_trait=-0.0330343850713759,another_trait=0.0023308175150305]:0.185603,(15[&fake_trait=1.25577887603495,another_trait=0.427273260196671]:0.0621782,16[&fake_trait=0.738593081465311,another_trait=0.620253301691264]:0.332505)[&fake_trait=0.7259159692824,another_trait=0.90451981080696]:0.185603)[&fake_trait=-0.270961007065714,another_trait=0.966370139736682];\nEND;"},{"path":"chapter3.html","id":"merging-tree-data-from-different-sources","chapter":"3 Exporting tree with data","heading":"3.2.3 Merging tree data from different sources","text":"Newick tree text can combined associated data, also tree\ndata obtained software output can combined external data, well\ndifferent tree objects can merged together (details, see Chapter 2).merging data different sources, tree associated data can\nexported single file.output BEAST Nexus file can imported R using read.beast\nfunction associated data can used annotate tree\nusing ggtree (Yu et al. 2017).","code":"\n## combine tree object with data\ntree_with_data <- full_join(nhx, fake_data, by = \"node\")\ntree_with_data## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/NHX/phyldog.nhx'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431, Chuniphyes_multidentata@1277217, Apolemia_sp_@1353964, Bargmannia_amoena@263997, Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'Ev',   'S',    'ND',   'fake_trait',   'another_trait'.\n## merge two tree object\ntree2 <- merge_tree(nhx, fake_tree)\ntree2## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/treeio/extdata/NHX/phyldog.nhx'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431, Chuniphyes_multidentata@1277217, Apolemia_sp_@1353964, Bargmannia_amoena@263997, Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'Ev',   'S',    'ND',   'fake_trait',   'another_trait'.\nidentical(tree_with_data, tree2)## [1] TRUE\nwrite.beast(tree2)#NEXUS\n[R-package treeio, Tue Nov  3 10:39:01 2020]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 16;\n    TAXLABELS\n        Prayidae_D27SS7@2825365\n        Kephyes_ovata@2606431\n        Chuniphyes_multidentata@1277217\n        Apolemia_sp_@1353964\n        Bargmannia_amoena@263997\n        Bargmannia_elongata@946788\n        Physonect_sp_@2066767\n        Stephalia_dilata@2960089\n        Frillagalma_vityazi@1155031\n        Resomia_ornicephala@3111757\n        Lychnagalma_utricularia@2253871\n        Nanomia_bijuga@717864\n        Cordagalma_sp_@1525873\n        Rhizophysa_filiformis@3073669\n        Hydra_magnipapillata@52244\n        Ectopleura_larynx@3556167\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   Prayidae_D27SS7@2825365,\n        2   Kephyes_ovata@2606431,\n        3   Chuniphyes_multidentata@1277217,\n        4   Apolemia_sp_@1353964,\n        5   Bargmannia_amoena@263997,\n        6   Bargmannia_elongata@946788,\n        7   Physonect_sp_@2066767,\n        8   Stephalia_dilata@2960089,\n        9   Frillagalma_vityazi@1155031,\n        10  Resomia_ornicephala@3111757,\n        11  Lychnagalma_utricularia@2253871,\n        12  Nanomia_bijuga@717864,\n        13  Cordagalma_sp_@1525873,\n        14  Rhizophysa_filiformis@3073669,\n        15  Hydra_magnipapillata@52244,\n        16  Ectopleura_larynx@3556167\n    ;\n    TREE * UNTITLED = [&R] (((1[&Ev=S,S=58,ND=0,fake_trait=0.810266619540347,another_trait=0.0979642828460783]:0.0682841,(2[&Ev=S,S=69,ND=1,fake_trait=1.04780592797913,another_trait=0.255336594535038]:0.0193941,3[&Ev=S,S=70,ND=2,fake_trait=-0.525315388149907,another_trait=0.0768492061179131]:0.0121378)[&Ev=S,S=60,ND=3,fake_trait=1.14511328541082,another_trait=0.341676945565268]:0.0217782)[&Ev=S,S=36,ND=4,fake_trait=1.47263175562671,another_trait=0.597173389280215]:0.0607598,((4[&Ev=S,S=31,ND=9,fake_trait=1.25678468744393,another_trait=0.286884719505906]:0.11832,(((5[&Ev=S,S=37,ND=10,fake_trait=1.25879013291401,another_trait=0.878254126058891]:0.0144549,6[&Ev=S,S=38,ND=11,fake_trait=0.239815595891983,another_trait=0.379190814914182]:0.0149723)[&Ev=S,S=33,ND=12,fake_trait=2.56125226634243,another_trait=0.432879082160071]:0.0925388,7[&Ev=S,S=61,ND=13,fake_trait=0.730359059846483,another_trait=0.497727471170947]:0.077429)[&Ev=S,S=24,ND=14,fake_trait=0.873442969677915,another_trait=0.13348799967207]:0.0274637,(8[&Ev=S,S=52,ND=15,fake_trait=1.33865819182797,another_trait=0.787276627961546]:0.0761163,((9[&Ev=S,S=53,ND=16,fake_trait=-0.791364091701768,another_trait=0.437938967952505]:0.0906068,10[&Ev=S,S=54,ND=17,fake_trait=0.154576264658977,another_trait=0.10230500344187]:1e-06)[&Ev=S,S=45,ND=18,fake_trait=-0.18939020426446,another_trait=0.154172978363931]:1e-06,((11[&Ev=S,S=65,ND=19,fake_trait=0.52571254882219,another_trait=0.911556096747518]:0.120851,12[&Ev=S,S=71,ND=20,fake_trait=-0.923096859920575,another_trait=0.944086311617866]:0.133939)[&Ev=S,S=56,ND=21,fake_trait=-0.592732979571578,another_trait=0.509087640792131]:1e-06,13[&Ev=S,S=64,ND=22,fake_trait=0.953691105265616,another_trait=0.113366388017312]:0.0693814)[&Ev=S,S=46,ND=23,fake_trait=-0.30156227532438,another_trait=0.591121553909034]:1e-06)[&Ev=S,S=40,ND=24,fake_trait=-0.213737440972264,another_trait=0.828644473804161]:0.0333823)[&Ev=S,S=35,ND=25,fake_trait=0.610056903753043,another_trait=0.710706093581393]:1e-06)[&Ev=D,S=24,ND=26,fake_trait=-0.902209722316081,another_trait=0.944954794365913]:0.0431861)[&Ev=S,S=19,ND=27,fake_trait=0.0949525197413311,another_trait=0.108365619787946]:1e-06,14[&Ev=S,S=26,ND=28,fake_trait=-0.180105407408332,another_trait=0.405489857308567]:0.22283)[&Ev=S,S=17,ND=29,fake_trait=-1.90680389611356,another_trait=0.117206424707547]:0.0292362)[&Ev=D,S=17,ND=8,fake_trait=-0.0330343850713759,another_trait=0.0023308175150305]:0.185603,(15[&Ev=S,S=16,ND=5,fake_trait=1.25577887603495,another_trait=0.427273260196671]:0.0621782,16[&Ev=S,S=15,ND=6,fake_trait=0.738593081465311,another_trait=0.620253301691264]:0.332505)[&Ev=S,S=12,ND=7,fake_trait=0.7259159692824,another_trait=0.90451981080696]:0.185603)[&Ev=S,S=9,ND=30,fake_trait=-0.270961007065714,another_trait=0.966370139736682];\nEND;\noutfile <- tempfile(fileext = \".tree\")\nwrite.beast(tree2, file = outfile)\nread.beast(outfile)## 'treedata' S4 object that stored information of\n##  '/tmp/RtmpAA5R0i/file538b27692f669.tree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431, Chuniphyes_multidentata@1277217, Apolemia_sp_@1353964, Bargmannia_amoena@263997, Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'another_trait',    'Ev',   'fake_trait',   'ND',   'S'."},{"path":"chapter3.html","id":"write-jtree","chapter":"3 Exporting tree with data","heading":"3.3 Exporting Tree Data to jtree Format","text":"treeio package (Wang et al. 2020) provides \nwrite.beast() function export treedata BEAST Nexus file. quite useful\nconvert file format, combine tree data merge tree data \ndifferent sources demonstrated \nsession 3.2.\ntreeio package also supplies\nread.beast() function parse output file write.beast() function. Although\ntreeio, R community ability \nmanipulate BEAST Nexus format process tree data, still lacking\nlibrary/package parsing BEAST file programming language.JSON (JavaScript Object Notation) lightweight data-interchange format \nwidely supported almost modern programming languages. make easy\nimport tree data programming\nlanguages, treeio supports\nexporting tree data jtree format, JSON-based can easy parse using languages supports JSON.jtree format based JSON can parsed using JSON parser.jtree file can directly imported treedata object using\nread.jtree() function provided also\ntreeio package (see also session 1.3).","code":"\nwrite.jtree(tree2){\n    \"tree\": \"(((Prayidae_D27SS7@2825365:0.0682841{1},(Kephyes_ovata@2606431:0.0193941{2},Chuniphyes_multidentata@1277217:0.0121378{3}):0.0217782{20}):0.0607598{19},((Apolemia_sp_@1353964:0.11832{4},(((Bargmannia_amoena@263997:0.0144549{5},Bargmannia_elongata@946788:0.0149723{6}):0.0925388{25},Physonect_sp_@2066767:0.077429{7}):0.0274637{24},(Stephalia_dilata@2960089:0.0761163{8},((Frillagalma_vityazi@1155031:0.0906068{9},Resomia_ornicephala@3111757:1{10}e-06):1{28}e-06,((Lychnagalma_utricularia@2253871:0.120851{11},Nanomia_bijuga@717864:0.133939{12}):1{30}e-06,Cordagalma_sp_@1525873:0.0693814{13}):1{29}e-06):0.0333823{27}):1{26}e-06):0.0431861{23}):1{22}e-06,Rhizophysa_filiformis@3073669:0.22283{14}):0.0292362{21}):0.185603{18},(Hydra_magnipapillata@52244:0.0621782{15},Ectopleura_larynx@3556167:0.332505{16}):0.185603{31}){17};\",\n    \"data\":[\n  {\n    \"edge_num\": 1,\n    \"Ev\": \"S\",\n    \"S\": \"58\",\n    \"ND\": 0,\n    \"fake_trait\": 0.8103,\n    \"another_trait\": 0.098\n  },\n  {\n    \"edge_num\": 2,\n    \"Ev\": \"S\",\n    \"S\": \"69\",\n    \"ND\": 1,\n    \"fake_trait\": 1.0478,\n    \"another_trait\": 0.2553\n  },\n  {\n    \"edge_num\": 3,\n    \"Ev\": \"S\",\n    \"S\": \"70\",\n    \"ND\": 2,\n    \"fake_trait\": -0.5253,\n    \"another_trait\": 0.0768\n  },\n  {\n    \"edge_num\": 4,\n    \"Ev\": \"S\",\n    \"S\": \"31\",\n    \"ND\": 9,\n    \"fake_trait\": 1.2568,\n    \"another_trait\": 0.2869\n  },\n  {\n    \"edge_num\": 5,\n    \"Ev\": \"S\",\n    \"S\": \"37\",\n    \"ND\": 10,\n    \"fake_trait\": 1.2588,\n    \"another_trait\": 0.8783\n  },\n  {\n    \"edge_num\": 6,\n    \"Ev\": \"S\",\n    \"S\": \"38\",\n    \"ND\": 11,\n    \"fake_trait\": 0.2398,\n    \"another_trait\": 0.3792\n  },\n  {\n    \"edge_num\": 7,\n    \"Ev\": \"S\",\n    \"S\": \"61\",\n    \"ND\": 13,\n    \"fake_trait\": 0.7304,\n    \"another_trait\": 0.4977\n  },\n  {\n    \"edge_num\": 8,\n    \"Ev\": \"S\",\n    \"S\": \"52\",\n    \"ND\": 15,\n    \"fake_trait\": 1.3387,\n    \"another_trait\": 0.7873\n  },\n  {\n    \"edge_num\": 9,\n    \"Ev\": \"S\",\n    \"S\": \"53\",\n    \"ND\": 16,\n    \"fake_trait\": -0.7914,\n    \"another_trait\": 0.4379\n  },\n  {\n    \"edge_num\": 10,\n    \"Ev\": \"S\",\n    \"S\": \"54\",\n    \"ND\": 17,\n    \"fake_trait\": 0.1546,\n    \"another_trait\": 0.1023\n  },\n  {\n    \"edge_num\": 11,\n    \"Ev\": \"S\",\n    \"S\": \"65\",\n    \"ND\": 19,\n    \"fake_trait\": 0.5257,\n    \"another_trait\": 0.9116\n  },\n  {\n    \"edge_num\": 12,\n    \"Ev\": \"S\",\n    \"S\": \"71\",\n    \"ND\": 20,\n    \"fake_trait\": -0.9231,\n    \"another_trait\": 0.9441\n  },\n  {\n    \"edge_num\": 13,\n    \"Ev\": \"S\",\n    \"S\": \"64\",\n    \"ND\": 22,\n    \"fake_trait\": 0.9537,\n    \"another_trait\": 0.1134\n  },\n  {\n    \"edge_num\": 14,\n    \"Ev\": \"S\",\n    \"S\": \"26\",\n    \"ND\": 28,\n    \"fake_trait\": -0.1801,\n    \"another_trait\": 0.4055\n  },\n  {\n    \"edge_num\": 15,\n    \"Ev\": \"S\",\n    \"S\": \"16\",\n    \"ND\": 5,\n    \"fake_trait\": 1.2558,\n    \"another_trait\": 0.4273\n  },\n  {\n    \"edge_num\": 16,\n    \"Ev\": \"S\",\n    \"S\": \"15\",\n    \"ND\": 6,\n    \"fake_trait\": 0.7386,\n    \"another_trait\": 0.6203\n  },\n  {\n    \"edge_num\": 17,\n    \"Ev\": \"S\",\n    \"S\": \"9\",\n    \"ND\": 30,\n    \"fake_trait\": -0.271,\n    \"another_trait\": 0.9664\n  },\n  {\n    \"edge_num\": 18,\n    \"Ev\": \"D\",\n    \"S\": \"17\",\n    \"ND\": 8,\n    \"fake_trait\": -0.033,\n    \"another_trait\": 0.0023\n  },\n  {\n    \"edge_num\": 19,\n    \"Ev\": \"S\",\n    \"S\": \"36\",\n    \"ND\": 4,\n    \"fake_trait\": 1.4726,\n    \"another_trait\": 0.5972\n  },\n  {\n    \"edge_num\": 20,\n    \"Ev\": \"S\",\n    \"S\": \"60\",\n    \"ND\": 3,\n    \"fake_trait\": 1.1451,\n    \"another_trait\": 0.3417\n  },\n  {\n    \"edge_num\": 21,\n    \"Ev\": \"S\",\n    \"S\": \"17\",\n    \"ND\": 29,\n    \"fake_trait\": -1.9068,\n    \"another_trait\": 0.1172\n  },\n  {\n    \"edge_num\": 22,\n    \"Ev\": \"S\",\n    \"S\": \"19\",\n    \"ND\": 27,\n    \"fake_trait\": 0.095,\n    \"another_trait\": 0.1084\n  },\n  {\n    \"edge_num\": 23,\n    \"Ev\": \"D\",\n    \"S\": \"24\",\n    \"ND\": 26,\n    \"fake_trait\": -0.9022,\n    \"another_trait\": 0.945\n  },\n  {\n    \"edge_num\": 24,\n    \"Ev\": \"S\",\n    \"S\": \"24\",\n    \"ND\": 14,\n    \"fake_trait\": 0.8734,\n    \"another_trait\": 0.1335\n  },\n  {\n    \"edge_num\": 25,\n    \"Ev\": \"S\",\n    \"S\": \"33\",\n    \"ND\": 12,\n    \"fake_trait\": 2.5613,\n    \"another_trait\": 0.4329\n  },\n  {\n    \"edge_num\": 26,\n    \"Ev\": \"S\",\n    \"S\": \"35\",\n    \"ND\": 25,\n    \"fake_trait\": 0.6101,\n    \"another_trait\": 0.7107\n  },\n  {\n    \"edge_num\": 27,\n    \"Ev\": \"S\",\n    \"S\": \"40\",\n    \"ND\": 24,\n    \"fake_trait\": -0.2137,\n    \"another_trait\": 0.8286\n  },\n  {\n    \"edge_num\": 28,\n    \"Ev\": \"S\",\n    \"S\": \"45\",\n    \"ND\": 18,\n    \"fake_trait\": -0.1894,\n    \"another_trait\": 0.1542\n  },\n  {\n    \"edge_num\": 29,\n    \"Ev\": \"S\",\n    \"S\": \"46\",\n    \"ND\": 23,\n    \"fake_trait\": -0.3016,\n    \"another_trait\": 0.5911\n  },\n  {\n    \"edge_num\": 30,\n    \"Ev\": \"S\",\n    \"S\": \"56\",\n    \"ND\": 21,\n    \"fake_trait\": -0.5927,\n    \"another_trait\": 0.5091\n  },\n  {\n    \"edge_num\": 31,\n    \"Ev\": \"S\",\n    \"S\": \"12\",\n    \"ND\": 7,\n    \"fake_trait\": 0.7259,\n    \"another_trait\": 0.9045\n  }\n],\n    \"metadata\": {\"info\": \"R-package treeio\", \"data\": \"Tue Nov  3 10:39:01 2020\"}\n}\njtree_file <- tempfile(fileext = '.jtree')\nwrite.jtree(tree2, file = jtree_file)\njsonlite::fromJSON(jtree_file)$tree\n[1] \"(((Prayidae_D27SS7@2825365:0.0682841{1},(Kephyes_ovata@2606431:0.0193941{2},Chuniphyes_multidentata@1277217:0.0121378{3}):0.0217782{20}):0.0607598{19},((Apolemia_sp_@1353964:0.11832{4},(((Bargmannia_amoena@263997:0.0144549{5},Bargmannia_elongata@946788:0.0149723{6}):0.0925388{25},Physonect_sp_@2066767:0.077429{7}):0.0274637{24},(Stephalia_dilata@2960089:0.0761163{8},((Frillagalma_vityazi@1155031:0.0906068{9},Resomia_ornicephala@3111757:1{10}e-06):1{28}e-06,((Lychnagalma_utricularia@2253871:0.120851{11},Nanomia_bijuga@717864:0.133939{12}):1{30}e-06,Cordagalma_sp_@1525873:0.0693814{13}):1{29}e-06):0.0333823{27}):1{26}e-06):0.0431861{23}):1{22}e-06,Rhizophysa_filiformis@3073669:0.22283{14}):0.0292362{21}):0.185603{18},(Hydra_magnipapillata@52244:0.0621782{15},Ectopleura_larynx@3556167:0.332505{16}):0.185603{31}){17};\"\n\n$data\n   edge_num Ev  S ND fake_trait another_trait\n1         1  S 58  0     0.8103        0.0980\n2         2  S 69  1     1.0478        0.2553\n3         3  S 70  2    -0.5253        0.0768\n4         4  S 31  9     1.2568        0.2869\n5         5  S 37 10     1.2588        0.8783\n6         6  S 38 11     0.2398        0.3792\n7         7  S 61 13     0.7304        0.4977\n8         8  S 52 15     1.3387        0.7873\n9         9  S 53 16    -0.7914        0.4379\n10       10  S 54 17     0.1546        0.1023\n11       11  S 65 19     0.5257        0.9116\n12       12  S 71 20    -0.9231        0.9441\n13       13  S 64 22     0.9537        0.1134\n14       14  S 26 28    -0.1801        0.4055\n15       15  S 16  5     1.2558        0.4273\n16       16  S 15  6     0.7386        0.6203\n17       17  S  9 30    -0.2710        0.9664\n18       18  D 17  8    -0.0330        0.0023\n19       19  S 36  4     1.4726        0.5972\n20       20  S 60  3     1.1451        0.3417\n21       21  S 17 29    -1.9068        0.1172\n22       22  S 19 27     0.0950        0.1084\n23       23  D 24 26    -0.9022        0.9450\n24       24  S 24 14     0.8734        0.1335\n25       25  S 33 12     2.5613        0.4329\n26       26  S 35 25     0.6101        0.7107\n27       27  S 40 24    -0.2137        0.8286\n28       28  S 45 18    -0.1894        0.1542\n29       29  S 46 23    -0.3016        0.5911\n30       30  S 56 21    -0.5927        0.5091\n31       31  S 12  7     0.7259        0.9045\n\n$metadata\n$metadata$info\n[1] \"R-package treeio\"\n\n$metadata$data\n[1] \"Tue Nov  3 10:39:01 2020\"\nread.jtree(jtree_file)## 'treedata' S4 object that stored information of\n##  '/tmp/RtmpAA5R0i/file538b275bb4b63.jtree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431, Chuniphyes_multidentata@1277217, Apolemia_sp_@1353964, Bargmannia_amoena@263997, Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'Ev',   'S',    'ND',   'fake_trait',   'another_trait'."},{"path":"chapter3.html","id":"summary3","chapter":"3 Exporting tree with data","heading":"3.4 Summary","text":"Phylogenetic tree associated data often stored separate file need expertise map data tree structure. Lacking standardization store represent phylogeny associated data, makes difficult researchers access integrate phylogenetic data studies. treeio package provides functions import phylogeny associated data number sources, including analysis finding commonly used software external data experimental, clinical meta data. tree + data can exported single file BEAST jtree formats, output file can parsed back R treeio data easy access. input output utilities supplied treeio package lay foundation phylogenetic data integration downstream comparative study visualization.","code":""},{"path":"chapter4.html","id":"chapter4","chapter":"4 Phylogenetic Tree Visualization","heading":"4 Phylogenetic Tree Visualization","text":"","code":""},{"path":"chapter4.html","id":"introduction-2","chapter":"4 Phylogenetic Tree Visualization","heading":"4.1 Introduction","text":"many software packages webtools designed displaying phylogenetic trees, TreeView (Page 2002), FigTree, TreeDyn (Chevenet et al. 2006), Dendroscope (Huson Scornavacca 2012), EvolView (et al. 2016) iTOL (Letunic Bork 2007), etc.. several , FigTree, TreeDyn iTOL, allow users annotate trees colored branches, highlighted clades tree features. However, pre-defined annotating functions usually limited specific phylogenetic data. phylogenetic trees becoming widely used multidisciplinary studies, increasing need incorporate various types phylogenetic covariates associated data different sources trees visualizations analyses. instance, influenza virus wide host range, diverse dynamic genotypes characteristic transmission behaviors mostly associated virus evolution essentially among . Therefore, addition standalone applications focus specific analysis data type, researchers studying molecular evolution need robust programmable platform allows high levels integration visualization many different aspects data (raw primary analyses) phylogenetic trees identify associations patterns.fill gap, developed ggtree (Yu et al. 2017), package R programming language (R Core Team 2016) released Bioconductor project (Gentleman et al. 2004). ggtree built work tree data object (see chapter 1 chapter 9), display tree graphics ggplot2 package (Wickham 2016) based grammar graphics (Wilkinson et al. 2005).R language increasingly used phylogenetics. However, comprehensive package, designed viewing annotating phylogenetic trees, particularly complex data integration, yet available. R packages phylogenetics focus specific statistical analyses rather viewing annotating trees generalized phylogeny-associated data. packages, including ape (Paradis, Claude, Strimmer 2004) phytools (Revell 2012), capable displaying annotating trees, developed using base graphics system R. particular, ape one fundamental package phylogenetic analysis data processing. However, base graphics system relatively difficult extend limits complexity tree figure displayed. OutbreakTools (Jombart et al. 2014) phyloseq (McMurdie Holmes 2013) extended ggplot2 plot phylogenetic trees. ggplot2 system graphics allows rapid customization exploration design solutions. However packages designed epidemiology microbiome data respectively aim provide general solution tree visualization annotation. ggtree package also inherits versatile properties ggplot2, importantly allows constructing complex tree figures freely combining multiple layers annotations (see also Chapter 5) using tree associated data imported different sources (see detailed Chapter 1 (Wang et al. 2020)).","code":""},{"path":"chapter4.html","id":"visualizing-phylogenetic-tree-with-ggtree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.2 Visualizing Phylogenetic Tree with ggtree","text":"ggtree package (Yu et al. 2017) designed annotating phylogenetic trees associated data different types various sources. data come users analysis programs, might include evolutionary rates, ancestral sequences, etc. associated taxa real samples, internal nodes representing hypothetic ancestor strain/species, tree branches indicating evolutionary time courses (Wang et al. 2020). instance, data geographic positions sampled avian influenza viruses (informed survey locations) ancestral nodes (phylogeographic inference) viral gene tree (Lam et al. 2012).ggtree supports ggplot2‚Äôs graphical language, allows high level customization, intuitive flexible. notable ggplot2 provide low-level geometric objects support tree-like structures, hence ggtree useful extension regard. Even though two phylogenetics-related R packages, OutbreakTools phyloseq, developed based ggplot2, valuable part ggplot2 syntax - adding layers annotations - supported packages. example, plotted tree without taxa labels, OutbreakTools phyloseq provide easy way general R users, little knowledge infrastructures packages, add layer taxa labels. ggtree extends ggplot2 support tree objects implementing geometric layer, geom_tree(), support visualizing tree structure. ggtree, viewing phylogenetic tree relatively easy, via command ggplot(tree_object) + geom_tree() + theme_tree() ggtree(tree_object) short. Layers annotations can added one one via + operator. facilitate tree visualization, ggtree provides several geometric layers, including geom_treescale adding legend tree branch scale (genetic distance, divergence time, etc.), geom_range displaying uncertainty branch lengths (confidence interval range, etc.), geom_tiplab adding taxa label, geom_tippoint geom_nodepoint adding symbols tips internal nodes, geom_hilight highlighting clades rectangle, geom_cladelab annotating selected clades bar text label, etc.. full list geometric layers provided ggtree summarized Table 5.1.view phylogenetic tree, first need parse tree file R.\ntreeio package able parse diverse annotation data different software outputs S4 phylogenetic data objects (see also [Chapter 1]](#chapter1)). ggtree package mainly utilizes S4 objects display annotate tree. also R packages defined S3/S4 classes store phylogenetic trees domain specific associated data, including phylo4 phylo4d defined phylobase package, obkdata defined OutbreakTools package, phyloseq defined phyloseq package etc. (see also Chapter 9). tree objects also supported ggtree specific annotation data can used annotate tree directly ggtree. compatibility ggtree facilitates integration data analysis results. addition, ggtree also supports tree-like structure, including dendrogram.","code":""},{"path":"chapter4.html","id":"basic-tree-visualization","chapter":"4 Phylogenetic Tree Visualization","heading":"4.2.1 Basic Tree Visualization","text":"ggtree package extends ggplot2 (Wickham 2009) package support viewing phylogenetic tree.\nimplements geom_tree layer displaying phylogenetic tree, shown Figure 4.1A.function, ggtree(), implemented short cut visualize tree, works exactly shown .ggtree package takes advantages ggplot2. example, can change color, size type lines ggplot2 (Figure 4.1B).default, tree viewed ladderize form, user can set parameter ladderize = FALSE disable (Figure 4.1C, see also FAQ .5).branch.length used scale edge, user can set parameter branch.length = \"none\" view tree topology (cladogram, Figure 4.1D) numerical variable scale tree (e.g. dN/dS, see also Chapter 5).\nFigure 4.1: Basic tree visualization. Default ggtree output ladderized effect (), non-variable setting (e.g. colour, size, line type) (B), nonladderized tree (C), cladogram display tree topology without branch length information (D).\n","code":"\nlibrary(\"treeio\")\nlibrary(\"ggtree\")\n\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\n\nggplot(tree, aes(x, y)) + geom_tree() + theme_tree()\nggtree(tree, color=\"firebrick\", size=2, linetype=\"dotted\")\nggtree(tree, ladderize=FALSE)\nggtree(tree, branch.length=\"none\")"},{"path":"chapter4.html","id":"tree-layouts","chapter":"4 Phylogenetic Tree Visualization","heading":"4.2.2 Layouts of phylogenetic tree","text":"Viewing phylogenetic ggtree quite simple, just pass tree object ggtree() function. developed several types layouts tree presentation (Figure 4.2), including rectangular (default), slanted, circular, fan, unrooted (equal angle daylight methods), time-scaled 2-dimensional layouts.examples visualizing tree different layouts:\nFigure 4.2: Tree layouts. Phylogram: rectangular layout (), round rectangular layout (B), slanted layout (C), ellipse layout (D), circular layout (E) fan layout (F). Unrooted: equal-angle method (G) daylight method (H). Cladogram: rectangular layout (), ellipse (J), circular layout (K) unrooted layout (L). Slanted fan layouts cladogram also supported.\nalso possible layouts can drawn modifying\nscales/coordination (Figure 4.3).\nFigure 4.3: Derived Tree layouts. right--left rectangular layout (), bottom-rectangular layout (B), top-rectangular layout (Dendrogram) (C), rotated rectangular layout (D), bottom-slanted layout (E), top-slanted layout (Cladogram) (F), circular layout (G), circular inward layout (H ).\nPhylogram. Layouts rectangular, roundrect, slanted, ellipse, circular fan supported visualize phylogram (default, branch length scaled) demonstrated Figure 4.2A-F.Unrooted layout. Unrooted (also called ‚Äòradial‚Äô) layout supported equal-angle daylight algorithms, user can specify unrooted layout algorithm passing ‚Äúequal_angle‚Äù ‚Äúdaylight‚Äù layout parameter visualize tree. Equal-angle method proposed Christopher Meacham PLOTREE, incorporated PHYLIP (Retief 2000). method starts root tree allocates arcs angle subtrees proportional number tips . iterates root tips subdivides angle allocated subtree angles dependent subtrees. method fast implemented many software packages. shown Figure 4.2G, equal angle method drawback tips tend clustered together leaving many spaces unused. daylight method starts initial tree built equal angle iteratively improves successively going interior node swinging subtrees arcs ‚Äúdaylight‚Äù equal (Figure 4.2H). method firstly implemented PAUP* (Wilgenbusch Swofford 2003).Cladogram. visualize cladogram without branch length scaling display tree structure, branch.length set ‚Äúnone‚Äù works types layouts (Figure 4.2I-L).Time-scaled layout. time-scaled tree, recent sampling date must specified via mrsd parameter ggtree scaled tree sampling (tip) divergence (internal node) time, time scale axis displayed tree default.\nFigure 4.4: Time-scaled layout. x-axis timescale (units year). divergence time example inferred BEAST using molecular clock model.\nTwo-dimensional tree layout. two-dimensional tree projection phylogenetic tree space defined associated phenotype (numerical categorical trait, y-axis) tree branch scale (e.g., evolutionary distance, divergent time, x-axis). phenotype can measure certain biological characteristics taxa hypothetical ancestors tree. new layout proposed ggtree, useful track virus phenotypes behaviors (y-axis) changing virus evolution (x-axis). fact, analysis phenotypes genotypes evolutionary time widely used study influenza virus evolution (Neher et al. 2016), though analysis diagrams tree-like, .e., connection data points, unlike two-dimensional tree layout connect data points corresponding tree branches. Therefore, new layout provided make data analysis easier scalable large sequence data sets.example, used previous time-scaled tree H3 human swine influenza viruses (Figure 4.4; data published (Liang et al. 2014)) scaled y-axis based predicted N-linked glycosylation sites (NLG) taxon ancestral sequences hemagglutinin proteins. NLG sites predicted using NetNGlyc 1.0 Server. scaled y-axis, parameter yscale ggtree() function set numerical categorical variable. yscale categorical variable example, users specify categories mapped numerical values via yscale_mapping variables.\nFigure 4.5: Two-dimensional tree layout. trunk branches highlighted red (swine) blue (human). x-axis scaled branch length (units year) time-scaled tree. y-axis scaled node attribute variable, case number predicted N-linked glycosylation site (NLG) hemagglutinin protein. Colored circles indicate different types tree nodes. Note nodes assigned x- (temporal) y- (NLG) coordinates superimposed representation appear one node, shaded based colors nodes point.\nshown Figure 4.5, two-dimensional tree good visualizing change phenotype evolution phylogenetic tree. example, shown H3 gene human influenza virus maintained high level N-linked glycosylation sites (n=8 9) last two decades dropped significantly 5 6 separate viral lineage transmitted swine populations established . indeed hypothesized human influenza virus high level glycosylation viral hemagglutinin protein provides better shielding effect protect antigenic sites exposure herd immunity, thus selective advantage human populations maintain high level herd immunity circulating human influenza virus strains. viral lineage newly jumped across species barrier transmitted swine population, shielding effect high-level surface glycan oppositely impose selective disadvantage receptor-binding domain may also shielded greatly affect viral fitness lineage newly adapted new host species. Another example two-dimensional tree can found Figure 4.12.","code":"\nlibrary(ggtree)\nset.seed(2017-02-16)\ntree <- rtree(50)\nggtree(tree)\nggtree(tree, layout=\"roundrect\")\nggtree(tree, layout=\"slanted\")\nggtree(tree, layout=\"ellipse\")\nggtree(tree, layout=\"circular\")\nggtree(tree, layout=\"fan\", open.angle=120)\nggtree(tree, layout=\"equal_angle\")\nggtree(tree, layout=\"daylight\")\nggtree(tree, branch.length='none')\nggtree(tree, layout=\"ellipse\", branch.length=\"none\")\nggtree(tree, branch.length='none', layout='circular')\nggtree(tree, layout=\"daylight\", branch.length = 'none')\nggtree(tree) + scale_x_reverse()\nggtree(tree) + coord_flip()\nggtree(tree) + layout_dendrogram()\nggplotify::as.ggplot(ggtree(x), angle=-30, scale=.9)\nggtree(tree, layout='slanted') + coord_flip()\nggtree(tree, layout='slanted', branch.length='none') + layout_dendrogram()\nggtree(tree, layout='circular') + xlim(-10, NA)\nggtree(tree) + layout_inward_circular()\nggtree(tree) + layout_inward_circular(xlim=15)\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", \n                          package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\nggtree(beast_tree, mrsd=\"2013-01-01\") + theme_tree2()\nNAG_file <- system.file(\"examples/NAG_inHA1.txt\", package=\"ggtree\")\n\nNAG.df <- read.table(NAG_file, sep=\"\\t\", header=FALSE, \n                     stringsAsFactors = FALSE)\nNAG <- NAG.df[,2]\nnames(NAG) <- NAG.df[,1]\n\n## separate the tree by host species\ntip <- get.tree(beast_tree)$tip.label\nbeast_tree <- groupOTU(beast_tree, tip[grep(\"Swine\", tip)], \n                       group_name = \"host\")\n\np <- ggtree(beast_tree, aes(color=host), mrsd=\"2013-01-01\", \n            yscale = \"label\", yscale_mapping = NAG) + \n  theme_classic() + theme(legend.position='none') +\n  scale_color_manual(values=c(\"blue\", \"red\"), \n                     labels=c(\"human\", \"swine\")) +\n  ylab(\"Number of predicted N-linked glycoslyation sites\")\n\n## (optional) add more annotations to help interpretation\np + geom_nodepoint(color=\"grey\", size=3, alpha=.8) +\n  geom_rootpoint(color=\"black\", size=3) +\n  geom_tippoint(size=3, alpha=.5) + \n  annotate(\"point\", 1992, 5.6, size=3, color=\"black\") +\n  annotate(\"point\", 1992, 5.4, size=3, color=\"grey\") +\n  annotate(\"point\", 1991.6, 5.2, size=3, color=\"blue\") +\n  annotate(\"point\", 1992, 5.2, size=3, color=\"red\") + \n  annotate(\"text\", 1992.3, 5.6, hjust=0, size=4, label=\"Root node\") +\n  annotate(\"text\", 1992.3, 5.4, hjust=0, size=4, \n           label=\"Internal nodes\") +\n  annotate(\"text\", 1992.3, 5.2, hjust=0, size=4,\n           label=\"Tip nodes (blue: human; red: swine)\")"},{"path":"chapter4.html","id":"displaying-tree-components","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3 Displaying Tree Components","text":"","code":""},{"path":"chapter4.html","id":"geom-trescale","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.1 Displaying tree scale (evolution distance)","text":"show tree scale, user can use geom_treescale() layer (Figure 4.6A).geom_treescale() supports following parameters:x y tree scale positionwidth length tree scalefontsize size textlinesize size lineoffset relative position line textcolor color tree scaleWe can also use theme_tree2() display tree scale adding x axis.\nFigure 4.6: Display tree scale. geom_treescale automatically add scale bar evolutionary distance (). Users can modify color, width position scale (B) well size scale bar text relative position (C). Another possible solution enable x-axis useful time-scale tree (D).\nTree scale restricted evolution distance, treeio can re-scale tree numerical variable (details described session 2.3).","code":"\nggtree(tree) + geom_treescale()\nggtree(tree) + geom_treescale(x=0, y=45, width=1, color='red')\nggtree(tree) + geom_treescale(fontsize=6, linesize=2, offset=1)\nggtree(tree) + theme_tree2()"},{"path":"chapter4.html","id":"geom-nodepoint","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.2 Displaying nodes/tips","text":"Showing internal nodes tips tree can done adding layer points using geom_nodepoint(), geom_tippoint() geom_point().\nFigure 4.7: Display external internal nodes. geom_point() automatically add symbolic points nodes (). geom_nodepoint() adds symbolic points internal nodes geom_tippoint() adds symbolic points external nodes (B).\n","code":"\nggtree(tree) + geom_point(aes(shape=isTip, color=isTip), size=3)\np <- ggtree(tree) + geom_nodepoint(color=\"#b5e521\", alpha=1/4, size=10)\np + geom_tippoint(color=\"#FDAC4F\", shape=8, size=3)"},{"path":"chapter4.html","id":"displaying-labels","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.3 Displaying labels","text":"Users can use geom_text() geom_label() display node (available) tip labels simultaneously geom_tiplab() display tip labels (Figure 4.8A).geom_tiplab() layer supports using text label geom display labels,\nalso supports image geom label tip image files (see Chapter 7). corresponding\ngeom, geom_nodelab() also provided displaying node labels.circular unrooted layout, ggtree supports rotating node labels according angles branches (Figure 4.8B).long tip labels, label maybe truncated. several ways solve issue (see FAQ: Tip label truncated).Another solution solve issue display tip labels y-axis labels (Figure 4.8C). However works rectangular dendrogram layouts users need use theme() adjust tip labels case.\nFigure 4.8: Display tip labels. geom_tiplab() supports displaying tip labels (). circular, fan unrooted tree layout, labels can rotated fit angle branches (B). dendrogram/rectangular layout, tip labels can displayed y-axis label (C).\ndefault, positions display text based node positions, can change based middle branch/edge (setting aes(x = branch)), useful annotating transition parent node child node.","code":"\np + geom_tiplab(size=3, color=\"purple\")\nggtree(tree, layout=\"circular\") + geom_tiplab(aes(angle=angle), color='blue')\nggtree(tree) + geom_tiplab(as_ylab=TRUE, color='firebrick')"},{"path":"chapter4.html","id":"displaying-root-edge","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.4 Displaying root edge","text":"ggtree doesn‚Äôt plot root edge default. Users can use geom_rootedge() automatically display root edge (Figure 4.9A). root edge information, geom_rootedge() display nothing default (Figure 4.9B). Users can set root edge tree (Figure 4.9C) specify rootedge geom_rootedge() (Figure 4.9D). long root length useful increase readibility circular tree (see also FAQ: Enlarge center space).\nFigure 4.9: Display root edge. geom_rootedge supports displaying root edge root edge presented (). shows nothing root edge (B). case, users can manually setting root edge tree (C) just specify length root plotting (D).\n","code":"\n## with root edge = 1\ntree1 <- read.tree(text='((A:1,B:2):3,C:2):1;')\nggtree(tree1) + geom_tiplab() + geom_rootedge()\n\n## without root edge\ntree2 <- read.tree(text='((A:1,B:2):3,C:2);')\nggtree(tree2) + geom_tiplab() + geom_rootedge()\n\n## setting root edge\ntree2$root.edge <- 2\nggtree(tree2) + geom_tiplab() + geom_rootedge()\n\n## specify length of root edge for just plotting\n## this will ignore tree$root.edge\nggtree(tree2) + geom_tiplab() + geom_rootedge(rootedge = 3)"},{"path":"chapter4.html","id":"color-tree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.5 Color tree","text":"ggtree (Yu et al. 2018), coloring phylogenetic tree easy, using aes(color=VAR) map color tree based specific variable (numeric category supported).\nFigure 4.10: Color tree continuous discrete feature. Edges colored values associated child node.\nUser can use feature (available), including clade posterior dN/dS etc., scale color tree. feature continuous numerical value, ggtree provides continuous parameter support plotting continuous state transition edges. , use example provided http://www.phytools.org/eqg2015/asr.html demonstrate functionality. want add thin black border tree branches, can place tree black slightly thicker branches tree emulate edge outlines demonstrated Figure 4.11B.\nFigure 4.11: Continuous state transition edges. Edges colored values ancestral trait offspring.\nBesides, can use two-dimensional tree (demonstrated Figure 4.5) visualize phenotype vertical dimension create phenogram. can use ggrepel package repel tip labels avoid overlapping demonstrated Figure .4.\nFigure 4.12: Phenogram. Projecting tree space defined time (genetic distance) horizontal axis phenotype vertical dimension.\n","code":"\nggtree(beast_tree, aes(color=rate)) +\n    scale_color_continuous(low='darkgreen', high='red') +\n    theme(legend.position=\"right\")\nanole.tree<-read.tree(\"http://www.phytools.org/eqg2015/data/anole.tre\")\nsvl <- read.csv(\"http://www.phytools.org/eqg2015/data/svl.csv\",\n    row.names=1)\nsvl <- as.matrix(svl)[,1]\nfit <- phytools::fastAnc(anole.tree,svl,vars=TRUE,CI=TRUE)\n\ntd <- data.frame(node = nodeid(anole.tree, names(svl)),\n               trait = svl)\nnd <- data.frame(node = names(fit$ace), trait = fit$ace)\n\nd <- rbind(td, nd)\nd$node <- as.numeric(d$node)\ntree <- full_join(anole.tree, d, by = 'node')\n\np1 <- ggtree(tree, aes(color=trait), layout = 'circular', \n        ladderize = FALSE, continuous = TRUE, size=2) +\n    scale_color_gradientn(colours=c(\"red\", 'orange', 'green', 'cyan', 'blue')) +\n    geom_tiplab(hjust = -.1) + \n    xlim(0, 1.2) + \n    theme(legend.position = c(.05, .85)) \n\np2 <- ggtree(tree, layout='circular', ladderize = FALSE, size=2.8) + \n    geom_tree(aes(color=trait), continuous=T, size=2) +  \n    scale_color_gradientn(colours=c(\"red\", 'orange', 'green', 'cyan', 'blue')) +\n    geom_tiplab(aes(color=trait), hjust = -.1) + \n    xlim(0, 1.2) + \n    theme(legend.position = c(.05, .85)) \n\ncowplot::plot_grid(p1, p2, ncol=2, labels=c(\"A\", \"B\"))    \nggtree(tree, aes(color=trait), continuous = TRUE, yscale = \"trait\") + \n    scale_color_viridis_c() + theme_minimal()"},{"path":"chapter4.html","id":"rescale-tree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.6 Rescale tree","text":"phylogenetic trees scaled evolutionary distance (substitution/site). ggtree, users can re-scale phylogenetic tree numerical variable inferred evolutionary analysis (e.g. dN/dS).example displays time tree (Figure 4.13A) branches rescaled substitution rate inferred BEAST (Figure 4.13B).following example draw tree inferred CodeML (Figure 4.13C), branches can rescaled using dN/dS values (Figure 4.13D).\nFigure 4.13: Rescale tree branches. time scaled tree inferred BEAST () branches rescaled substitution rate (B). tree inferred CodeML (C) branches rescaled dN/dS values (D).\naddition specify branch.length tree visualization, users can change branch length stored tree object using rescale_tree() function provided treeio package (Wang et al. 2020), following command display tree identical (Figure 4.13B). rescale_tree() function documented session 2.4.","code":"\nlibrary(\"treeio\")\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\nbeast_tree## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, A/New_York/452/1999, A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_median',\n##  'height_range', 'length',   'length_0.95_HPD',\n##  'length_median',    'length_range', 'posterior',    'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range'.\np1 <- ggtree(beast_tree, mrsd='2013-01-01') + theme_tree2() +\n    labs(caption=\"Divergence time\")\np2 <- ggtree(beast_tree, branch.length='rate') + theme_tree2() +\n    labs(caption=\"Substitution rate\")\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nmlc_tree <- read.codeml_mlc(mlcfile)\np3 <- ggtree(mlc_tree) + theme_tree2() +\n    labs(caption=\"nucleotide substitutions per codon\")\np4 <- ggtree(mlc_tree, branch.length='dN_vs_dS') + theme_tree2() +\n    labs(caption=\"dN/dS tree\")\nbeast_tree2 <- rescale_tree(beast_tree, branch.length='rate')\nggtree(beast_tree2) + theme_tree2()"},{"path":"chapter4.html","id":"modify-compenents-of-a-theme","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.7 Modify compenents of a theme","text":"theme_tree() defined totally blank canvas, theme_tree2() adds\nphylogenetic distance (via x-axis). two themes accept parameter \nbgcolor defined background color. Users can use theme components theme_tree() theme_tree2() functions modify .\nFigure 4.14: ggtree themes. ggplot2 theme components can modified ggplot2 themes can applied ggtree() output.\nUsers can also use image file tree background, see example Appendix B.","code":"\nset.seed(2019)\nx <- rtree(30)\nggtree(x, color=\"red\") + theme_tree(\"steelblue\")\nggtree(x, color=\"white\") + theme_tree(\"black\")"},{"path":"chapter4.html","id":"visualize-a-list-of-trees","chapter":"4 Phylogenetic Tree Visualization","heading":"4.4 Visualize a list of trees","text":"ggtree supports multiPhylo treedataList objects list trees can viewed simultaneously.\nFigure 4.15: Visualize multiPhylo object.\nOne hundred bootstrap trees can also view simultaneously.\nFigure 4.16: Visualize one hundred bootstrap trees.\n","code":"\n## trees <- lapply(c(10, 20, 40), rtree)\n## class(trees) <- \"multiPhylo\"\n## ggtree(trees) + facet_wrap(~.id, scale=\"free\") + geom_tiplab()\n\nr8s <- read.r8s(system.file(\"extdata/r8s\", \"H3_r8s_output.log\", package=\"treeio\"))\nggtree(r8s) + facet_wrap( ~.id, scale=\"free\") + theme_tree2()\nbtrees <- read.tree(system.file(\"extdata/RAxML\", \"RAxML_bootstrap.H3\", package=\"treeio\"))\nggtree(btrees) + facet_wrap(~.id, ncol=10)"},{"path":"chapter4.html","id":"annotate-one-tree-with-values-from-different-variables","chapter":"4 Phylogenetic Tree Visualization","heading":"4.4.1 Annotate one tree with values from different variables","text":"annotate one tree (tree) values different variable, one can plot separately use cowplot patchwork combine side side.Another solution utilize ability plotting list tree ggtree, add annotation layers selected variable specific panel via subset aesthetic mapping supported ggtree using td_filter() demonstrated Figure 4.17.\nFigure 4.17: Annotate one tree values different variables. Using subset aesthetic mapping (TREE1 panel) td_filter() (TREE2 panel) filter variable displayed specific panel.\n","code":"\nset.seed(2020)\nx <- rtree(30)\nd <- data.frame(label=x$tip.label, var1=abs(rnorm(30)), var2=abs(rnorm(30)))\ntree <- full_join(x, d, by='label')\ntrs <- list(TREE1 = tree, TREE2 = tree)\nclass(trs) <- 'treedataList'\nggtree(trs) + facet_wrap(~.id) + \n  geom_tippoint(aes(subset=.id == 'TREE1', colour=var1)) + \n  scale_colour_gradient(low='blue', high='red') +  \n  ggnewscale::new_scale_colour()  + \n  geom_tippoint(aes(colour=var2), data=td_filter(.id == \"TREE2\")) + \n  scale_colour_viridis_c()"},{"path":"chapter4.html","id":"densitree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.4.2 DensiTree","text":"Another way view bootstrap trees merge together form density tree using ggdensitree() function.\nFigure 4.18: DensiTree.\n","code":"\nggdensitree(btrees, alpha=.3, colour='steelblue') + \n    geom_tiplab(size=3) + xlim(0, 45)"},{"path":"chapter4.html","id":"summary4","chapter":"4 Phylogenetic Tree Visualization","heading":"4.5 Summary","text":"Visualizing phylogenetic tree using ggtree easy using single command ggtree(tree). ggtree package provides several geometric layers display tree components tip labels, symbolic points external internal nodes, root edge, etc. Associated data can used rescale branch lengths, color tree display tree. can done ggplot2 grammar graphic syntax. ggtree also provides several layers specifically designed tree annotation (see Chapter 5).","code":""},{"path":"chapter5.html","id":"chapter5","chapter":"5 Phylogenetic Tree Annotation","heading":"5 Phylogenetic Tree Annotation","text":"","code":""},{"path":"chapter5.html","id":"visualizing-and-annotating-tree-using-grammar-of-graphics","chapter":"5 Phylogenetic Tree Annotation","heading":"5.1 Visualizing and Annotating Tree using Grammar of Graphics","text":"ggtree (Yu et al. 2017) designed general purpose specific type tree visualization annotation. supports grammar graphics implemented ggplot2 users can freely visualize/annotate tree combining several annotation layers.\nFigure 5.1: Annotating tree using grammar graphics. NHX tree annotated using grammar graphic syntax combining different layers using + operator. Species information labelled middle branches, Duplication events shown recent common ancestor clade bootstrap value dispalyed near .\n, example, visualized tree several layers display annotation stored NHX tags, including layer geom_tiplab display tip labels (gene name case), layer using geom_label show species information (S tag) colored lightgreen, layer duplication event information (D tag) colored steelblue another layer using geom_text show bootstrap value (B tag).Layers defined ggplot2 can applied ggtree directly demonstrated Figure 5.1 using geom_label geom_text. ggplot2 provide graphic layers specific designed phylogenetic tree annotation. instance, layers tip labels, tree branch scale legend, highlight labeling clade unavailable. make tree annotation flexible, number layers implemented ggtree (Table 5.1), enabling different ways annotation various parts/components phylogenetic tree.\nTable 5.1: Geom layers defined ggtree.\n","code":"\nlibrary(ggtree)\ntreetext = \"(((ADH2:0.1[&&NHX:S=human], ADH1:0.11[&&NHX:S=human]):\n0.05 [&&NHX:S=primates:D=Y:B=100],ADHY:\n0.1[&&NHX:S=nematode],ADHX:0.12 [&&NHX:S=insect]):\n0.1[&&NHX:S=metazoa:D=N],(ADH4:0.09[&&NHX:S=yeast],\nADH3:0.13[&&NHX:S=yeast], ADH2:0.12[&&NHX:S=yeast],\nADH1:0.11[&&NHX:S=yeast]):0.1[&&NHX:S=Fungi])[&&NHX:D=N];\"\ntree <- read.nhx(textConnection(treetext))\nggtree(tree) + geom_tiplab() + \n  geom_label(aes(x=branch, label=S), fill='lightgreen') + \n  geom_label(aes(label=D), fill='steelblue') + \n  geom_text(aes(label=B), hjust=-.5)"},{"path":"chapter5.html","id":"layers-for-tree-annotation","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2 Layers for Tree Annotation","text":"","code":""},{"path":"chapter5.html","id":"colored-strips","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.1 Colored strips","text":"ggtree (Yu et al. 2017) implements geom_cladelabel() layer annotate selected clade bar indicating clade corresponding label.geom_cladelabel() layer accepts selected internal node number label corresponding clade automatically (Figure 5.2A). get internal node number, please refer Chapter 2.Users can set parameter, align = TRUE, align clade label, offset, adjust position color set color bar label text etc (Figure 5.2B).Users can change angle clade label text relative position text bar via parameter offset.text. size bar text can changed via parameters barsize fontsize respectively (Figure 5.2C).Users can also use geom_label label text can set background color fill parameter (Figure 5.2D).\nFigure 5.2: Labeling clades.\ngeom_cladelabel also supports unrooted tree layouts (Figure 5.3A).geom_cladelabel designed labeling Monophyletic (Clade) related taxa form clade. ggtree provides geom_strip add strip/bar indicate association optional label Polyphyletic Paraphyletic (Figure 5.3B).\nFigure 5.3: Labeling associated taxa. geom_cladelabel labeling Monophyletic also supports unrooted layout (). geom_strip designed labeling associated taxa (Monophyletic, Polyphyletic Paraphyletic) (B).\n","code":"\nset.seed(2015-12-21)\ntree <- rtree(30)\np <- ggtree(tree) + xlim(NA, 6)\n\np + geom_cladelabel(node=45, label=\"test label\") +\n    geom_cladelabel(node=34, label=\"another clade\")\np + geom_cladelabel(node=45, label=\"test label\", align=TRUE,  offset = .2, color='red') +\n    geom_cladelabel(node=34, label=\"another clade\", align=TRUE, offset = .2, color='blue')\np + geom_cladelabel(node=45, label=\"test label\", align=T, angle=270, hjust='center', offset.text=.5, barsize=1.5) +\n    geom_cladelabel(node=34, label=\"another clade\", align=T, angle=45, fontsize=8)\np + geom_cladelabel(node=34, label=\"another clade\", align=T, geom='label', fill='lightblue')\nggtree(tree, layout=\"daylight\") + \n  geom_cladelabel(node=35, label=\"test label\", angle=0, \n                  fontsize=8, offset=.5, vjust=.5)  + \n  geom_cladelabel(node=55, label='another clade', \n                  angle=-95, hjust=.5, fontsize=8)\np + geom_tiplab() + \n  geom_strip('t10', 't30', barsize=2, color='red', \n            label=\"associated taxa\", offset.text=.1) + \n  geom_strip('t1', 't18', barsize=2, color='blue', \n            label = \"another label\", offset.text=.1)"},{"path":"chapter5.html","id":"highlight-clades","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.2 Highlight clades","text":"ggtree implements geom_hilight layer, accepts internal node number add layer rectangle highlight selected clade Figure (5.4).8The geom_hilight layer also support highlighting clades unrooted layout trees round (‚Äòencircle‚Äô) rectangular (‚Äòrect‚Äô) shape (Figure 5.4C).Another way highlight selected clades setting clades different colors /line types demonstrated Figure 6.2.addition geom_hilight, ggtree also implements geom_balance\ndesigned highlight neighboring subclades given internal node (Figure 5.4D).geom_hilight layer supports using aesthetic mapping automatically highlight clades demonstrated Figure 5.4E 5.4F.\nFigure 5.4: Highlight selected clades. Rectangular layout (), circular/fan (B) unrooted layouts. Highlight neighboring subclades simultaneously (D). Highlight selected clades using associated data (E F).\n","code":"\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\nggtree(tree) + geom_hilight(node=21, fill=\"steelblue\", alpha=.6) +\n    geom_hilight(node=17, fill=\"darkgreen\", alpha=.6) \nggtree(tree, layout=\"circular\") + geom_hilight(node=21, fill=\"steelblue\", alpha=.6) +\n    geom_hilight(node=23, fill=\"darkgreen\", alpha=.6)\n## type can be 'encircle' or 'rect'\npg + geom_hilight(node=55) + \n  geom_hilight(node=35, fill='darkgreen', type=\"rect\")\nggtree(tree) +\n  geom_balance(node=16, fill='steelblue', color='white', alpha=0.6, extend=1) +\n  geom_balance(node=19, fill='darkgreen', color='white', alpha=0.6, extend=1) \n## using external data\nd <- data.frame(node=c(17, 21), type=c(\"A\", \"B\"))\nggtree(tree) + geom_hilight(data=d, aes(node=node, fill=type))\n\n## using data stored in tree object\nx <- read.nhx(system.file(\"extdata/NHX/ADH.nhx\", package=\"treeio\"))\nggtree(x) + geom_hilight(mapping=aes(subset = node %in% c(10, 12), fill = S)) +\n  scale_fill_manual(values=c(\"steelblue\", \"darkgreen\"))"},{"path":"chapter5.html","id":"taxa-connection","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.3 Taxa connection","text":"evolutionary events (e.g.¬†reassortment, horizontal gene transfer) modeled simple tree. ggtree provides geom_taxalink layer allows drawing straight curved lines two nodes tree, allow represent evolutionary events connecting taxa. works rectangular (Figure 5.5A), circular (Figure 5.5B) inward circular (Figure 5.5C) layouts.geom_taxalink layout supports aesthetic mapping, requires data.frame stored association information /without meta data input (Figure 5.5D).\nFigure 5.5: Linking related taxa. can used indicate evolutionary events reassortment horizontal gene transfer.\n","code":"\np1 <- ggtree(tree) + geom_tiplab() + geom_taxalink(taxa1='A', taxa2='E') + \n  geom_taxalink(taxa1='F', taxa2='K', color='red', linetype = 'dashed',\n    arrow=arrow(length=unit(0.02, \"npc\")))\n\np2 <- ggtree(tree, layout=\"circular\") + \n      geom_taxalink(taxa1='A', taxa2='E', color=\"grey\", alpha=0.5, offset=0.05,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) + \n      geom_taxalink(taxa1='F', taxa2='K', color='red', linetype = 'dashed', alpha=0.5, offset=0.05,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_taxalink(taxa1=\"L\", taxa2=\"M\", color=\"blue\", alpha=0.5, offset=0.05,\n                    hratio=0.8, arrow=arrow(length=unit(0.01, \"npc\"))) + \n      geom_tiplab()\n\n# when the tree was created using reverse x, \n# we can set outward to FALSE, which will generate the inward curve lines.\np3 <- ggtree(tree, layout=\"inward_circular\", xlim=150) +\n      geom_taxalink(taxa1='A', taxa2='E', color=\"grey\", alpha=0.5, offset=-0.2, \n                    outward=FALSE,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_taxalink(taxa1='F', taxa2='K', color='red', linetype = 'dashed', alpha=0.5, offset=-0.2,\n                    outward=FALSE,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_taxalink(taxa1=\"L\", taxa2=\"M\", color=\"blue\", alpha=0.5, offset=-0.2, \n                    outward=FALSE,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_tiplab(hjust=1) \n\ndat <- data.frame(from=c(\"A\", \"F\", \"L\"), \n                  to=c(\"E\", \"K\", \"M\"), \n                  h=c(1, 1, 0.1), \n                  type=c(\"t1\", \"t2\", \"t3\"), \n                  s=c(2, 1, 2))\np4 <- ggtree(tree, layout=\"inward_circular\", xlim=c(150, 0)) +\n          geom_taxalink(data=dat, \n                         mapping=aes(taxa1=from, \n                                     taxa2=to, \n                                     color=type, \n                                     size=s), \n                         ncp=10,\n                         offset=0.15) + \n          geom_tiplab(hjust=1) +\n          scale_size_continuous(range=c(1,3))\ncowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])"},{"path":"chapter5.html","id":"uncertainty-of-evolutionary-inference","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.4 Uncertainty of evolutionary inference","text":"geom_range layer supports displaying interval (highest posterior density, confidence interval, range) horizontal bars tree nodes. center interval anchor corresponding node. center default mean value interval (Figure 5.6A). can set center estimated mean median value (Figure 5.6B), observed value. tree branch interval may scale, ggtree provides scale_x_range add second x axis range (Figure 5.6C). Note x axis disable default theme need enable want dispaly (e.g. theme_tree2).\nFigure 5.6: Displaying uncertainty evolutoinary inference. center (mean value range () estimated value (B)) anchor tree nodes. second x axis used range scaling (C).\n","code":"file <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree.nex\", package = \"treeio\")\nx <- read.mega(file)\np1 <- ggtree(x) + geom_range('reltime_0.95_CI', color='red', size=3, alpha=.3)\np2 <- ggtree(x) + geom_range('reltime_0.95_CI', color='red', size=3, alpha=.3, center='reltime')  \np3 <- p2 + scale_x_range() + theme_tree2()"},{"path":"chapter5.html","id":"tree-annotation-with-output-from-evolution-software","chapter":"5 Phylogenetic Tree Annotation","heading":"5.3 Tree annotation with output from evolution software","text":"","code":""},{"path":"chapter5.html","id":"tree-annotation-using-data-from-evolutionary-analysis-software","chapter":"5 Phylogenetic Tree Annotation","heading":"5.3.1 Tree annotation using data from evolutionary analysis software","text":"Chapter 1 introduced using treeio package (Wang et al. 2020) parse different tree formats commonly used software outputs obtain phylogeny-associated data. imported data S4 objects can visualized directly using ggtree. Figure 5.1 demonstrates tree annotated using information (species classification, duplication event bootstrap value) stored NHX file. PHYLDOG RevBayes output NHX files can parsed treeio visualized ggtree annotation using inference data.Furthermore, evolutionary data inference BEAST, MrBayes RevBayes, dN/dS values inferred CodeML, ancestral sequences inferred HyPhy, CodeML BaseML short read placement EPA pplacer can used annotate tree directly.\nFigure 5.7: Annotating BEAST tree length_95%_HPD posterior. Branch length credible intervals (95% HPD) displayed red horizontal bars clade posterior values shown middle branches.\nFigure 5.7, tree visualized annotated posterior > 0.9 demonstrated length uncertainty (95% Highest Posterior Density (HPD) interval).Ancestral sequences inferred HyPhy can parsed using treeio, whereas substitutions along tree branch automatically computed stored inside phylogenetic tree object (.e., S4 object). ggtree can utilize information object annotate tree, demonstrated Figure 5.8.\nFigure 5.8: Annotating tree amino acid substitution determined ancestral sequences inferred HYPHY. Amino acid substitutions displayed middle branches.\nPAML‚Äôs BaseML CodeML can also used infer ancestral sequences, whereas CodeML can infer selection pressure. parsing information using treeio, ggtree can integrate information tree structure used annotation illustrated Figure 5.9.\nFigure 5.9: Annotating tree animo acid substitution dN/dS inferred CodeML. Branches rescaled colored dN/dS values amino acid substitutions displayed middle branches.\ntree data parsed treeio can used visualize annotate phylogenetic tree using ggtree, also tree tree-like objects defined R community supported. ggtree plays unique role R ecosystem facilitate phylogenetic analysis can easily integrated packages pipelines. details, please refer chapter 9. addition direct support tree objects, ggtree also allow users plot tree different types external data (see also chapter 7 (Yu et al. 2018)).","code":"\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nggtree(beast, aes(color=rate))  +\n    geom_range(range='length_0.95_HPD', color='red', alpha=.6, size=2) +\n    geom_nodelab(aes(x=branch, label=round(posterior, 2)), vjust=-.5, size=3) +\n    scale_color_continuous(low=\"darkgreen\", high=\"red\") +\n    theme(legend.position=c(.1, .8))\nnwk <- system.file(\"extdata/HYPHY\", \"labelledtree.tree\", \n                   package=\"treeio\")\nancseq <- system.file(\"extdata/HYPHY\", \"ancseq.nex\", \n                      package=\"treeio\")\ntipfas <- system.file(\"extdata\", \"pa.fas\", package=\"treeio\")\nhy <- read.hyphy(nwk, ancseq, tipfas)\nggtree(hy) + \n  geom_text(aes(x=branch, label=AA_subs), size=2, \n            vjust=-.3, color=\"firebrick\")\nrstfile <- system.file(\"extdata/PAML_Codeml\", \"rst\", \n                       package=\"treeio\")\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", \n                       package=\"treeio\")\nml <- read.codeml(rstfile, mlcfile)\nggtree(ml, aes(color=dN_vs_dS), branch.length='dN_vs_dS') + \n  scale_color_continuous(name='dN/dS', limits=c(0, 1.5),\n                         oob=scales::squish,\n                         low='darkgreen', high='red') +\n  geom_text(aes(x=branch, label=AA_subs), \n            vjust=-.5, color='steelblue', size=2) +\n  theme_tree2(legend.position=c(.9, .3))"},{"path":"chapter5.html","id":"summary5","chapter":"5 Phylogenetic Tree Annotation","heading":"5.4 Summary","text":"ggtree package implements grammar graphics annotating phylogenetic trees. Users can use ggplot2 syntax combine different annotation layers produce complex tree annotation. familiar ggplot2, tree annotation high level customization can intuitive flexible using ggtree.","code":""},{"path":"chapter6.html","id":"chapter6","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6 Visual Exploration of Phylogenetic Tree","text":"ggtree (Yu et al. 2017) supports many ways manipulating tree visually, including viewing selected clade explore large tree (Figure 6.1), taxa clustering (Figure 6.5), rotating clade tree (Figure 6.6B 6.8), zoom collapsing clades (Figure 6.3A 6.2), etc.. Details tree manipulation functions summarized Table 6.1.\nTable 6.1: Tree manipulation functions.\n","code":""},{"path":"chapter6.html","id":"viewing-selected-clade","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6.1 Viewing Selected Clade","text":"clade monophyletic group contains single ancestor descendants. can visualize specific selected clade via viewClade function demonstrated Figure 6.1B. Another solution extract selected clade new tree object described session 2.5. functions developed help users exploring large tree.\nFigure 6.1: Viewing selected clade tree. example tree used demonstrate ggtree support exploring manipulating phylogenetic tree visually (). ggtree supports visualizing selected clade (B). clade can selected specifying node number determined recent common ancestor selected tips.\nfunctions, e.g. viewClade, work clade accept parameter internal node number. get internal node number, user can use MRCA() function (Figure 6.1) providing two taxa names. function return node number input taxa‚Äôs recent common ancestor (MRCA). works tree graphic (.e. ggtree() output) object. tidytree also provide MRCA function extract information MRCA node (see details session 2.1.3).","code":"\nlibrary(ggtree)\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\np <- ggtree(tree) + geom_tiplab()\nviewClade(p, MRCA(p, \"I\", \"L\"))"},{"path":"chapter6.html","id":"scale-clade","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6.2 Scaling Selected Clade","text":"ggtree provides another option zoom (compress) clades via scaleClade function. way, retain topology branch lengths compressed clades. helps save space highlight clades primary interest study.\nFigure 6.2: Scaling selected clade. Clades can zoom (scale > 1) highlight zoom save space.\nusers want emphasize important clades, can use scaleClade function scale parameter larger 1. selected clade zoomed . Users can also use groupClade select clades color different colors shown Figure 6.2.","code":"\ntree2 <- groupClade(tree, c(17, 21))\np <- ggtree(tree2, aes(color=group)) + theme(legend.position='none') +\n  scale_color_manual(values=c(\"black\", \"firebrick\", \"steelblue\"))\nscaleClade(p, node=17, scale=.1) "},{"path":"chapter6.html","id":"collapsing-and-expanding-clade","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6.3 Collapsing and Expanding Clade","text":"common practice prune collapse clades certain aspects tree can emphasized. ggtree supports collapsing selected clades using collapse function shown Figure 6.3A.\nFigure 6.3: Collapsing selected clades expanding collapsed clades. Clades can selected collapse () collapsed clades can expanded back (B) necessary ggtree stored information species relationships. Green red symbols displayed tree indicate collapsed clades.\ntwo clades collapsed labelled green circle red square symbolic points. Collapsing common strategy collapse clades large displaying full primary interest study. ggtree, can expand (.e., uncollapse) collapsed branches back expand function show details species relationships demonstrated Figure 6.3B.Triangles often used represent collapsed clade ggtree also supports . collapse function provides ‚Äúmode‚Äù parameter, default ‚Äúnone‚Äù selected clade collapsed ‚Äútip‚Äù. User can specify mode ‚Äúmax‚Äù (Figure 6.4A), ‚Äúmin‚Äù (Figure 6.4B) ‚Äúmixed‚Äù (Figure 6.4C).can pass additional parameter set color transparency triangles (Figure 6.4D).can combine scaleClade collapse zoom /triangles (Figure 6.4E).\nFigure 6.4: Collapse clade triangle. ‚Äòmax‚Äô takes position distant tip (). ‚Äòmin‚Äô takes position closest tip (B). ‚Äòmixed‚Äô takes positions closest distant tips (C), looks like shape clade. Set color, fill alpha triangles (D). Combine scaleClade zoom triangle save space (E).\n","code":"\np2 <- p %>% collapse(node=21) + \n  geom_point2(aes(subset=(node==21)), shape=21, size=5, fill='green')\np2 <- collapse(p2, node=23) + \n  geom_point2(aes(subset=(node==23)), shape=23, size=5, fill='red')\nprint(p2)\nexpand(p2, node=23) %>% expand(node=21)\np2 <- p + geom_tiplab()\nnode <- 21\ncollapse(p2, node, 'max') %>% expand(node)\ncollapse(p2, node, 'min') %>% expand(node)\ncollapse(p2, node, 'mixed') %>% expand(node)\ncollapse(p, 21, 'mixed', fill='steelblue', alpha=.4) %>% \n  collapse(23, 'mixed', fill='firebrick', color='blue')\nscaleClade(p, 23, .2) %>% collapse(23, 'min', fill=\"darkgreen\")  "},{"path":"chapter6.html","id":"group-taxa-vis","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6.4 Grouping Taxa","text":"groupClade function assigns branches nodes different clades different groups. groupClade accepts internal node vector internal nodes cluster clade/clades.Similarly, groupOTU function assigns branches nodes different groups based user-specified groups operational taxonomic units (OTUs) necessarily within clade, can monophyletic (clade), polyphyletic paraphyletic. accepts vector OTUs (taxa name) list OTUs trace back OTUs recent common ancestor (MRCA) cluster together demonstrated Figure 6.5.phylogenetic tree can annotated mapping different line type, size, color shape branches nodes assigned different groups.\nFigure 6.5: Grouping OTUs. OTU clustering based relationships. Selected OTUs ancestors upto MRCA clustered together.\ncan grouping taxa tree level. following code produce identical figure Figure 6.5 (see details described session 2.2.3).","code":"\ndata(iris)\nrn <- paste0(iris[,5], \"_\", 1:150)\nrownames(iris) <- rn\nd_iris <- dist(iris[,-5], method=\"man\")\n\ntree_iris <- ape::bionj(d_iris)\ngrp <- list(setosa     = rn[1:50],\n            versicolor = rn[51:100],\n            virginica  = rn[101:150])\n\np_iris <- ggtree(tree_iris, layout = 'circular', branch.length='none')\ngroupOTU(p_iris, grp, 'Species') + aes(color=Species) +\n  theme(legend.position=\"right\")\ntree_iris <- groupOTU(tree_iris, grp, \"Species\")\nggtree(tree_iris, aes(color=Species), layout = 'circular', branch.length = 'none') + \n  theme(legend.position=\"right\")"},{"path":"chapter6.html","id":"exploring-tree-structure","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6.5 Exploring tree structure","text":"facilitate exploring tree structure, ggtree supports rotating selected clade 180 degree using rotate() function (Figure 6.6B). Position immediate descendant clades internal node can exchanged via flip() function (Figure 6.6C).\nFigure 6.6: Exploring tree structure. clade (indicated darkgreen circle) tree () can rotated 180¬∞ (B) positions immediate descedant clades (colored blue red) can exchanged (C).\ntree manipulation functions working clades, ggtree also provides functions manipulate tree, including open_tree() transform tree either rectangular circular layout fan layout, rotate_tree() function rotate tree specific angle circular fan layouts, demonstrated Figure 6.7 6.8.\nFigure 6.7: Transforming tree fan layout. tree can transformed fan layout open_tree specific angle parameter.\n\nFigure 6.8: Rotating tree. circular/fan layout tree can rotated specific angle.\nfollowing example traverse internal nodes rotate one one (Figure 6.9).\nFigure 6.9: Traverse rotate clades.\nFigure 6.10 demonstrates usage open_tree different open angles.\nFigure 6.10: Open tree different angles.\nFigure 6.11 illustrates rotating tree different angles.\nFigure 6.11: Rotate tree different angles.\nInteractive tree manipulation also possible via identify methods.","code":"\np1 <- p + geom_point2(aes(subset=node==16), color='darkgreen', size=5)\np2 <- rotate(p1, 17) %>% rotate(21)\nflip(p2, 17, 21)\np3 <- open_tree(p, 180) + geom_tiplab()\nprint(p3)\nrotate_tree(p3, 180)\nset.seed(2016-05-29)\nx <- rtree(50)\np <- ggtree(x) + geom_tiplab()\nfor (n in reorder(x, 'postorder')$edge[,1] %>% unique) {\n    p <- rotate(p, n)\n    print(p + geom_point2(aes(subset=(node == n)), color='red'))\n}\nset.seed(123)\ntr <- rtree(50)\np <- ggtree(tr, layout='circular') + geom_tiplab()\n\nfor (angle in seq(0, 270, 10)) {\n    print(open_tree(p, angle=angle) + ggtitle(paste(\"open angle:\", angle)))\n}\nfor (angle in seq(0, 270, 10)) {\n    print(rotate_tree(p, angle) + ggtitle(paste(\"rotate angle:\", angle)))\n}"},{"path":"chapter6.html","id":"summary6","chapter":"6 Visual Exploration of Phylogenetic Tree","heading":"6.6 Summary","text":"ggtree provides set functions allow visually manipulating phylogenetic tree exploring tree structure associated data.","code":""},{"path":"chapter7.html","id":"chapter7","chapter":"7 Plotting tree with data","heading":"7 Plotting tree with data","text":"Integrating user data annotate phylogenetic tree can done different\nlevels. treeio package (Wang et al. 2020) implements full_join methods \ncombine tree data phylogenetic tree object.\ntidytree package supports linking tree data phylogeny\nusing tidyverse verbs.\nggtree package (Yu et al. 2018) supports mapping external data phylogeny \nvisualization annotation fly. Although feature linking external data overlapping among packages, different application scopes. example, addition treedata object, ggtree also supports several tree objects (see chapter 9), including phylo4d, phyloseq obkData designed contain domain specific data. design objects consider support linking external data object (can done tree object level). can visualize trees objects using ggtree link external data visualization level (Yu et al. 2018).ggtree provides two general methods mapping visualizing associated external data phylogenies. Method 1 allows external data mapped tree structure used visual characteristic tree data visualization. Method 2 plots data tree side side using different geometric functions reordering data based tree structure. two methods integrate data phylogeny exploration comparison evolutionary biology context.","code":""},{"path":"chapter7.html","id":"attach-operator","chapter":"7 Plotting tree with data","heading":"7.1 Mapping data to the tree structure","text":"ggtree, implemented operator, %<+%, attach annotation data ggtree graphic object. data contains column ‚Äúnode‚Äù first column taxa labels can integrated using %<+% operator. Multiple datasets can attached progressively. data attached, information stored data serve numerical/categorical node attributes can directly used visualize tree scaling attributes different colors line sizes, label tree using original values attributes parsing math expression, emoji silhouette image. following example uses %<+% operator integrat taxon (tip_data.csv) internal node (inode_data.csv) information map data different colors shapes symbolic points labels (Figure 7.1). tip data contains imageURL links online figures species, can parsed used tip labels ggtree (see chapter 8).\nFigure 7.1: Example attaching multiple datasets.\nAlthough data integrated %<+% operator ggtree tree visualization, data attached ggtree graphic object can converted treedata object contains tree attached data (see session 7.5).","code":"\nlibrary(ggimage)\nlibrary(ggtree)\n## url <- paste0(\"https://raw.githubusercontent.com/TreeViz/\",\n##             \"metastyle/master/design/viz_targets_exercise/\")\n\n## x <- read.tree(paste0(url, \"tree_boots.nwk\"))\n## info <- read.csv(paste0(url, \"tip_data.csv\"))\n\nx <- read.tree(\"data/tree_boots.nwk\")\ninfo <- read.csv(\"data/tip_data.csv\")\n\np <- ggtree(x) %<+% info + xlim(-.1, 4)\np2 <- p + geom_tiplab(offset = .6, hjust = .5) +\n    geom_tippoint(aes(shape = trophic_habit, color = trophic_habit, size = mass_in_kg)) + \n    theme(legend.position = \"right\") + scale_size_continuous(range = c(3, 10))\n\n## d2 <- read.csv(paste0(url, \"inode_data.csv\"))\nd2 <- read.csv(\"data/inode_data.csv\")\np2 %<+% d2 + geom_label(aes(label = vernacularName.y, fill = posterior)) + \n    scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, \"YlGnBu\"))"},{"path":"chapter7.html","id":"facet_plot","chapter":"7 Plotting tree with data","heading":"7.2 Aligning graph to the tree based on tree structure","text":"associating phylogenetic tree different type plot produced user‚Äôs data, ggtree provides geom_facet layer facet_plot function accept input data.frame geom layer draw input data. data displayed additional panel plot. geom_facet (facet_plot) general solution linking graphic layer tree. function internally re-orders input data based tree structure visualizes data specific panel geometric layer. Users free visualize several panels plot different types data demonstrated Figure 9.4 use different geometric layers plot dataset (Figure 13.1) different datasets panel.geom_facet designed work geom layers defined ggplot2 ggplot2-based packages. list geometric layers work seamlessly geom_facet facet_plot can found Table C.1. ggplot2 community keeps expanding geom layers implemented either ggplot2 extensions, geom_facet facet_plot gain power present data future. Note different geom layers can combined present data panel combinations different geom layers create possibility present complex data phylogeny (see also Figure 13.1 13.4). Detailed descriptions can found Supplemental File (Yu et al. 2018).\nFigure 7.2: Example plotting SNP trait data.\nCompanion functions adjust panel widths rename panel name described session 12.1. Removing panel name also possible example presented Figure 13.4. can also use cowplot patchwork create composite plots described session 7.6.geom_facet() (facet_plot()) internally used ggplot2::facet_grid() works cartesian coordinate system. align graph tree polar system (e.g.¬†circular fan layouts), developed another Bioconductor package, ggtreeExtra. ggtreeExtra package provides geom_fruit() layer works similar geom_facet() (details described Chapter 10).","code":"\nlibrary(ggtree)\n## remote_folder <- paste0(\"https://raw.githubusercontent.com/katholt/\",\n##                         \"plotTree/master/tree_example_april2015/\")\nremote_folder <- \"data/tree_example_april2015/\" \n\n## read the phylogenetic tree\ntree <- read.tree(paste0(remote_folder, \"tree.nwk\"))\n\n## read the sampling information data set\ninfo <- read.csv(paste0(remote_folder,\"info.csv\"))\n\n## read and process the allele table\nsnps<-read.csv(paste0(remote_folder, \"alleles.csv\"), header = F,\n                row.names = 1, stringsAsFactor = F)\nsnps_strainCols <- snps[1,] \nsnps<-snps[-1,] # drop strain names\ncolnames(snps) <- snps_strainCols\n\ngapChar <- \"?\"\nsnp <- t(snps)\nlsnp <- apply(snp, 1, function(x) {\n        x != snp[1,] & x != gapChar & snp[1,] != gapChar\n    })\nlsnp <- as.data.frame(lsnp)\nlsnp$pos <- as.numeric(rownames(lsnp))\nlsnp <- tidyr::gather(lsnp, name, value, -pos)\nsnp_data <- lsnp[lsnp$value, c(\"name\", \"pos\")]\n\n## read the trait data\nbar_data <- read.csv(paste0(remote_folder, \"bar.csv\"))\n\n## visualize the tree \np <- ggtree(tree) \n\n## attach the sampling information data set \n## and add symbols colored by location\np <- p %<+% info + geom_tippoint(aes(color=location))\n\n## visualize SNP and Trait data using dot and bar charts,\n## and align them based on tree structure\np + geom_facet(panel = \"SNP\", data = snp_data, geom = geom_point, \n               mapping=aes(x = pos, color = location), shape = '|') +\n    geom_facet(panel = \"Trait\", data = bar_data, geom = ggstance::geom_barh, \n                aes(x = dummy_bar_value, color = location, fill = location), \n                stat = \"identity\", width = .6) +\n    theme_tree2(legend.position=c(.05, .85))"},{"path":"chapter7.html","id":"gheatmap","chapter":"7 Plotting tree with data","heading":"7.3 Visualize tree with associated matrix","text":"gheatmap function designed visualize phylogenetic tree heatmap associated matrix (either numerical categorical). geom_facet general solution plotting data tree, including heatmap. gheatmap specifically designed plotting heatmap tree provides shortcut handling column labels color palette. Another difference geom_facet supports rectangular slanted tree layouts gheatmap supports rectangular, slanted circular (Figure 7.4) layouts.following example, visualized tree H3 influenza viruses associated genotype (Figure 7.3A).width parameter control width heatmap. supports another parameter offset controlling distance tree heatmap, instance allocate space tip labels.time-scaled tree, example, ‚Äôs often use x axis using theme_tree2. solution, heatmap just another layer change x axis. overcome issue, implemented scale_x_ggtree set x axis reasonable (Figure 7.3A).\nFigure 7.3: Example plotting matrix gheatmap.\n","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n\ngenotype_file <- system.file(\"examples/Genotype.txt\", package=\"ggtree\")\ngenotype <- read.table(genotype_file, sep=\"\\t\", stringsAsFactor=F)\ncolnames(genotype) <- sub(\"\\\\.$\", \"\", colnames(genotype))\np <- ggtree(beast_tree, mrsd=\"2013-01-01\") + \n    geom_treescale(x=2008, y=1, offset=2) + \n    geom_tiplab(size=2)\ngheatmap(p, genotype, offset=5, width=0.5, font.size=3, \n        colnames_angle=-45, hjust=0) +\n    scale_fill_manual(breaks=c(\"HuH3N2\", \"pdm\", \"trig\"), \n        values=c(\"steelblue\", \"firebrick\", \"darkgreen\"), name=\"genotype\")\np <- ggtree(beast_tree, mrsd=\"2013-01-01\") + \n    geom_tiplab(size=2, align=TRUE, linesize=.5) + \n    theme_tree2()\ngheatmap(p, genotype, offset=8, width=0.6, \n        colnames=FALSE, legend_title=\"genotype\") +\n    scale_x_ggtree() + \n    scale_y_continuous(expand=c(0, 0.3))"},{"path":"chapter7.html","id":"gheatmap-ggnewscale","chapter":"7 Plotting tree with data","heading":"7.3.1 Visualize tree with multiple associated matrix","text":"course, can use multiple gheatmap function call align several associated matrix tree, however, ggplot2 doesn‚Äôt allow us use multiple fill scales9.solve issue, can use ggnewscale create new fill scales. example using ggnewscale gheatmap.\nFigure 7.4: Example plotting matrix gheatmap.\n","code":"\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\n\ntree <- read.tree(nwk)\ncirc <- ggtree(tree, layout = \"circular\")\n\ndf <- data.frame(first=c(\"a\", \"b\", \"a\", \"c\", \"d\", \"d\", \"a\", \"b\", \"e\", \"e\", \"f\", \"c\", \"f\"),\n                 second= c(\"z\", \"z\", \"z\", \"z\", \"y\", \"y\", \"y\", \"y\", \"x\", \"x\", \"x\", \"a\", \"a\"))\nrownames(df) <- tree$tip.label\n\ndf2 <- as.data.frame(matrix(rnorm(39), ncol=3))\nrownames(df2) <- tree$tip.label\ncolnames(df2) <- LETTERS[1:3]\n\n\np1 <- gheatmap(circ, df, offset=.8, width=.2,\n               colnames_angle=95, colnames_offset_y = .25) +\n    scale_fill_viridis_d(option=\"D\", name=\"discrete\\nvalue\")\n\n\nlibrary(ggnewscale)\np2 <- p1 + new_scale_fill()\ngheatmap(p2, df2, offset=15, width=.3,\n         colnames_angle=90, colnames_offset_y = .25) +\n    scale_fill_viridis_c(option=\"A\", name=\"continuous\\nvalue\")"},{"path":"chapter7.html","id":"msaplot","chapter":"7 Plotting tree with data","heading":"7.4 Visualize tree with multiple sequence alignment","text":"msaplot accepts tree (output ggtree) fasta file, can visualize tree sequence alignment. can specify width (relative tree) alignment adjust relative position offset, similar gheatmap function.specific slice alignment can also displayed specifying window parameter.\nFigure 7.5: Example plotting multiple sequence alignment tree.\n","code":"\ntree <- read.tree(\"data/tree.nwk\")\np <- ggtree(tree) + geom_tiplab(size=3)\nmsaplot(p, \"data/sequence.fasta\", offset=3, width=2)\np <- ggtree(tree, layout='circular') + \n    geom_tiplab(offset=4, align=TRUE) + xlim(NA, 12)\nmsaplot(p, \"data/sequence.fasta\", window=c(120, 200))  "},{"path":"chapter7.html","id":"composite_plot","chapter":"7 Plotting tree with data","heading":"7.5 Composite plots","text":"addition aligning graph tree using geom_facet special cases using gheatmap msaplot, users can use cowplot, patchwork, gtable10 packages create composite plots. However, extra efforts needs done make sure plots aligned properly. get_taxa_name() function quite useful users re-order data based tree structure. remove obstacle, created R package aplot can re-order internal data ‚Äòggplot‚Äô object create composite plots align properly tree.following example, tree two associated datasets.align using cowplot, composite plots aligned properly anticipated (Figure 7.6A).Using aplot, dirty works us subplots aligned properly demonstrated Figure 7.6B.\nFigure 7.6: Example aligning tree data side side create composite plot. cowplot aligns subplots (), aplot extra works make sure tree associated subplots properly ordered according tree structure (B). Note: ‚Äò‚Äô category bar plot matched tree removed.\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\n\nset.seed(2019-10-31)\ntr <- rtree(10)\n\nd1 <- data.frame(\n    # only some labels match\n    label = c(tr$tip.label[sample(5, 5)], \"A\"),\n    value = sample(1:6, 6))\n\nd2 <- data.frame(\n    label = rep(tr$tip.label, 5),\n    category = rep(LETTERS[1:5], each=10),\n    value = rnorm(50, 0, 3)) \n\ng <- ggtree(tr) + geom_tiplab(align=TRUE)\np1 <- ggplot(d1, aes(label, value)) + geom_col(aes(fill=label)) + \n    geom_text(aes(label=label, y= value+.1)) +\n    coord_flip() + theme_tree2() + theme(legend.position='none')\n \np2 <- ggplot(d2, aes(x=category, y=label)) + \n    geom_tile(aes(fill=value)) + scale_fill_viridis_c() + \n    theme_tree2() \ncowplot::plot_grid(g, p2, p1, ncol=3) \nlibrary(aplot)\np2 %>% insert_left(g) %>% insert_right(p1, width=.5) "},{"path":"chapter7.html","id":"ggtree_object","chapter":"7 Plotting tree with data","heading":"7.6 The ggtree object","text":"finished.","code":""},{"path":"chapter7.html","id":"summary7","chapter":"7 Plotting tree with data","heading":"7.7 Summary","text":"Although many software packages support visualizing phylogenetic tree, plotting tree data often missing limited supports. packages defines S4 classes store phylogenetic tree domain specific data, OutbreakTools (Jombart et al. 2014) defined obkData storing tree epidemiology data phyloseq (McMurdie Holmes 2013) defines phyloseq storing tree microbiome data. packages capable present data stored object tree. However, associated data supported. example, species abundance stored phyloseq object supported visualized using phyloseq package. packages provide utilities integrate external data tree visualization. None packages support visualizing external data align plot tree based tree structure.ggtree provides general solutions integrating data. Method 1, %<+% operator, can integrate external internal node data map data visual characteristic visualize tree datasets used geom_facet. Method 2, geom_facet layer, restriction input data long geom function available plot data (e.g. species abundance displayed geom_density_ridges demonstrated Figure 9.4). Users free combine different panels combine different geom layers panel (Figure 13.1). ggtree many unique features found implementations:Integrating node/edge data tree can mapped visual characteristics tree datasets (Figure ).Capable parsing expression (math symbols text formatting), emoji image files (chapter 8).predefined input data types data plotted geom_facet (Table C.1).Combining different geom functions visualize associated data supported (Figure 13.1).Visualizing different datasets panel supported.Data integrated %<+% can used geom_facet.Able add annotation specific layers.Modular design separating tree visualization, data integration (method 1) graph alignment (method 2).Modular design unique feature ggtree stand packages. tree can visualized data stored tree object external data linked %<+% operator, fully annotated multiple layers annotations (Figure 7.1 13.1), passing geom_facet. geom_facet can called progressively add multiple panels multiple layers panels (Figure 13.1). creates possiblity plotting full annotated tree complex data panels contains multiple graphic layers.ggtree fits R ecosystem extends abilities integrating presenting data trees existing phylogenetic packages. demonstrated Figure 9.4, able plot species abundance distributions phyloseq object. easily done without ggtree. ggtree, able attach additional data tree objects using %<+% align graph tree using geom_facet. Integrating ggtree existing workflows definitely extends abilities broadens applications present phylogeny-associated data, especially comparative studies.","code":""},{"path":"chapter8.html","id":"chapter8","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8 Annotating Tree with Silhouette Images and Sub-plots","text":"","code":""},{"path":"chapter8.html","id":"ggimage","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.1 Annotating Tree with Images","text":"usually use text label taxa, .e. displaying taxa names. text image file name (either local remote), ggtree can read image display actual image label taxa (Figure 8.1). geom_tiplab geom_nodelab capable render silhouette image internally called ggimage package.Online tools iTOL (Letunic Bork 2007) EvolView (et al. 2016) support displaying subplots phylogenetic tree. However bar pie charts supported tools. Users may want visualize node-associated data visualization methods, violin plot (Grubaugh et al. 2017), venn diagram (Lott et al. 2015), sequence logo etc, display tree. ggtree, kinds subplots supported can export subplots image files use label corresponding nodes tree.\nFigure 8.1: Labelling taxa images.\n","code":"\nlibrary(ggimage)\nlibrary(ggtree)\n\nnwk <- \"((((bufonidae, dendrobatidae), ceratophryidae), (centrolenidae, leptodactylidae)), hylidae);\"\n\nx = read.tree(text = nwk)\nggtree(x) + xlim(NA, 7) + ylim(NA, 6.2) +\n    geom_tiplab(aes(image=paste0(\"img/frogs/\", label, '.jpg')), \n                geom=\"image\", offset=2, align=2, size=.2)  + \n    geom_tiplab(geom='label', offset=1, hjust=.5) + \n    geom_image(x=.8, y=5.5, image=\"img/frogs/frog.jpg\", size=.2)"},{"path":"chapter8.html","id":"phylopic","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.2 Annotating Tree with Phylopic","text":"Phylopic contains 3200 silhouettes covers almost life forms. ggtree also supports using phylopic11 annotate tree. importantly, can color image using numerical/categorical variable.ggimage package supports querying phylopic uid scientific name, handy annotating tree phylopic.\nFigure 8.2: Labelling taxa phylopic images. ggtree automatically download phylopic figures querying provided UID. figures can colored using numerical categorical values.\n","code":"\nlibrary(ggtree)\nnewick <- \"((Pongo_abelii,(Gorilla_gorilla_gorilla,(Pan_paniscus,Pan_troglodytes)Pan,Homo_sapiens)Homininae)Hominidae,Nomascus_leucogenys)Hominoidea;\"\n\ntree <- read.tree(text=newick)\n\nd <- ggimage::phylopic_uid(tree$tip.label)\nd$body_mass = c(52, 114, 47, 45, 58, 6)\n\np <- ggtree(tree) %<+% d + \n  geom_tiplab(aes(image=uid, colour=body_mass), geom=\"phylopic\", offset=2.5) +\n  geom_tiplab(aes(label=label), offset = .2) + xlim(NA, 7) +\n  scale_color_viridis_c()"},{"path":"chapter8.html","id":"subplots","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3 Annotating Tree with Sub-plots","text":"ggtree provides layer, geom_inset, adding subplots phylogenetic tree. input named list ggplot graphic objects (can kind charts). objects named node numbers. Users can also use ggplotify convert plots generated functions (even implemented base graphics) ggplot objects, can used geom_inset. facilitate adding bar pie charts (e.g.¬†summarized stats results ancestral reconstruction) phylogenetic tree, ggtree provides nodepie nodebar functions create list pie bar charts.","code":""},{"path":"chapter8.html","id":"annotate-with-bar-charts","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3.1 Annotate with bar charts","text":"\nFigure 8.3: Annotate internal nodes barplots.\nx position can one ‚Äònode‚Äô ‚Äòbranch‚Äô can adjusted parameter hjust vjust horizontal vertical adjustment respectively.","code":"\nlibrary(phytools)\ndata(anoletree)\nx <- getStates(anoletree,\"tips\")\ntree <- anoletree\n\ncols <- setNames(palette()[1:length(unique(x))],sort(unique(x)))\nfitER <- ape::ace(x,tree,model=\"ER\",type=\"discrete\")\nancstats <- as.data.frame(fitER$lik.anc)\nancstats$node <- 1:tree$Nnode+Ntip(tree)\n\n## cols parameter indicate which columns store stats\nbars <- nodebar(ancstats, cols=1:6)\nbars <- lapply(bars, function(g) g+scale_fill_manual(values = cols))\n\ntree2 <- full_join(tree, data.frame(label = names(x), stat = x ), by = 'label')\np <- ggtree(tree2) + geom_tiplab() +\n    geom_tippoint(aes(color = stat)) + \n    scale_color_manual(values = cols) +\n    theme(legend.position = \"right\") + \n    xlim(NA, 8)\np + geom_inset(bars, width = .08, height = .05, x = \"branch\") "},{"path":"chapter8.html","id":"annotate-with-pie-charts","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3.2 Annotate with pie charts","text":"Similarly, users can use nodepie function generate list pie charts place charts annotate corresponding nodes. nodebar nodepie accepts parameter alpha allow transparency.\nFigure 8.4: Annotate internal nodes pie plots.\n","code":"\npies <- nodepie(ancstats, cols = 1:6)\npies <- lapply(pies, function(g) g+scale_fill_manual(values = cols))\np + geom_inset(pies, width = .1, height = .1) "},{"path":"chapter8.html","id":"annotate-with-other-types-of-charts","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3.3 Annotate with other types of charts","text":"inset function accepts list ggplot graphic objects input objects restricted pie bar charts. can kinds charts hybrid charts.\nFigure 8.5: Annotate internal nodes different types subplots (bar pie).\n","code":"\npies_and_bars <- pies\ni <- sample(length(pies), 20)\npies_and_bars[i] <- bars[i]\np + geom_inset(pies_and_bars, width=.08, height=.05)"},{"path":"chapter8.html","id":"phylomoji","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4 Have Fun with Phylomoji","text":"#phylomoji fun internally supported ggtree since 201512., use ggtree recreate figure:\nFigure 8.6: Parsing label emoji. Text (e.g. node tip labels) can parsed emoji.\nNote output may depends emoji fonts installed system13.ggtree, easy generate phylomoji. emoji treated text, like abc. can use emojis label taxa, clade, color rotate emoji given color angle. functionality internally supported emojifont package.","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\n\ntt = '((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));'\ntree = read.tree(text = tt)\nd <- data.frame(label = c('snail','mushroom', 'sunflower',\n                          'evergreen_tree','leaves', 'green_salad'),\n                group = c('animal', 'fungi', 'flowering plant',\n                          'conifers', 'ferns', 'mosses'))\n\nggtree(tree, linetype = \"dashed\", size=1, color='firebrick') %<+% d + \n  xlim(0, 4.5) + ylim(0.5, 6.5) +\n  geom_tiplab(parse=\"emoji\", size=15, vjust=.25) +\n  geom_tiplab(aes(label = group), geom=\"label\", x=3.5, hjust=.5)"},{"path":"chapter8.html","id":"emoji-in-circularfan-layout-tree","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.1 Emoji in circular/fan layout tree","text":"\nFigure 8.7: Phylomoji cirular fan layouts.\nAnother example using ggtree emojifont produce phylogeny plant emojis can found https://github.com/ghuertaramos/PlantPhylomoji.","code":"\np <- ggtree(tree, layout = \"circular\", size=1) +  \n  geom_tiplab(parse=\"emoji\", size=10, vjust=.25)\nprint(p)\n\n## fan layout  \np2 <- open_tree(p, angle=200) \nprint(p2)\n\np2 %>% rotate_tree(-90)"},{"path":"chapter8.html","id":"emoji-to-label-clades","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.2 Emoji to label clades","text":"\nFigure 8.8: Emoji label clades.\n","code":"\nset.seed(123)\ntr <- rtree(30)\n\nggtree(tr) + xlim(NA, 5.2) +\n    geom_cladelabel(node=41, label=\"chicken\", parse=\"emoji\",\n                    fontsize=12, align=TRUE, colour=\"firebrick\") +\n    geom_cladelabel(node=53, label=\"duck\", parse=\"emoji\",\n                    fontsize=12, align=TRUE, colour=\"steelblue\") +\n    geom_cladelabel(node=48, label=\"family\", parse=\"emoji\",\n                    fontsize=12, align=TRUE, colour=\"darkkhaki\")"},{"path":"chapter8.html","id":"apple-color-emoji","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.3 Apple Color Emoji","text":"Although R‚Äôs graphical devices don‚Äôt support  AppleColorEmoji font, ‚Äôs still possible use . can export plot svg file render Safari.\nFigure 8.9: Use Apple Color Emoji ggtree.\n","code":"\nlibrary(ggtree)\ntree_text <- \"(((((cow, (whale, dolphin)), (pig2, boar)), camel), fish), seedling);\"\nx <- read.tree(text=tree_text)\nlibrary(ggimage)\nlibrary(gridSVG)\np <-  ggtree(x, size=2) + geom_tiplab(size=20, parse='emoji') +\n    xlim(NA, 7) + ylim(NA, 8.5) +\n    geom_phylopic(image=\"79ad5f09-cf21-4c89-8e7d-0c82a00ce728\",\n                  color=\"firebrick\", alpha = .3, size=Inf)\n\np\nps = grid.export(\"emoji.svg\", addClass=T)"},{"path":"chapter8.html","id":"phylomoji-in-ascii-art","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.4 Phylomoji in ASCII art","text":"also possible, please refer Appendix D details.","code":""},{"path":"chapter9.html","id":"chapter9","chapter":"9 ggtree for other tree-like objects","heading":"9 ggtree for other tree-like objects","text":"","code":""},{"path":"chapter9.html","id":"ggtree-for-phylogenetic-tree-objects","chapter":"9 ggtree for other tree-like objects","heading":"9.1 ggtree for phylogenetic tree objects","text":"treeio packages (Wang et al. 2020) allows parsing evolutionary inferences number software outputs linking external data tree structure. serves infrastructure bring evolutionary data R community. ggtree package (Yu et al. 2017) works seamlessly treeio visualize tree associated data annotate tree. ggtree package general tool tree visualization annotation fits ecosystem R packages. S3/S4 tree objects defined R packages also supported ggtree, including phylo(session 4.2), multiPhylo (session 4.4), phylo4, phylo4d, phyloseq obkData. ggtree, able generate complex tree graph possible easy packages. example, visualization phyloseq object Figure 9.4 supported phyloseq package. ggtree package also extend possibility linking external data tree object (Yu et al. 2018).","code":""},{"path":"chapter9.html","id":"phylobase","chapter":"9 ggtree for other tree-like objects","heading":"9.1.1 The phylo4 and phylo4d objects","text":"phylo4 phylo4d defined phylobase package. phylo4 object S4 version phylo, phylo4d extends phylo4 data frame contains trait data. phylobase package provides plot method, internally calls treePlot function, display tree data. However restrictions plot method, can plot numeric values tree-associated data bubbles generate figure legend. Phylobase doesn‚Äôt implement visualization method display categorical values. Using associated data visual characteristics color, size shape, also supported. Although possible color tree using associated data, requires users extract data map color vector manually follow passing color vector plot method. tedious error-prone since order color vector needs consistent edge list stored object.ggtree package supports phylo4d object associated data stored phylo4d object can used directly annotate tree (Fig. ).\nFigure 9.1: Visualizing phylo4d data using ggtree.\n","code":"\nlibrary(phylobase)\ndata(geospiza_raw)\ng1 <- as(geospiza_raw$tree, \"phylo4\")\ng2 <- phylo4d(g1, geospiza_raw$data, missing.data=\"warn\")\n\nd1 <- data.frame(x = seq(0.93, 1.15, length.out = 5),\n                lab = names(geospiza_raw$data))\n\nggtree(g2) + geom_tippoint(aes(size = wingL), x = d1$x[1], shape = 1) + \n    geom_tippoint(aes(size = tarsusL), x = d1$x[2], shape = 1) + \n    geom_tippoint(aes(size = culmenL), x = d1$x[3], shape = 1) + \n    geom_tippoint(aes(size = beakD),   x = d1$x[4], shape = 1) + \n    geom_tippoint(aes(size = gonysW),  x = d1$x[5], shape = 1) + \n    scale_size_continuous(range = c(3,12), name=\"\") + \n    geom_text(aes(x = x, y = 0, label = lab), data = d1, angle = 90) +\n    geom_tiplab(offset = .3) + xlim(0, 1.3) +\n    theme(legend.position = c(.1, .75))  "},{"path":"chapter9.html","id":"phylog","chapter":"9 ggtree for other tree-like objects","heading":"9.1.2 The phylog object","text":"phylog defined ade4 package. package designed analyzing ecological data provides newick2phylog, hclust2phylog taxo2phylog functions create phylogeny Newick string, hierarchical clustering result taxonomy. phylog object also supported ggtree demonstrated Figure 9.2.\nFigure 9.2: Visualizing phylog tree object.\n","code":"\nlibrary(ade4)\ndata(taxo.eg)\ntax <- as.taxo(taxo.eg[[1]])\nprint(tax)##       genre famille ordre\n## esp3     g1    fam1  ORD1\n## esp1     g1    fam1  ORD1\n## esp2     g1    fam1  ORD1\n## esp4     g1    fam1  ORD1\n## esp5     g1    fam1  ORD1\n## esp6     g1    fam1  ORD1\n## esp7     g1    fam1  ORD1\n## esp8     g2    fam2  ORD2\n## esp9     g3    fam2  ORD2\n## esp10    g4    fam3  ORD2\n## esp11    g5    fam3  ORD2\n## esp12    g6    fam4  ORD2\n## esp13    g7    fam4  ORD2\n## esp14    g8    fam5  ORD2\n## esp15    g8    fam5  ORD2\ntax.phy <- taxo2phylog(as.taxo(taxo.eg[[1]]))\nprint(tax.phy)## Phylogenetic tree with 15 leaves and 16 nodes\n## $class: phylog\n## $call: taxo2phylog(taxo = as.taxo(taxo.eg[[1]]))\n## $tre: ((((esp3,esp1,esp2,esp4,e...15)l1g8)l2fam5)l3ORD2)Root; \n## \n##         class   length\n## $leaves numeric 15    \n## $nodes  numeric 16    \n## $parts  list    16    \n## $paths  list    31    \n## $droot  numeric 31    \n##         content                                     \n## $leaves length of the first preceeding adjacent edge\n## $nodes  length of the first preceeding adjacent edge\n## $parts  subsets of descendant nodes                 \n## $paths  path from root to node or leave             \n## $droot  distance to root\nggtree(tax.phy) + geom_tiplab() + geom_nodelab(geom='label')"},{"path":"chapter9.html","id":"phyloseq","chapter":"9 ggtree for other tree-like objects","heading":"9.1.3 The phyloseq object","text":"phyloseq class defined phyloseq package designed storing microbiome data, including phylogenetic tree, associated sample data taxonomy assignment. can import data popular pipelines, QIIME (Kuczynski et al. 2011), mothur (Schloss et al. 2009), DADA2 (Callahan et al. 2016) PyroTagger (Kunin Hugenholtz 2010), etc.. ggtree supports visualizing phylogenetic tree stored phyloseq object related data can used annotate tree demonstrated Figure 9.3 9.4.\nFigure 9.3: Visualizing phyloseq tree object.\nFigure 9.3 reproduce output phyloseq::plot_tree(). Users phyloseq find ggtree useful visualizing microbiome data annotation, since ggtree supports high-level annotation using grammar graphics can add tree data layers available phyloseq.\nFigure 9.4: Phylogenetic tree OTU abundance densities. Tips colored Phylum corresponding abundance across different samples visualized density ridgelines sorted according tree structure.\nexample uses microbiome data provided phyloseq package density ridgeline employed visualize species abundance data. geom_facet layer automatically re-arranges abundance data according tree structure, visualizes data using specify geom function, .e. geom_density_ridges, aligns density curves tree demonstrated Fig. . Note data stored phyloseq object visible ggtree can used directly tree visualization (Phylum used color tips density ridgelines example). source code example firstly published Supplemental File (Yu et al. 2018).","code":"\nlibrary(phyloseq)\nlibrary(scales)\n\ndata(GlobalPatterns)\nGP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)\nGP.chl <- subset_taxa(GP, Phylum==\"Chlamydiae\")\n\nggtree(GP.chl) + geom_text2(aes(subset=!isTip, label=label), hjust=-.2, size=4) +\n  geom_tiplab(aes(label=Genus), hjust=-.3) +\n  geom_point(aes(x=x+hjust, color=SampleType, shape=Family, size=Abundance),na.rm=TRUE) +\n  scale_size_continuous(trans=log_trans(5)) +\n  theme(legend.position=\"right\")\nlibrary(ggridges)\n\ndata(\"GlobalPatterns\")\nGP <- GlobalPatterns\nGP <- prune_taxa(taxa_sums(GP) > 600, GP)\nsample_data(GP)$human <- get_variable(GP, \"SampleType\") %in% \n  c(\"Feces\", \"Skin\") \n\nmergedGP <- merge_samples(GP, \"SampleType\")\nmergedGP <- rarefy_even_depth(mergedGP,rngseed=394582)\nmergedGP <- tax_glom(mergedGP,\"Order\") \n\nmelt_simple <- psmelt(mergedGP) %>% \n  filter(Abundance < 120) %>% \n  select(OTU, val=Abundance)\n\nggtree(mergedGP) + \n  geom_tippoint(aes(color=Phylum), size=1.5) +\n  geom_facet(mapping = aes(x=val,group=label, \n                           fill=Phylum),\n            data = melt_simple, \n            geom = geom_density_ridges,\n            panel=\"Abundance\",  \n            color='grey80', lwd=.3)"},{"path":"chapter9.html","id":"dendrogram","chapter":"9 ggtree for other tree-like objects","heading":"9.2 ggtree for dendrograms","text":"dendrogram tree diagram display hierarchical clustering classification/regression trees.can calculate hierarchical clustering using function hclustThe hclust object describes tree produced clustering process. can converted dendrogram object, stores tree deeply-nested lists.ggtree package supports hierarchical clustering objects defined R community, including hclust dendrogram well agnes, diana twins defined cluster package. Users can use ggtree(object) display tree structure, user layers utilities customize graph course add annotation tree.ggtree provides layout_dendrogram layout tree top , theme_dendrogram display tree height (similar theme_tree2 phylogenetic tree) demonstrated Figure 9.5 (see also example (Yu 2020)).\nFigure 9.5: Visualizing dendrogram.\n","code":"\nhc <- hclust(dist(mtcars))\nhc## \n## Call:\n## hclust(d = dist(mtcars))\n## \n## Cluster method   : complete \n## Distance         : euclidean \n## Number of objects: 32\nden <- as.dendrogram(hc)\nden## 'dendrogram' with 2 branches and 32 members total, at height 425.3447\nclus <- cutree(hc, 4)\ng <- split(names(clus), clus)\n\np <- ggtree(hc, linetype='dashed')\nclades <- sapply(g, function(n) MRCA(p, n))\n\np <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)\n\nd <- data.frame(label = names(clus), \n                  cyl = mtcars[names(clus), \"cyl\"])\n\np %<+% d + \n  layout_dendrogram() + \n  geom_tippoint(size=5, shape=21, aes(fill=factor(cyl), x=x+.5), color='black') + \n  geom_tiplab(aes(label=cyl), size=3, hjust=.5, color='black') +\n  geom_tiplab(angle=90, hjust=1, offset=-10, show.legend=F) + \n  scale_color_brewer(palette='Set1', breaks=1:4) +\n  theme_dendrogram(plot.margin=margin(6,6,80,6)) +\n  theme(legend.position=c(.9, .6))"},{"path":"chapter9.html","id":"igraph","chapter":"9 ggtree for other tree-like objects","heading":"9.3 ggtree for tree graph","text":"treeio supports converting tree graph (igraph object) phylo object ggtree supports directly visualizing tree graph demonstrated Figure 9.6.\nFigure 9.6: Visualizing tree graph.\n","code":"\nlibrary(igraph)\ng <- graph.tree(40, 3)\narrow_size <- unit(rep(c(0, 3), times = c(27, 13)), \"mm\")\nggtree(g, layout='slanted', arrow = arrow(length=arrow_size)) + \n  geom_point(size=5, color='steelblue', alpha=.6) + \n  geom_tiplab(hjust=.5,vjust=2) + layout_dendrogram()"},{"path":"chapter9.html","id":"ggtree-for-other-tree-like-structure","chapter":"9 ggtree for other tree-like objects","heading":"9.4 ggtree for other tree-like structure","text":"ggtree package can used visualize data hierarchical structure. , use GNI (Gross National Income) numbers 2014 example. preparing edge list, matrix data frame contains two columns indicating relationship parent child nodes, can use .phylo provided treeio convert edge list phylo object. can visualized using ggtree associated data. example, population used scale size circle points country.\nFigure 9.7: Visualizing data hierarchical structure.\n","code":"\nlibrary(treeio)\nlibrary(ggplot2)\nlibrary(ggtree)\n\ndata(\"GNI2014\", package=\"treemap\")\nn <- GNI2014[, c(3,1)]\nn[,1] <- as.character(n[,1])\nn[,1] <- gsub(\"\\\\s\\\\(.*\\\\)\", \"\", n[,1])\n\nw <- cbind(\"World\", as.character(unique(n[,1])))\n\ncolnames(w) <- colnames(n)\nedgelist <- rbind(n, w)\n\ny <- as.phylo(edgelist)\nggtree(y, layout='circular') %<+% GNI2014 + \n    aes(color=continent) + geom_tippoint(aes(size=population), alpha=.6) + \n    geom_tiplab(aes(label=country), offset=.1) +\n    theme(plot.margin=margin(60,60,60,60))"},{"path":"chapter10.html","id":"chapter10","chapter":"10 ggtreeExtra","heading":"10 ggtreeExtra","text":"","code":""},{"path":"chapter10.html","id":"introduction-3","chapter":"10 ggtreeExtra","heading":"10.1 Introduction","text":"ggtree package (Yu et al. 2017) provides programmable visualization annotation phylogenetic trees tree-like structures. supports visualizing tree data multiple layers tree side side (see also Chapter 7 (Yu et al. 2018)). Although ggtree supports many layouts, geom_facet() layer works rectangular, roundrect, ellipse slanted layouts present tree data different panels. direct supports ggtree present data outer rings tree circular, fan radial layouts. solve issue, developed ggtreeExtra package, allows users align associated graph layers outer rings circular layout tree. addition, also works rectangular tree layout (Figure 10.3).","code":""},{"path":"chapter10.html","id":"geom-fruit1","chapter":"10 ggtreeExtra","heading":"10.2 Aligning graphs to the tree based on tree structure","text":"ggtreeExtra package provides layer function, geom_fruit(), align graphs tree side side. Similar geom_facet() layout described Chapter 7, geom_fruit() internally re-order input data based tree structure visualize data using specified geometric layer function user provided aesthetic mapping non-variable setting. graph displayed outer ring tree.geom_fruit() designed work geom layers defined ggplot2 extensions. position graph (.e. outer ring) controlled position parameter, accepts Positioin object. default value position parameter ‚Äòauto‚Äô geom_fruit() layer guess determine (hopefully) suitable position specified geometric layer. means using position_stackx() geom_bar(), position_dodgex() geom_violin() geom_boxplot(), position_identityx() others (e.g. geom_point() geom_tile() etc.). geometric layer position parameter compatible geom_fruit(), allows using position functions defined ggtreeExtra package adjust output layer position. Besides, geom_fruit() layer allows setting axis background grid lines current layer using axis.params grid.params parameters respectively.following example uses microbiome data provided phyloseq package boxplot employed visualize species abundance data. geom_fruit() layer automatically re-arranges abundance data according circular tree structure visualizes data using specific geom function (.e. geom_boxplot()). Visualizing dataset using geom_density_ridges() geom_facet() can found Fig. 1 (Yu et al. 2018).\nFigure 10.1: Phylogenetic tree OTU abundance distribution. Species abundance distribution aligned tree visualized boxplots. Phylum information used color symbolic points tree also species abundance distributions.\n","code":"\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(phyloseq)\nlibrary(dplyr)\n\ndata(\"GlobalPatterns\")\nGP <- GlobalPatterns\nGP <- prune_taxa(taxa_sums(GP) > 600, GP)\nsample_data(GP)$human <- get_variable(GP, \"SampleType\") %in%\n                              c(\"Feces\", \"Skin\")\nmergedGP <- merge_samples(GP, \"SampleType\")\nmergedGP <- rarefy_even_depth(mergedGP,rngseed=394582)\nmergedGP <- tax_glom(mergedGP,\"Order\")\n\nmelt_simple <- psmelt(mergedGP) %>%\n               filter(Abundance < 120) %>%\n               select(OTU, val=Abundance)\n\np <- ggtree(mergedGP, layout=\"fan\", open.angle=10) + \n     geom_tippoint(mapping=aes(color=Phylum), \n                   size=1.5,\n                   show.legend=FALSE)\np <- rotate_tree(p, -90)\n\np <- p +\n     geom_fruit(\n         data=melt_simple,\n         geom=geom_boxplot,\n         mapping = aes(\n                     y=OTU,\n                     x=val,\n                     group=label,\n                     fill=Phylum,\n                   ),\n         size=.2,\n         outlier.size=0.5,\n         outlier.stroke=0.08,\n         outlier.shape=21,\n         axis.params=list(\n                         axis       = \"x\",\n                         text.size  = 1.8,\n                         hjust      = 1,\n                         vjust      = 0.5,\n                         nbreak     = 3,\n                     ),\n         grid.params=list()\n     ) \n     \np <- p +\n     scale_fill_discrete(\n         name=\"Phyla\",\n         guide=guide_legend(keywidth=0.8, keyheight=0.8, ncol=1)\n     ) +\n     theme(\n         legend.title=element_text(size=9), # The title of legend \n         legend.text=element_text(size=7) # The label text of legend, the sizes should be adjust with dpi.\n     )\np"},{"path":"chapter10.html","id":"geom-fruit2","chapter":"10 ggtreeExtra","heading":"10.3 Aligning multiple graphs to the tree for multi-dimensional data","text":"able add multiple geom_fruit() layers tree circular layout indeed compact efficient multi-dimensional data. example reproduce Fig.2 (Morgan, Segata, Huttenhower 2013). data provided GraPhlAn (Asnicar et al. 2015), contained relative abundance microbiome different body sites. example demonstrates abilities adding multiple layers (heat map bar plot) present different types data (Figure 10.2).\nFigure 10.2: Presenting microbiome data (abundance location) phylogenetic tree. tree annotated symbolic points, highlighted clades clade labels. Two geom_fruit() layers used visualize location abundance information.\nshape tip points indicates types microbes (commensal microbes potential pathogens). transparency heatmap indicates abundance microbes, colours heatmap indicate different sites human body. bar plot indicates relative abundance prevalent species body sites. node labels contain taxonomy information example, information used highlight label corresponding clades using geom_hilight() geom_cladelab() respectively.geom_fruit() layer supports rectangular layout. Users can either add geom_fruit() layer rectangular tree (e.g.¬†ggtree(tree_object) + geom_fruit(...)) using layout_rectangular() transform circular layout tree rectangular layout tree demonstrated Figure 10.3.\nFigure 10.3: Illustration using geom_fruit() rectangular tree layout.\n","code":"\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(ggstar)\nlibrary(ggplot2)\nlibrary(ggnewscale)\n\ntree <- read.tree(\"data/HMP_tree/hmptree.nwk\")\n# the abundance and types of microbes\ndat1 <- read.csv(\"data/HMP_tree/tippoint_attr.csv\")\n# the abundance of microbes at different body sites.\ndat2 <- read.csv(\"data/HMP_tree/ringheatmap_attr.csv\")\n# the abundance of microbes at the body sites of greatest prevalence.\ndat3 <- read.csv(\"data/HMP_tree/barplot_attr.csv\")\n\n# adjust the order\ndat2$Sites <- factor(dat2$Sites, levels=c(\"Stool (prevalence)\", \"Cheek (prevalence)\",\n                                          \"Plaque (prevalence)\",\"Tongue (prevalence)\",\n                                          \"Nose (prevalence)\", \"Vagina (prevalence)\",\n                                          \"Skin (prevalence)\"))\ndat3$Sites <- factor(dat3$Sites, levels=c(\"Stool (prevalence)\", \"Cheek (prevalence)\",\n                                          \"Plaque (prevalence)\", \"Tongue (prevalence)\",\n                                          \"Nose (prevalence)\", \"Vagina (prevalence)\",\n                                          \"Skin (prevalence)\"))\n# extract the clade label information. Because some nodes of tree are annotated to genera,\n# which can be displayed with high light using ggtree.\nnodeids <- nodeid(tree, tree$node.label[nchar(tree$node.label)>4])\nnodedf <- data.frame(node=nodeids)\nnodelab <- gsub(\"[\\\\.0-9]\", \"\", tree$node.label[nchar(tree$node.label)>4])\n# The layers of clade and hightlight\nposlist <- c(1.6, 1.4, 1.6, 0.8, 0.1, 0.25, 1.6, 1.6, 1.2, 0.4,\n             1.2, 1.8, 0.3, 0.8, 0.4, 0.3, 0.4, 0.4, 0.4, 0.6,\n             0.3, 0.4, 0.3)\nlabdf <- data.frame(node=nodeids, label=nodelab, pos=poslist)\n\n# The circular layout tree.\np <- ggtree(tree, layout=\"fan\", size=0.15, open.angle=5) +\n     geom_hilight(data=nodedf, mapping=aes(node=node),\n                  extendto=6.8, alpha=0.3, fill=\"grey\", color=\"grey50\",\n                  size=0.05) +\n     geom_cladelab(data=labdf, \n                   mapping=aes(node=node, \n                               label=label,\n                               offset.text=pos),\n                   hjust=0.5,\n                   angle=\"auto\",\n                   barsize=NA,\n                   horizontal=FALSE, \n                   fontsize=1.4,\n                   fontface=\"italic\"\n                   )\n\np <- p %<+% dat1 + geom_star(\n                        mapping=aes(fill=Phylum, starshape=Type, size=Size),\n                        position=\"identity\",starstroke=0.1) +\n         scale_fill_manual(values=c(\"#FFC125\",\"#87CEFA\",\"#7B68EE\",\"#808080\",\"#800080\",\n                                    \"#9ACD32\",\"#D15FEE\",\"#FFC0CB\",\"#EE6A50\",\"#8DEEEE\",\n                                    \"#006400\",\"#800000\",\"#B0171F\",\"#191970\"),\n                           guide=guide_legend(keywidth = 0.5, keyheight = 0.5, order=1,\n                                              override.aes=list(starshape=15)),\n                           na.translate=FALSE)+\n         scale_starshape_manual(values=c(15, 1),\n                                guide=guide_legend(keywidth = 0.5, keyheight = 0.5, order=2),\n                                na.translate=FALSE)+\n         scale_size_continuous(range = c(1, 2.5),\n                               guide = guide_legend(keywidth = 0.5, keyheight = 0.5, order=3,\n                                                    override.aes=list(starshape=15)))\n                                                    \np <- p + new_scale_fill() +\n         geom_fruit(data=dat2, geom=geom_tile,\n                    mapping=aes(y=ID, x=Sites, alpha=Abundance, fill=Sites),\n                    color = \"grey50\", offset = 0.04,size = 0.02)+\n         scale_alpha_continuous(range=c(0, 1),\n                             guide=guide_legend(keywidth = 0.3, keyheight = 0.3, order=5)) +\n         geom_fruit(data=dat3, geom=geom_bar,\n                    mapping=aes(y=ID, x=HigherAbundance, fill=Sites),\n                    pwidth=0.38, \n                    orientation=\"y\", \n                    stat=\"identity\",\n         ) +\n         scale_fill_manual(values=c(\"#0000FF\",\"#FFA500\",\"#FF0000\",\"#800000\",\n                                    \"#006400\",\"#800080\",\"#696969\"),\n                           guide=guide_legend(keywidth = 0.3, keyheight = 0.3, order=4))+\n         geom_treescale(fontsize=2, linesize=0.3, x=4.9, y=0.1) +\n         theme(legend.position=c(0.93, 0.5),\n               legend.background=element_rect(fill=NA),\n               legend.title=element_text(size=6.5),\n               legend.text=element_text(size=4.5),\n               legend.spacing.y = unit(0.02, \"cm\"),\n             )\np\np + layout_rectangular() + \n    theme(legend.position=c(.05, .7))"},{"path":"chapter10.html","id":"examples-for-population-genetics","chapter":"10 ggtreeExtra","heading":"10.4 Examples for population genetics","text":"ggtree (Yu et al. 2017) ggtreeExtra packages designed general tools can applied many research fields, infectious disease epidemiology, metagenome, population genetics, evolutionary biology ecology. introduced examples metagenome research (Figure 10.1 Figure 10.2). session, present examples population genetics reproducing Fig. 4 (Chow et al. 2020) Fig 1 (Wong et al. 2015).\nFigure 10.4: Antifungal susceptibility point mutations drug targets Candida auris .\nexample, phylogenetic tree annotated different colours display different clades. external heatmaps presents susceptibility fluconazole (FCZ), amphotericin B (AMB) micafungin (MCF). external points display point mutations lanosterol 14-alpha-demethylase ERG11 (Y132F, K143R, F126L) beta-1,3-D-glucan synthase FKS1 (S639Y/P/F) associated resistance (Chow et al. 2020).\nFigure 10.5: Population structure 1,832 S. Typhi isolates.\nrooted maximum-likelihood tree S. Typhi inferred 22,145 SNPs (Wong et al. 2015), colours tip points represent geographical origin isolates, red symbolic points indicate halotype H58 lineage. colour external heatmap indicates years isolation (Wong et al. 2015).","code":"\nlibrary(ggtree)\nlibrary(ggtreeExtra)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(dplyr)\nlibrary(tidytree)\nlibrary(ggstar)\n\ndat <- read.csv(\"data/microreact/Candida_auris/microreact-project-Candidaauris-data.csv\")\ntr <- read.tree(\"data/microreact/Candida_auris/microreact-project-Candidaauris-tree.nwk\")\n\ncountries <- c(\"Canada\", \"United States\",\n               \"Colombia\", \"Panama\",\n               \"Venezuela\", \"France\",\n               \"Germany\", \"Spain\",\n               \"UK\", \"India\",\n               \"Israel\", \"Pakistan\",\n               \"Saudi Arabia\", \"United Arab Emirates\",\n               \"Kenya\", \"South Africa\",\n               \"Japan\", \"South Korea\",\n               \"Australia\")\n# For the tip points\ndat1 <- dat %>% select(c(\"ID\", \"COUNTRY\", \"COUNTRY__colour\"))\ndat1$COUNTRY <- factor(dat1$COUNTRY, levels=countries)\nCOUNTRYcolors <- dat1[match(countries,dat$COUNTRY),\"COUNTRY__colour\"]\n\n# For the heatmap layer\ndat2 <- dat %>% select(c(\"ID\", \"FCZ\", \"AMB\", \"MCF\"))\ndat2 <- reshape2::melt(dat2,id=\"ID\", variable.name=\"Antifungal\", value.name=\"type\")\ndat2$type <- paste(dat2$Antifungal, dat2$type)\ndat2$type <- unlist(lapply(dat2$type,\n                           function(x)ifelse(grepl(\"Not_\", x), \"Susceptible\", x)))\ndat2$Antifungal <- factor(dat2$Antifungal, levels=c(\"FCZ\", \"AMB\", \"MCF\"))\ndat2$type <- factor(dat2$type,\n                    levels=c(\"FCZ Resistant\",\n                            \"AMB Resistant\",\n                            \"MCF Resistant\",\n                            \"Susceptible\"))\n\n# For the points layer\ndat3 <- dat %>% select(c(\"ID\", \"ERG11\", \"FKS1\")) %>%\n        reshape2::melt(id=\"ID\", variable.name=\"point\", value.name=\"mutation\")\ndat3$mutation <- paste(dat3$point, dat3$mutation)\ndat3$mutation <- unlist(lapply(dat3$mutation, function(x)ifelse(grepl(\"WT\",x), NA,x)))\ndat3$mutation <- factor(dat3$mutation, levels=c(\"ERG11 Y132F\", \"ERG11 K143R\",\n                                                \"ERG11 F126L\", \"FKS1 S639Y/P/F\"))\n\n# For the clade group\ndat4 <- dat %>% select(c(\"ID\", \"CLADE\"))\ndat4 <- aggregate(.~CLADE, dat4, FUN=paste, collapse=\",\")\nclades <- lapply(dat4$ID, function(x){unlist(strsplit(x,split=\",\"))})\nnames(clades) <- dat4$CLADE\n\ntr <- groupOTU(tr, clades, \"Clade\")\nClade <- NULL\np <- ggtree(tr=tr, layout=\"fan\", open.angle=15, size=0.2, aes(colour=Clade)) +\n     scale_colour_manual(\n         values=c(\"black\",\"#69B920\",\"#9C2E88\",\"#F74B00\",\"#60C3DB\"),\n         labels=c(\"\",\"I\", \"II\", \"III\", \"IV\"),\n         guide=guide_legend(keywidth=0.5,\n                            keyheight=0.5,\n                            order=1,\n                            override.aes=list(linetype=c(\"0\"=NA,\n                                                         \"Clade1\"=1,\n                                                         \"Clade2\"=1,\n                                                         \"Clade3\"=1,\n                                                         \"Clade4\"=1\n                                                        )\n                                             )\n                           )\n     ) + \n     new_scale_colour()\n\np1 <- p %<+% dat1 +\n     geom_tippoint(aes(colour=COUNTRY),\n                   alpha=0) +\n     geom_tiplab(aes(colour=COUNTRY),\n                   align=TRUE,\n                   linetype=3,\n                   size=1,\n                   linesize=0.2,\n                   show.legend=FALSE\n                   ) +\n     scale_colour_manual(\n         name=\"Country labels\",\n         values=COUNTRYcolors,\n         guide=guide_legend(keywidth=0.5,\n                            keyheight=0.5,\n                            order=2,\n                            override.aes=list(size=2,alpha=1))\n     )\n\np2 <- p1 +\n      geom_fruit(\n          data=dat2,\n          geom=geom_tile,\n          mapping=aes(x=Antifungal, y=ID, fill=type),\n          width=0.1,\n          color=\"white\",\n          pwidth=0.1,\n          offset=0.15\n      ) +\n      scale_fill_manual(\n           name=\"Antifungal susceptibility\",\n           values=c(\"#595959\", \"#B30000\", \"#020099\", \"#E6E6E6\"),\n           na.translate=FALSE,\n           guide=guide_legend(keywidth=0.5,\n                              keyheight=0.5,\n                              order=3\n                             )\n      ) +\n      new_scale_fill()\n\np3 <- p2 +\n      geom_fruit(\n          data=dat3,\n          geom=geom_star,\n          mapping=aes(x=mutation, y=ID, fill=mutation, starshape=point),\n          size=1,\n          starstroke=0,\n          pwidth=0.1,\n          inherit.aes = FALSE,\n          grid.params=list(\n                          linetype=3,\n                          size=0.2\n                      )\n\n      ) +\n      scale_fill_manual(\n          name=\"Point mutations\",\n          values=c(\"#329901\", \"#0600FF\", \"#FF0100\", \"#9900CC\"),\n          guide=guide_legend(keywidth=0.5, keyheight=0.5, order=4,\n                             override.aes=list(starshape=c(\"ERG11 Y132F\"=15,\n                                                           \"ERG11 K143R\"=15,\n                                                           \"ERG11 F126L\"=15,\n                                                           \"FKS1 S639Y/P/F\"=1),\n                                               size=2)\n                            ),\n          na.translate=FALSE,\n      ) +\n      scale_starshape_manual(\n          values=c(15, 1),\n          guide=\"none\"\n      ) +\n      theme(\n          legend.background=element_rect(fill=NA),\n          legend.title=element_text(size=7), # The size should be adjusted with different devout.\n          legend.text=element_text(size=5.5),\n          legend.spacing.y = unit(0.02, \"cm\")\n      )\np3\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(dplyr)\nlibrary(ggstar)\n\ntr <- read.tree(\"data/microreact/Salmonella_Typhi/microreact-project-NJIDqgsS-tree.nwk\")\n\nmetada <- read.csv(\"data/microreact/Salmonella_Typhi/microreact-project-NJIDqgsS-data.csv\")\n\nmetadata <- metada %>%\n            select(c(\"id\", \"country\", \"country__colour\", \"year\", \"year__colour\", \"haplotype\"))\nmetadata$haplotype <- unlist(lapply(metadata$haplotype, function(x)ifelse(nchar(x)>0,x,NA)))\n\ncountrycolors <- metada %>%\n                 select(c(\"country\", \"country__colour\")) %>%\n                 distinct()\n\nyearcolors <- metada %>%\n              select(c(\"year\", \"year__colour\")) %>%\n              distinct()\nyearcolors <- yearcolors[order(yearcolors$year, decreasing=TRUE),]\n\nmetadata$country <- factor(metadata$country, levels=countrycolors$country)\nmetadata$year <- factor(metadata$year, levels=yearcolors$year)\n\np <- ggtree(tr, layout=\"fan\", open.angle=15, size=0.1)\n\np <- p %<+% metadata\n\np1 <-p +\n     geom_tippoint(\n         mapping=aes(colour=country),\n         size=1.5,\n         stroke=0,\n         alpha=0.4\n     ) +\n     scale_colour_manual(\n         name=\"Country\",\n         values=countrycolors$country__colour,\n         guide=guide_legend(keywidth=0.3,\n                            keyheight=0.3,\n                            ncol=2,\n                            override.aes=list(size=2,alpha=1),\n                            order=1)\n     ) +\n     theme(\n         legend.title=element_text(size=5),\n         legend.text=element_text(size=4),\n         legend.spacing.y = unit(0.02, \"cm\")\n     )\n\np2 <-p1 +\n     geom_fruit(\n         geom=geom_star,\n         mapping=aes(fill=haplotype),\n         starshape=26,\n         color=NA,\n         size=2,\n         starstroke=0,\n         offset=0,\n     ) +\n     scale_fill_manual(\n         name=\"Haplotype\",\n         values=c(\"red\"),\n         guide=guide_legend(\n                   keywidth=0.3,\n                   keyheight=0.3,\n                   order=3\n               ),\n         na.translate=FALSE\n     )\n\np3 <-p2 +\n     new_scale_fill() +\n     geom_fruit(\n         geom=geom_tile,\n         mapping=aes(fill=year),\n         width=0.002,\n         offset=0.1\n     ) +\n     scale_fill_manual(\n         name=\"Year\",\n         values=yearcolors$year__colour,\n         guide=guide_legend(keywidth=0.3, keyheight=0.3, ncol=2, order=2)\n     ) +\n     theme(\n           legend.title=element_text(size=6), # The size should be adjusted with the different devout.\n           legend.text=element_text(size=4.5),\n           legend.spacing.y = unit(0.02, \"cm\")\n           )\np3"},{"path":"chapter10.html","id":"summary10","chapter":"10 ggtreeExtra","heading":"10.5 Summary","text":"geom_facet() geom_fruit() becoming powerful present data trees geometric layers implemented ggplot2 community.","code":""},{"path":"chapter11.html","id":"chapter11","chapter":"11 Other ggtree extensions","heading":"11 Other ggtree extensions","text":"9 packages CRAN Bioconductor depend import ggtree several packages github extends ggtree.deeptime: Plotting Tools Anyone Working Deep Timedeeptime: Plotting Tools Anyone Working Deep Timeggdaisie: ggtree DAISIE R packageggdaisie: ggtree DAISIE R packagemicrobiomeViz: Visualize microbiome data black magic ggtreemicrobiomeViz: Visualize microbiome data black magic ggtreemicrobiomeMarkermicrobiomeMarker","code":"\nrp <- BiocManager::repositories()\ndb <- utils::available.packages(repo=rp)\nx <- tools::package_dependencies('ggtree', db=db, \n                                which = c(\"Depends\", \"Imports\"), \n                                reverse=TRUE)\nprint(x)                                ## $ggtree\n## [1] \"LymphoSeq\"         \"MicrobiotaProcess\"\n## [3] \"philr\"             \"singleCellTK\"     \n## [5] \"sitePath\"          \"genBaRcode\"       \n## [7] \"harrietr\"          \"RAINBOWR\"         \n## [9] \"STraTUS\""},{"path":"chapter11.html","id":"MicrobiotaProcess","chapter":"11 Other ggtree extensions","heading":"11.1 Taxonomy annotation using MicrobiotaProcess","text":"ggdiffcalde MicrobiotaProcess developed based ggtree (Yu et al. 2017). can used visualized result diff_analysis MicrobiotaProcess. addition, data frame contained hierarchical relationship, like taxonomy annotation KEGG levels annotation, plot framework, data frame (first column labels data frame contained hierarchical relationship, column factor variable, another column contains pvalue also can provided.). provided circular, radial, rectangular, inward_circular slanted layout. , show example show use data frame visualize different taxonomy tree. data frame example results diff_analysis public datasets (Kostic et al. 2012).\nFigure 11.1: Different taxonomy clade.\ncolors represent relevant features enriched relevant classgroup. size point colored represent -log10(pvalue), means larger point represents higher significance. example, found Fusobacterium sequences enriched carcinomas, Firmicutes, Bacteroides, Clostridiales depleted tumors. results consistent original article (Kostic et al. 2012). addition, also found Campylobacter enriched tumors, relative abundance lower Fusobacterium. species Campylobacter proven associated colorectal cancer (et al. 2019; Wu et al. 2013; Amer et al. 2017).","code":"\nlibrary(MicrobiotaProcess)\nlibrary(ggplot2)\n\ntaxa <- read.csv(\"data/alltax_info.csv\")\ndt <- read.csv(\"data/difftax_tab.csv\")\n\np <- ggdiffclade(obj=taxa,\n                 nodedf=dt,\n                 factorName=\"DIAGNOSIS\",\n                 layout=\"radial\",\n                 skpointsize=0.6,\n                 cladetext=2,\n                 linewd=0.2, # The size argument has been replace with linewd in devel version\n                 taxlevel=3,\n                 reduce=TRUE) + # This argument is to remove the branch of unknown taxonomy, it is provided in devel version.\n     scale_fill_manual(values=c(\"#00AED7\", \"#009E73\"))+\n     guides(color = guide_legend(keywidth = 0.1, keyheight = 0.6,\n                                 order = 3,ncol=1)) +\n     theme(panel.background=element_rect(fill=NA),\n           legend.position=\"right\",\n           plot.margin=margin(0,0,0,0),\n           legend.spacing.y=unit(0.02, \"cm\"), \n           legend.title=element_text(size=7.5), # This should be adjusted with different devout.\n           legend.text=element_text(size=5.5), \n           legend.box.spacing=unit(0.02,\"cm\")\n           )\n\np"},{"path":"chapter11.html","id":"visualizing-phylogenetic-network","chapter":"11 Other ggtree extensions","heading":"11.2 Visualizing phylogenetic network","text":"ggnetworx: phylogenetic networks using ggplot2 ggtree\nFigure 11.2: Phylogenetic network.\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\nlibrary(ggnetworx)\n\nfile <- system.file(\"extdata/trees/woodmouse.nxs\", package = \"phangorn\")\nNnet <- phangorn::read.nexus.networx(file)\n\nggplot(Nnet, aes(x, y))  + geom_splitnet() + theme_tree()+   \n    geom_tiplab2(aes(color=label), hjust=-.1)+\n    scale_color_manual(values=rainbow(15)) +   \n    theme(legend.position=\"none\") +\n    ggexpand(.1) + ggexpand(.1, direction=-1)"},{"path":"chapter12.html","id":"chapter12","chapter":"12 ggtree utilities","heading":"12 ggtree utilities","text":"","code":""},{"path":"chapter12.html","id":"facet-utils","chapter":"12 ggtree utilities","heading":"12.1 Facet utilities","text":"","code":""},{"path":"chapter12.html","id":"facet_widths","chapter":"12 ggtree utilities","heading":"12.1.1 facet_widths","text":"also supports using name vector set widths specific panels. following code display identical figure Figure 12.1A.facet_widths function also work ggplot object demonstrated Figure 12.1B.\nFigure 12.1: Adjust relative widths ggplot facets. facet_widths function works ggtree () well ggplot (B).\n","code":"\nlibrary(ggplot2)\nlibrary(ggstance)\nlibrary(ggtree)\nlibrary(reshape2)\n\nset.seed(123)\ntree <- rtree(30)\n\np <- ggtree(tree, branch.length = \"none\") + \n    geom_tiplab() + theme(legend.position='none')\n\na <- runif(30, 0,1)\nb <- 1 - a\ndf <- data.frame(tree$tip.label, a, b)\ndf <- melt(df, id = \"tree.tip.label\")\n\np2 <- facet_plot(p + xlim_tree(8), panel = 'bar', data = df, geom = geom_barh, \n                 mapping = aes(x = value, fill = as.factor(variable)), \n                 width = 0.8, stat='identity') + xlim_tree(9)\n\nfacet_widths(p2, widths = c(1, 2))\nfacet_widths(p2, c(Tree = .5))\np <- ggplot(iris, aes(Sepal.Width, Petal.Length)) + \n  geom_point() + facet_grid(.~Species)\nfacet_widths(p, c(setosa = .5))"},{"path":"chapter12.html","id":"facet_labeller","chapter":"12 ggtree utilities","heading":"12.1.2 facet_labeller","text":"facet_labeller function designed re-label selected panels, currently works ggtree object (.e. facet_plot output).want combine facet_widths facet_labeller, need call facet_labeller re-label panels using facet_widths set relative widths panels. Otherwise wont work since output facet_widths re-drawn grid object.\nFigure 12.2: Rename facet labels. Rename multiple labels simultaneously () specific one (B) supported. facet_labeller can combine facet_widths rename facet label adjust relative widths (B).\n","code":"\nfacet_labeller(p2, c(Tree = \"phylogeny\", bar = \"HELLO\"))\nfacet_labeller(p2, c(Tree = \"phylogeny\")) %>% facet_widths(c(Tree = .4))"},{"path":"chapter12.html","id":"geom2","chapter":"12 ggtree utilities","heading":"12.2 Geometric layers","text":"Subsetting supported layers defined ggplot2, quite useful phylogenetic annotation since allows us annotate specific node(s) (e.g.¬†label bootstrap values larger 75).ggtree, provides modified version layers defined ggplot2 support aesthetic mapping subset, including:geom_segment2geom_point2geom_text2geom_label2\nFigure 12.3: Geometric layers supports subsetting. Thes layers works ggplot2 () ggtree (B).\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\ndata(mpg)\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +\n   geom_point(mapping = aes(color = class)) + \n   geom_text2(aes(label=manufacturer, \n                  subset = hwy > 40 | displ > 6.5), \n                  nudge_y = 1) +\n   coord_cartesian(clip = \"off\") +\n   theme_light() +\n   theme(legend.position = c(.85, .75))          \n\np2 <- ggtree(rtree(10)) + \n    geom_label2(aes(subset = node <5, label = label))\nplot_grid(p, p2, ncol=2, labels=c(\"A\", \"B\"))"},{"path":"chapter12.html","id":"layout-utilities","chapter":"12 ggtree utilities","heading":"12.3 Layout utilities","text":"session 4.2.2, introduce several layouts supported ggtree. ggtree package also provide several layout functions can transform one another. Note layouts supported (see 12.1).\nTable 12.1: Layout layers.\n\nFigure 12.4: Layout layers transforming among different layouts. Default rectangular layout (); transform rectangular dendrogram layout (B); transform circular rectangular layout (C); transform rectangular circular layout (D); transform rectangular fan layout (E); transform rectangular inward circular layout (F).\n","code":"\nset.seed(2019)\nx <- rtree(20)\np <- ggtree(x)\np + layout_dendrogram()\nggtree(x, layout = \"circular\") + layout_rectangular()\np + layout_circular()\np + layout_fan(angle=90)\np + layout_inward_circular(xlim=4) + geom_tiplab(hjust=1)"},{"path":"chapter12.html","id":"scale-utilities","chapter":"12 ggtree utilities","heading":"12.4 Scale utilities","text":"scale_x_range() documented session 5.2.4.","code":""},{"path":"chapter12.html","id":"xlim_expand","chapter":"12 ggtree utilities","heading":"12.4.1 Expand x limit for specific panel","text":"Sometimes need set xlim specific panel (e.g. allocate space long tip labels Tree panel). However, ggplot2::xlim() function applies panels. ggtree provides xlim_expand() adjust xlim user specific panel. accepts two parameters, xlim panel, can adjust individual panels demonstrated Figure 12.5A. want adjust xlim Tree panel, can use xlim_tree() shortcut.xlim_expand() function also works ggplot2::facet_grid(). demonstrating Figure 12.5B, xlim virginica panel adjusted xlim_expand().\nFigure 12.5: Setting xlim user specific panel. xlim ggtree::facet_plot (, Tree Dot panels), ggplot2::facet_grid (B, virginica panel).\n","code":"\nset.seed(2019-05-02)\nx <- rtree(30)\np <- ggtree(x) + geom_tiplab()\nd <- data.frame(label = x$tip.label, \n                value = rnorm(30))\np2 <- facet_plot(p, panel = \"Dot\", data = d, \n            geom = geom_point, mapping = aes(x = value))\np2 + xlim_tree(6) + xlim_expand(c(-10, 10), 'Dot')\ng <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + \n    geom_point() + facet_grid(. ~ Species, scales = \"free_x\") \ng + xlim_expand(c(0, 15), 'virginica')"},{"path":"chapter12.html","id":"ggexpand","chapter":"12 ggtree utilities","heading":"12.4.2 Expand plot limit by ratio of plot range","text":"ggplot2 package automatically adjust plot limits common long text truncated. Users need adjust x (y) limits manually via xlim() (ylim()) command (see also FAQ: Tip label truncated).xlim() (ylim()) good solution issue. However, can put thing simple, expanding plot panel ratio axis range without knowing exact value .provide hexpand() function expand x limit specifying fraction x range works direction (direction=1 right hand side direction=-1 left hand side) (Figure 12.6). Another version vexpand() works similar behavior y axis ggexpand() function works x y axes (Figure 11.2).\nFigure 12.6: Expanding plot limits fraction x y range. expand x limit right hand side default (). expand x limit left hand side direction = -1 expand y limit upper side (B).\n","code":"\nx$tip.label <- paste0('to make the label longer_', x$tip.label)\np1 <- ggtree(x) + geom_tiplab() + hexpand(.3)\np2 <- ggplot(iris, aes(Sepal.Width, Petal.Width)) + \n    geom_point() + \n    hexpand(.2, direction = -1) +\n    vexpand(.2)\nplot_grid(p1, p2, labels=c(\"A\", \"B\"), rel_widths=c(.6, .4))"},{"path":"chapter12.html","id":"tree-data-utilities","chapter":"12 ggtree utilities","heading":"12.5 Tree data utilities","text":"","code":""},{"path":"chapter12.html","id":"td_filter","chapter":"12 ggtree utilities","heading":"12.5.1 Filter tree data","text":"ggtree package defined several several geom layers supports subsetting tree data. However, many geom layers didn‚Äôt provide feature, defined ggplot2 extensions. allow filtering tree data layers, ggtree provides accompany function, td_filter() return function work similar dplyr::filter() can passed data parameter geom layers filter ggtree plot data demonstrated Figure 12.7.\nFigure 12.7: Filtering ggtree plot data geom layers.\n","code":"\nlibrary(tidytree)\n\nset.seed(1997)\ntree <- rtree(50)\np <- ggtree(tree) \nselected_nodes <- offspring(p, 67)$node\np + geom_text(aes(label=label), \n            data=td_filter(isTip & \n                        node %in% selected_nodes), \n            hjust=0)"},{"path":"chapter12.html","id":"td_unnest","chapter":"12 ggtree utilities","heading":"12.5.2 Flatten list-column tree data","text":"ggtree plot data tidy data frame row represents unique node. multiple values associated node, data stored nested data (.e.¬†list-column).Neste data supported operator, %<+%, can mapped tree structure. geom layer can‚Äôt directly supports visualizing nested data, need flatten data applying geom layer display . ggtree package provides function, td_unnest(), return function works similar tidyr::unnest() can used flatten ggtree plot data demonstrated Figure 12.8A.tree data utilities provide .f parameter pass function pre-operate data. create possibility combine different tree data utilities demonstrated Figure 12.8B.\nFigure 12.8: Flattening ggtree plot data. () list-columns can flattened td_unnest(). (B) Different tree data utilites can combined work together (e.g.¬†filter data td_filter() flatten td_unnest().\n","code":"\nset.seed(1997)\ntr <- rtree(5)\nd <- data.frame(id=rep(tr$tip.label,2), \n                value=abs(rnorm(10, 6, 2)), \n                group=c(rep(\"A\", 5),rep(\"B\",5)))\n\nrequire(tidyr)\nd2  <- nest(d, value =value, group=group)\n## d2 is a nested data\nd2## # A tibble: 5 x 3\n##   id    value            group           \n##   <chr> <list>           <list>          \n## 1 t2    <tibble [2 √ó 1]> <tibble [2 √ó 1]>\n## 2 t1    <tibble [2 √ó 1]> <tibble [2 √ó 1]>\n## 3 t5    <tibble [2 √ó 1]> <tibble [2 √ó 1]>\n## 4 t4    <tibble [2 √ó 1]> <tibble [2 √ó 1]>\n## 5 t3    <tibble [2 √ó 1]> <tibble [2 √ó 1]>\np <- ggtree(tr) %<+% d2\np2 <- p + \n    geom_point(aes(x, y, size= value, colour=group), \n            data = td_unnest(c(value, group)), alpha=.4) +\n    scale_size(range=c(3,10), limits=c(3, 10))\n\np3 <- p + \n    geom_point(aes(x, y, size= value, colour=group), \n            data = td_unnest(c(value, group), \n                        .f = td_filter(isTip & node==4)), \n            alpha=.4) +\n    scale_size(range=c(3,10), limits=c(3, 10))\n\ncowplot::plot_grid(p2, p3, labels=LETTERS[1:2])            "},{"path":"chapter12.html","id":"tree-utilities","chapter":"12 ggtree utilities","heading":"12.6 Tree utilities","text":"","code":""},{"path":"chapter12.html","id":"tiporder","chapter":"12 ggtree utilities","heading":"12.6.1 Extract tip order","text":"create composite plots, users need re-order data manually creating tree associated graph. order data consistent tip order presented ggtree plot. purpose, provide get_taxa_name() function extract ordered vector tips based tree structure plotted ggtree.\nFigure 12.9: example tree demonstraing get_taxa_name() function.\nget_taxa_name() function return vector ordered tip labels according tree structure displayed Figure 12.9.user specific node, get_taxa_name() extract order tips selected clade (.e.¬†highlighted region Figure 12.9).","code":"\nset.seed(123)\ntree <- rtree(10)\np <- ggtree(tree) + geom_tiplab() + \n    geom_hilight(node = 12, extendto = 2.5)\nprint(p)\nget_taxa_name(p)##  [1] \"t9\"  \"t8\"  \"t3\"  \"t2\"  \"t7\"  \"t10\" \"t1\"  \"t5\"  \"t6\" \n## [10] \"t4\"\nget_taxa_name(p, node = 12)## [1] \"t5\" \"t6\" \"t4\""},{"path":"chapter12.html","id":"padding-taxa-labels","chapter":"12 ggtree utilities","heading":"12.6.2 Padding taxa labels","text":"label_pad() function adds padding characters (default ¬∑) taxa labels.feature useful want align tip labels end demonstrated Figure 12.10. Note case, monospace font used ensure lengths labels displayed plot .\nFigure 12.10: Align tip label end. dotted line () without dotted line (B).\n","code":"\nset.seed(2015-12-21)\ntree <- rtree(5)\ntree$tip.label[2] <- \"long string for test\"\n\nd <- data.frame(label = tree$tip.label, \n                newlabel = label_pad(tree$tip.label),\n                newlabel2 = label_pad(tree$tip.label, pad = \" \"))\nprint(d)##                  label             newlabel\n## 1                   t1 ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑t1\n## 2 long string for test long string for test\n## 3                   t2 ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑t2\n## 4                   t4 ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑t4\n## 5                   t3 ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑t3\n##              newlabel2\n## 1                   t1\n## 2 long string for test\n## 3                   t2\n## 4                   t4\n## 5                   t3\np <- ggtree(tree) %<+% d + xlim(NA, 3)\np1 <- p + geom_tiplab(aes(label=newlabel), \n                    align=TRUE, family='mono',\n                    linetype = \"dotted\", linesize = .7) \np2 <- p + geom_tiplab(aes(label=newlabel2), \n                    align=TRUE, family='mono',\n                    linetype = NULL, offset=-.5) + xlim(NA, 2)\ncowplot::plot_grid(p1, p2, ncol=2, labels = c(\"A\", \"B\"))                            "},{"path":"chapter12.html","id":"identify","chapter":"12 ggtree utilities","heading":"12.7 Interactive ggtree annotation","text":"ggtree package supports interactive tree annotation manipulation implementing identify() method. Users can click node highlight clade, label rotate etc. Users can also use plotly package convert ggtree plotly object quickly create interactive phylogenetic tree.\nFigure 12.11: Interactive phylogenetic tree using identify() method. Highlighting, labelling rotating clades supported.\nVideo using identify() interactively manipulate phylogenetic tree can found Youtube  Youku:Highlighting clades: Youtube  Youku.Labelling clades: Youtube  Youku.Rotating clades: Youtube  Youku.","code":""},{"path":"chapter13.html","id":"chapter13","chapter":"13 Gallery of reproducible examples","heading":"13 Gallery of reproducible examples","text":"","code":""},{"path":"chapter13.html","id":"hpv58","chapter":"13 Gallery of reproducible examples","heading":"13.1 Visualizing pairwise nucleotide sequence distance with phylogenetic tree","text":"example reproduces Fig. 1 (Chen et al. 2017). extracts accession numbers tip labels HPV58 tree calculates pairwise nucleotide sequence distances. distance matrix visualized dot line plots. example demonstrates abilities adding multiple layers specific panel. illustrated Figure 13.1, facet_plot function displays sequence distances dot plot adds layer line plot panel, .e. Sequence Distance. addition, tree facet_plot can fully annotated multiple layers (clade labels, bootstrap support values, etc). source code example firstly published Supplemental File (Yu et al. 2018).\nFigure 13.1: Phylogeny HPV58 complete genomes dot line plots pairwise nucleotide sequence distances.\n","code":"\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(Biostrings)\nlibrary(treeio)\nlibrary(ggplot2)\nlibrary(ggtree)\n\ntree <- read.tree(\"data/HPV58.tree\")\n\nclade <- c(A3 = 92, A1 = 94, A2 = 108, B1 = 156, B2 = 159, C = 163, D1 = 173, D2 = 176)\ntree <- groupClade(tree, clade)\ncols <- c(A1 = \"#EC762F\", A2 = \"#CA6629\", A3 = \"#894418\", B1 = \"#0923FA\", \n         B2 = \"#020D87\", C = \"#000000\", D1 = \"#9ACD32\",D2 = \"#08630A\")\n\n## visualize the tree with tip labels and tree scale\np <- ggtree(tree, aes(color = group), ladderize = FALSE) %>% rotate(rootnode(tree)) + \n    geom_tiplab(aes(label = paste0(\"italic('\", label, \"')\")), parse = TRUE, size = 2.5) +\n    geom_treescale(x = 0, y = 1, width = 0.002) + \n    scale_color_manual(values = c(cols, \"black\"), na.value = \"black\", name = \"Lineage\",\n                      breaks = c(\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"C\", \"D1\", \"D2\")) +\n    guides(color = guide_legend(override.aes = list(size = 5, shape = 15))) +\n    theme_tree2(legend.position = c(.1, .88))\n## Optional\n## add labels for monophyletic (A, C and D) and paraphyletic (B) groups  \np <- p + geom_cladelabel(94, \"italic(A1)\", color = cols[[\"A1\"]], offset = .003, align = TRUE, \n                    offset.text = -.001, barsize = 1.2, extend = c(0, 0.5), parse = TRUE) +\n    geom_cladelabel(108, \"italic(A2)\", color = cols[[\"A2\"]], offset = .003, align = TRUE, \n                   offset.text = -.001, barsize = 1.2, extend = 0.5, parse = TRUE) +\n    geom_cladelabel(131, \"italic(A3)\", color = cols[[\"A3\"]], offset = .003, align = TRUE, \n                   offset.text = -.001, barsize = 1.2, extend = c(0.5, 0), parse = TRUE) +\n    geom_cladelabel(92, \"italic(A)\", color = \"darkgrey\", offset = .00315, align = TRUE, \n                   offset.text = 0.0002, barsize = 2, fontsize = 5, parse = TRUE) +\n    geom_cladelabel(156, \"italic(B1)\", color = cols[[\"B1\"]], offset = .003, align = TRUE, \n                   offset.text = -.001, barsize = 1.2, extend = c(0, 0.5), parse = TRUE) +\n    geom_cladelabel(159, \"italic(B2)\", color = cols[[\"B2\"]], offset = .003, align = TRUE, \n                   offset.text = -.001, barsize = 1.2, extend = c(0.5, 0), parse = TRUE) +\n    geom_strip(65, 71, \"italic(B)\", color = \"darkgrey\", offset = 0.00315, align = TRUE, \n                   offset.text = 0.0002, barsize = 2, fontsize = 5, parse = TRUE) + \n    geom_cladelabel(163, \"italic(C)\", color = \"darkgrey\", offset = .0031, align = TRUE, \n                   offset.text = 0.0002, barsize = 3.2, fontsize = 5, parse = TRUE) +\n    geom_cladelabel(173, \"italic(D1)\", color = cols[[\"D1\"]], offset = .003, align = TRUE, \n                   offset.text = -.001, barsize = 1.2, extend = c(0, 0.5), parse = TRUE) +\n    geom_cladelabel(176, \"italic(D2)\", color = cols[[\"D2\"]], offset = .003, align = TRUE, \n                   offset.text = -.001, barsize = 1.2, extend = c(0.5, 0), parse = TRUE) +\n    geom_cladelabel(172, \"italic(D)\", color = \"darkgrey\", offset = .00315, align = TRUE, \n                   offset.text = 0.0002, barsize = 2, fontsize = 5, parse = TRUE) \n## Optional\n## display support values\np <- p + geom_nodelab(aes(subset = (node == 92), label = \"*\"), \n                    color = \"black\", nudge_x = -.001, nudge_y = 1) +\n    geom_nodelab(aes(subset = (node == 155), label = \"*\"), \n                    color = \"black\", nudge_x = -.0003, nudge_y = -1) +\n    geom_nodelab(aes(subset = (node == 158), label = \"95/92/1.00\"), \n                    color = \"black\", nudge_x = -0.0001, nudge_y = -1, hjust = 1) +\n    geom_nodelab(aes(subset = (node == 162), label = \"98/97/1.00\"), \n                    color = \"black\", nudge_x = -0.0001, nudge_y = -1, hjust = 1) +\n    geom_nodelab(aes(subset = (node == 172), label = \"*\"), \n                    color = \"black\", nudge_x = -.0003, nudge_y = -1) \n## extract accession numbers from tip labels\ntl <- tree$tip.label\nacc <- sub(\"\\\\w+\\\\|\", \"\", tl)\nnames(tl) <- acc\n\n## read sequences from GenBank directly into R\n## and convert the object to DNAStringSet\ntipseq <- ape::read.GenBank(acc) %>% as.character %>% \n    lapply(., paste0, collapse = \"\") %>% unlist %>% \n    DNAStringSet\n## align the sequences using muscle\ntipseq_aln <- muscle::muscle(tipseq)\ntipseq_aln <- DNAStringSet(tipseq_aln)\n## calculate pairwise hamming distances among sequences\ntipseq_dist <- stringDist(tipseq_aln, method = \"hamming\")\n\n## calculate percentage of differences\ntipseq_d <- as.matrix(tipseq_dist) / width(tipseq_aln[1]) * 100\n\n## convert the matrix to tidy data frame for facet_plot\ndd <- as_tibble(tipseq_d)\ndd$seq1 <- rownames(tipseq_d)\ntd <- gather(dd,seq2, dist, -seq1)\ntd$seq1 <- tl[td$seq1]\ntd$seq2 <- tl[td$seq2]\n\ng <- p$data$group\nnames(g) <- p$data$label\ntd$clade <- g[td$seq2] \n\n## visualize the sequence differences using dot plot and line plot\n## and align the sequence difference plot to the tree using facet_plot\np2 <- facet_plot(p, panel = \"Sequence Distance\", data = td, geom_point, \n            mapping = aes(x = dist, color = clade, shape = clade), alpha = .6) %>%\n    facet_plot(panel = \"Sequence Distance\", data = td, geom = geom_path, \n            mapping=aes(x = dist, group = seq2, color = clade), alpha = .6) + \n    scale_shape_manual(values = 1:8, guide = FALSE) \n\nprint(p2)"},{"path":"chapter13.html","id":"symbolic-bootstrap","chapter":"13 Gallery of reproducible examples","heading":"13.2 Displaying different symbolic points for bootstrap values.","text":"can cut bootstrap values several intervals, e.g. indicate whether clade high, moderate low support. can use intervals categorical variable set different color shape symbolic points indicate bootstrap values belong category.\nFigure 13.2: Partitioning bootstrap values. Bootstrap values divided three categories information used color circle points.\n","code":"\nlibrary(treeio)\nlibrary(ggplot2)\nlibrary(ggtree)\n\ntree <- read.newick(\"data/RMI.phy_phyml_tree_rooted_labeled.txt\", node.label='support') \nroot <- rootnode(tree)  \nggtree(tree, color=\"black\", size=1.5, linetype=1,  right=TRUE) + \n    geom_tiplab(size=4.5, hjust = -0.060, fontface=\"bold\") +  xlim(0, 0.09) + \n    geom_point2(aes(subset=!isTip & node != root, \n                    fill=cut(support, c(0, 700, 900, 1000))), \n                    shape=21, size=4) + \n    theme_tree(legend.position=c(0.2, 0.2)) + \n    scale_fill_manual(values=c(\"white\", \"grey\", \"black\"), guide='legend', \n                    name='Bootstrap Percentage(BP)', \n                    breaks=c('(900,1e+03]', '(700,900]', '(0,700]'), \n                    labels=expression(BP>=90,70 <= BP * \" < 90\", BP < 70))"},{"path":"chapter13.html","id":"phylo-grouping","chapter":"13 Gallery of reproducible examples","heading":"13.3 Highlighting different groups.","text":"example reproduces Figure 1 (Larsen et al. 2019). used groupOTU add grouping information chicken CTLDcps. branch linetype color defined based grouping information. Two groups CTLDcps highlighted different background colors using geom_hilight (red Group II green Group V). avian-specific expansion group V subgroup B- labelled using geom_cladelabel (Figure 13.3).\nFigure 13.3: Phylogenetic tree CTLDcps.\n","code":"\nmytree <- read.tree(\"data/Tree 30.4.19.nwk\")\n\n# Define nodes for coloring later on\ntiplab <- mytree$tip.label\ncls <- tiplab[grep(\"^ch\", tiplab)] \nlabeltree <- groupOTU(mytree, cls)\n\np <- ggtree(labeltree, aes(color=group, linetype=group), layout=\"circular\") +\n    scale_color_manual(values = c(\"#efad29\", \"#63bbd4\")) +\n    geom_nodepoint(color=\"black\", size=0.1) +\n    geom_tiplab(size=2, color=\"black\")\n\np2 <- flip(p, 136, 110) %>% \n    flip(141, 145) %>% \n    rotate(141) %>% \n    rotate(142) %>% \n    rotate(160) %>% \n    rotate(164) %>% \n    rotate(131)\n\n### Group V and II coloring \np3 <- p2 + geom_hilight(node = 110, fill = \"#229f8a\", alpha = 0.2, extend = 0.43) +    \n    geom_hilight(node = 88, fill = \"#229f8a\", alpha = 0.2, extend = 0.445) +\n    geom_hilight(node = 156, fill = \"#229f8a\", alpha = 0.2, extend = 0.35) +\n    geom_hilight(node = 136, fill = \"#f9311f\", alpha = 0.2, extend = 0.512)\n\n### Putting on a label on the avian specific expansion \np4 <- p3 + geom_cladelabel(node = 113, label = \"Avian-specific expansion\", \n                        align = TRUE, angle = -35, offset.text = 0.05, \n                        hjust = \"center\", fontsize = 2,  offset = 0.2, barsize = 0.2)\n    \n### Adding the bootstrap values with subset used to remove all bootstraps < 50  \np5 <- p4 + geom_text2(aes(label=label, \n                        subset = !is.na(as.numeric(label)) & as.numeric(label) > 50), \n                    size = 2, color = \"black\",nudge_y = 0.7, nudge_x = -0.05)\n \n### Putting labels on the subgroups \np6 <- p5 + geom_cladelabel(node = 114, label = \"Subgroup A\", align = TRUE, \n                        angle = -55, offset.text = .03, hjust = \"center\", \n                        offset = 0.05, barsize = 0.2, fontsize = 2) +\n            geom_cladelabel(node = 121, label = \"Subgroup B\", align = TRUE, \n                        angle = -15, offset.text = .03, hjust = \"center\", \n                        offset = 0.05, barsize = 0.2, fontsize = 2) +\n            theme(legend.position=\"none\", \n                plot.margin=grid::unit(c(-15,-15,-15,-15), \"mm\"))\n\nprint(p6)"},{"path":"chapter13.html","id":"genome-locus","chapter":"13 Gallery of reproducible examples","heading":"13.4 Phylogenetic tree with genome locus structure","text":"geom_motif defined ggtree wrapper layer gggenes::geom_gene_arrow. geom_motif can automatically adjust genomic alignment selective gene (via parameter) can label genes via label parameter. following example, use example_genes dataset provided gggenes. dataset provide genomic coordinations set genes, phylogeny genomes need firstly constructed. calculate jaccard similarity based ratio overlapping genes among genomes correspondingly determine genome distance. BioNJ algorithm applied construct tree (Figure 13.4).\nFigure 13.4: Genomic features phylogenetic tree.\n","code":"\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gggenes)\nlibrary(ggtree)\n\nget_genes <- function(data, genome) {\n    filter(data, molecule == genome) %>% pull(gene)\n}\n\ng <- unique(example_genes[,1])\nn <- length(g)\nd <- matrix(nrow = n, ncol = n)\nrownames(d) <- colnames(d) <- g\ngenes <- lapply(g, get_genes, data = example_genes)\n\nfor (i in 1:n) {\n    for (j in 1:i) {\n        jaccard_sim <- length(intersect(genes[[i]], genes[[j]])) / \n                       length(union(genes[[i]], genes[[j]]))\n        d[j, i] <- d[i, j] <- 1 - jaccard_sim\n    }\n}\n\ntree <- ape::bionj(d) \n\np <- ggtree(tree, branch.length='none') + \n    geom_tiplab() + xlim_tree(5.5) + \n    geom_facet(mapping = aes(xmin = start, xmax = end, fill = gene),\n               data = example_genes, geom = geom_motif, panel = 'Alignment',\n               on = 'genE', label = 'gene', align = 'left') +\n    scale_fill_brewer(palette = \"Set3\") + \n    scale_x_continuous(expand=c(0,0)) +\n    theme(strip.text=element_blank(),\n        panel.spacing=unit(0, 'cm'))\n\nfacet_widths(p, widths=c(1,2))"},{"path":"faq.html","id":"faq","chapter":"A Frequently asked questions","heading":"A Frequently asked questions","text":"ggtree mailing-list great place get help, created reproducible example illustrates problem.","code":""},{"path":"faq.html","id":"installation","chapter":"A Frequently asked questions","heading":"A.1 Installation","text":"ggtree released within Bioconductor project, need use BiocManager install .Bioconductor release adhere specific R version. Please make sure using latest version R want install latest release Bioconductor packages, including ggtree. Beware bugs fixed current release develop branches. find bug, please follow guide14 report .","code":"\n## you need to install BiocManager before using it\n## install.packages(\"BiocManager\")\nlibrary(BiocManager)\ninstall(\"ggtree\")"},{"path":"faq.html","id":"faq-r","chapter":"A Frequently asked questions","heading":"A.2 Basic R related","text":"","code":""},{"path":"faq.html","id":"faq-local-file","chapter":"A Frequently asked questions","heading":"A.2.1 Use your local file","text":"new R want use ggtree tree visualization, please \nlearn basic R ggplot2.common issue users always copy-paste command without looking \nfunction‚Äôs behavior. system.file() used treeio ggtree package documentation find files packages.users want use files, please just use relative absolute file path (e.g. f = \"/folder/filename\").","code":"system.file                package:base                R Documentation\n\nFind Names of R System Files\n\nDescription:\n\n     Finds the full file names of files in packages etc.\n\nUsage:\n\n     system.file(..., package = \"base\", lib.loc = NULL,\n                 mustWork = FALSE)"},{"path":"faq.html","id":"faq-aes-mapping","chapter":"A Frequently asked questions","heading":"A.3 Aesthetic mapping","text":"","code":""},{"path":"faq.html","id":"faq-inherit-aes","chapter":"A Frequently asked questions","heading":"A.3.1 Inherit aes","text":"example, can add symbolic points nodes geom_point() directly.\nmagic don‚Äôt need map x y position points providing aes(x, y) geom_point() since already mapped ggtree function serves global mapping layers.provide dataset layer dataset doesn‚Äôt contain column x /y,\nlayer function also try map x y also others map ggtree function.\nvariable available dataset, get following error:can fixed using parameter inherit.aes=FALSE disable inheriting mapping ggtree function.","code":"\nggtree(rtree(30)) + geom_point()Error in eval(expr, envir, enclos) : object 'x' not found"},{"path":"faq.html","id":"faq-dollar-aes","chapter":"A Frequently asked questions","heading":"A.3.2 Never use $ in aes","text":"NEVER THIS15.See explaination ggplot2 book 2ed:Never refer variable $ (e.g., diamonds$carat) aes(). breaks containment, plot longer contains everything needs, causes problems ggplot2 changes order rows, facetting.","code":""},{"path":"faq.html","id":"faq-text","chapter":"A Frequently asked questions","heading":"A.4 Text & Label","text":"","code":""},{"path":"faq.html","id":"faq-label-truncated","chapter":"A Frequently asked questions","heading":"A.4.1 Tip label truncated","text":"rectangular/dendrogram layout tree, users can display tip labels y-axis labels. case, matter long labels , truncated (see Figure 4.8C).reason issue ggplot2 can‚Äôt auto adjust xlim based added text16.example, tip labels displayed Figure .1A truncated. units two different spaces (data pixel). Users can use xlim allocate spaces tip labels (Figure .1B).Another solution set clip = \"\" allow drawing outside plot panel. may also need set plot.margin allocate spaces margin (Figure .1C).\nFigure .1: Allocating spaces truncated tip lables. Long tip lables may truncated (). One solution allocate spaces plot panel (B) another solution allow plotting labels outside plot panel (C).\nthird solution using hexpand() demonstrated session 10.5.2.","code":"\nlibrary(ggtree)\n## example tree from https://support.bioconductor.org/p/72398/\ntree <- read.tree(text= paste(\"(Organism1.006G249400.1:0.03977,(Organism2.022118m:0.01337,\", \n             \"(Organism3.J34265.1:0.00284,Organism4.G02633.1:0.00468)0.51:0.0104):0.02469);\"))\np <- ggtree(tree) + geom_tiplab()  \np + xlim(0, 0.08)\np + coord_cartesian(clip = 'off') + \n  theme_tree2(plot.margin=margin(6, 120, 6, 6))"},{"path":"faq.html","id":"faq-modify-label","chapter":"A Frequently asked questions","heading":"A.4.2 Modify (tip) labels","text":"want modify tip labels tree, can use treeio::rename_taxa() rename phylo treedata object.input tree object treedata instance, can use write.beast() export tree associated data BEAST compatible NEXUS file.Renaming phylogeny tip labels seems good idea, since may introduce problems mapping original sequence alignment tree. Personally, recommend store new labels tip annotation treedata object.just want show different additional information plotting tree, don‚Äôt need modify tip labels. easily done via %<+% operator attach modified version labels use geom_tiplab display\nmodified version (Figure .2).\nFigure .2: Alternative tip labels. Original tip lables () modified version (B).\n","code":"\ntree <- read.tree(text = \"((A, B), (C, D));\")\nd <- data.frame(label = LETTERS[1:4], \n                label2 = c(\"sunflower\", \"tree\", \"snail\", \"mushroom\"))\n\n## rename_taxa use 1st column as key and 2nd column as value by default                \n## rename_taxa(tree, d)\nrename_taxa(tree, d, label, label2) %>% write.tree## [1] \"((sunflower,tree),(snail,mushroom));\"\ntree2 <- full_join(tree, d, by = \"label\")\ntree2## 'treedata' S4 object'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D\n## \n## Rooted; no branch lengths.\n## \n## with the following features available:\n##  'label2'.\np <- ggtree(tree) + xlim(NA, 3)\np1 <- p + geom_tiplab()\n\n## the following command will produce identical figure of p2\n## ggtree(tree2) + geom_tiplab(aes(label = label2))\np2 <- p %<+% d + geom_tiplab(aes(label=label2))\ncowplot::plot_grid(p1, p2, ncol=2, labels = c(\"A\", \"B\"))"},{"path":"faq.html","id":"faq-formatting-label","chapter":"A Frequently asked questions","heading":"A.4.3 Formatting (tip) labels","text":"want format labels, need set parse=TRUE geom_text/geom_tiplab label string can parsed expression displayed described ?plotmath.example, tip labels contains two parts, species name accession number want display species name italic, can use command like format specific tip/node label (Figure .3A):Another example formating tip labels demonstrated Figure .3B:label can provided data.frame contains related information\ntaxa (Figure .3C).\nFigure .3: Formatting labels. Formatting specific tip/node label (), tip labels (B & C).\n","code":"\nset.seed(2019-06-24)\ntree <- rtree(30)\np1 <- ggtree(tree) + \n  geom_tiplab(aes(subset=node==35), \n                  label='paste(italic(\"species name\"), \n                              \" accession number\")', \n              parse=T) + xlim(0, 6)\np2 <- ggtree(tree) + \n  geom_tiplab(aes(label=paste0('bold(', label, \n                  ')~italic(', node, ')')), \n            parse=TRUE) + xlim(0, 5)\ntree <- read.tree(text = \"((a,(b,c)),d);\")\ngenus <- c(\"Gorilla\", \"Pan\", \"Homo\", \"Pongo\")\nspecies <- c(\"gorilla\", \"spp.\", \"sapiens\", \"pygmaeus\")\ngeo <- c(\"Africa\", \"Africa\", \"World\", \"Asia\")\nd <- data.frame(label = tree$tip.label, genus = genus,\n                species = species, geo = geo)\n\np3 <- ggtree(tree) %<+% d + xlim(NA, 6) +\n    geom_tiplab(aes(label=paste0('italic(', genus, \n                  ')~bolditalic(', species, ')~', geo)), \n                parse=T)\ncowplot::plot_grid(p1, p2, p3, ncol=3, labels = LETTERS[1:3])                "},{"path":"faq.html","id":"faq-ggrepel","chapter":"A Frequently asked questions","heading":"A.4.4 Avoid overlapping text labels","text":"User can use ggrepel package repel overlapping text labels17.\n.example:\nFigure .4: Repel labels. Repel labels avoid overlapping.\n","code":"\nlibrary(ggrepel)\nlibrary(ggtree)\nraxml_file <- system.file(\"extdata/RAxML\", \"RAxML_bipartitionsBranchLabels.H3\", package=\"treeio\")\nraxml <- read.raxml(raxml_file)\nggtree(raxml) + geom_label_repel(aes(label=bootstrap, fill=bootstrap)) + \n  theme(legend.position = c(.1, .8)) + scale_fill_viridis_c()"},{"path":"faq.html","id":"faq-bootstrap","chapter":"A Frequently asked questions","heading":"A.4.5 Bootstrap values from newick format","text":"‚Äôs quite command store bootstrap value node label newick format. Visualizing node label easy using geom_text2(aes(subset = !isTip, label=label)).want display subset bootstrap (e.g.¬†bootstrap > 80), can‚Äôt simply using geom_text2(subset= (label > 80), label=label) (geom_label2) since label character vector, contains node label (bootstrap value) tip label (taxa name). use geom_text2(subset=(.numeric(label) > 80), label=label), also fail since NAs introduced coercion. need convert NAs logical FALSE, can done following code:\nFigure .5: Bootstrap value stored node label.\nAnother solution converting bootstrap value outside ggtree.","code":"\nnwk <- system.file(\"extdata/RAxML\",\"RAxML_bipartitions.H3\", package='treeio')\ntr <- read.tree(nwk)\nggtree(tr) + geom_label2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))\nq <- ggtree(tr)\nd <- q$data\nd <- d[!d$isTip,]\nd$label <- as.numeric(d$label)\nd <- d[d$label > 80,]\n\nq + geom_text(data=d, aes(label=label))"},{"path":"faq.html","id":"branch-setting","chapter":"A Frequently asked questions","heading":"A.5 Branch setting","text":"","code":""},{"path":"faq.html","id":"plot-the-same-tree-as-in-plot.phylo","chapter":"A Frequently asked questions","heading":"A.5.1 Plot the same tree as in plot.phylo()","text":"default, ggtree() ladderizes input tree tree appear less cluttered. reason tree visualized ggtree() different one using plot.phylo() displays nonladderized tree. disable ladderize effect, user can pass parameter ladderize = FALSE ggtree() function demonstrated @ref:(fig:ggtreeladderize).\nFigure .6: Ladderize nonladderize tree. plot.phylo() displays nonladderized tree (), use ladderize = FALSE display nonladderized tree ggtree() (B), ggtree() displays ladderized tree default (C).\n","code":"\nlibrary(ape)\nlibrary(ggtree)\nset.seed(42)\nx <- rtree(5)\nplot(x)\nggtree(x, ladderize = FALSE) + geom_tiplab()\nggtree(x) + geom_tiplab()"},{"path":"faq.html","id":"specifying-the-order-of-the-tips","chapter":"A Frequently asked questions","heading":"A.5.2 Specifying the order of the tips","text":"rotateConstr() function provided ape rotates internal branches based specified order tips order followed plotting tree (bottom top). ggtree() always ladderize input tree, users need disable passing ladderize = FALSE. order tree displayed expected (.7). Users can also extract tip order displayed ggtree() using get_taxa_name() function demonstrated session 12.6.\nFigure .7: Specifying tree order. order input tree maintained ggtree() ladderize = FALSE.\n","code":"\ny <- ape::rotateConstr(x, c('t4', 't2', 't5', 't1', 't3'))\nggtree(y, ladderize = FALSE) + geom_tiplab()"},{"path":"faq.html","id":"change-branch-length-of-outgroup","chapter":"A Frequently asked questions","heading":"A.5.3 Change branch length of outgroup","text":"outgroups long branch length (Figure .8A), like keep groups tree ignore branch lengths (Figure .8B)18. can easily done modifying coordination groups.\nFigure .8: Changing branch length outgroup. Original tree () reduced outgroup branch length version (B).\n","code":"\nx <- read.tree(\"data/long-branch-example.newick\")\nm <- MRCA(x, 75, 76)\ny <- groupClade(x, m)\np <- p1 <- ggtree(y, aes(linetype = group)) + \n  geom_tiplab(size = 2) +\n  theme(legend.position = 'none')\np$data[p$data$node %in% c(75, 76), \"x\"] <- mean(p$data$x)\nplot_grid(p1, p, ncol=2)"},{"path":"faq.html","id":"bind-tip","chapter":"A Frequently asked questions","heading":"A.5.4 Attach a new tip to a tree","text":"Sometimes known branches tree, like tree. Another scenario newly sequence species like update reference tree species inferring evolutionary position.Users can use phytools::bind.tip() (Revell 2012) attach new tip tree. tidytree, easy add annotation differentiate newly introduce original branches reflect uncertainty added branch splits demonstrated Figure .9.\nFigure .9: Attaching new tip tree.\n","code":"\nlibrary(phytools)\nlibrary(tidytree)\nlibrary(ggplot2)\nlibrary(ggtree)\n\nset.seed(2019-11-18)\ntr <- rtree(5)\n\ntr2 <- bind.tip(tr, 'U', edge.length = 0.1, where = 7, position=0.15)\nd <- as_tibble(tr2)\nd$type <- \"original\"\nd$type[d$label == 'U'] <- 'newly introduce'\nd$sd <- NA\nd$sd[parent(d, 'U')$node] <- 0.05\n\ntr3 <- as.treedata(d)\nggtree(tr3, aes(linetype=type)) +  geom_tiplab() +\n  geom_errorbarh(aes(xmin=x-sd, xmax=x+sd, y = y - 0.3), \n                linetype='dashed', height=0.1) +\n  scale_linetype_manual(values = c(\"newly introduce\" = \"dashed\", \n                                   \"original\" = \"solid\")) + \n  theme(legend.position=c(.8, .2)) "},{"path":"faq.html","id":"change-colours-or-line-types-of-arbitrary-selected-branches","chapter":"A Frequently asked questions","heading":"A.5.5 Change colours or line types of arbitrary selected branches","text":"want colour change line types specific branches, need prepare data frame variables branch setting (e.g.¬†selected unselected).\nFigure .10: Change colours line types specific branches.\nUsers can use gginnards package manipulate plot elements complicated scenarios.","code":"\nset.seed(123)\nx <- rtree(10)\n## binary choices of colours\nd <- data.frame(node=1:Nnode2(x), colour = 'black')\nd[c(2,3,14,15), 2] <- \"red\"\n\n## multiple choices of line types\nd2 <- data.frame(node=1:Nnode2(x), lty = 1)\nd2[c(2,5,13, 14), 2] <- c(2, 3, 2,4)\n\np <- ggtree(x) + geom_label(aes(label=node))\np %<+% d %<+% d2 + aes(colour=I(colour), linetype=I(lty))"},{"path":"faq.html","id":"arbitrary-point","chapter":"A Frequently asked questions","heading":"A.5.6 Add an arbitrary point to a branch","text":"want add arbitrary point branch19, can use geom_nodepoint, geom_tippoint geom_point2 (works external internal nodes) filter selected node (end point branch) via subset aesthetic mapping specify horizontal position x = x - offset aesthetic mapping, offset can absolute value (Figure .11A) proportion branch length (Figure .11B).\nFigure .11: Add arbitrary point branch.\n","code":"\nset.seed(2020-05-20)\nx <- rtree(10)\np <- ggtree(x)\n\np1 <- p + geom_nodepoint(aes(subset = node == 13, x = x - .1),\n                        size = 5, colour = 'firebrick', shape = 21)\n\np2 <- p + geom_nodepoint(aes(subset = node == 13, x = x - branch.length * 0.2),\n                        size = 3, colour = 'firebrick') + \n       geom_nodepoint(aes(subset = node == 13, x = x - branch.length * 0.8),\n                        size = 5, colour = 'steelblue')\ncowplot::plot_grid(p1, p2, labels=c(\"A\", \"B\"))"},{"path":"faq.html","id":"different-x-axis-labels-for-different-facet-panels","chapter":"A Frequently asked questions","heading":"A.6 Different x-axis labels for different facet panels","text":"supported ggplot2 general. However, can just draw text labels panels put labels beyond plot panels demonstrated Figure .12.\nFigure .12: X-axis titles different facet panels.\n","code":"\nlibrary(ggtree)\nlibrary(ggplot2)\nset.seed(2019-05-02)\nx <- rtree(30)\np <- ggtree(x) + geom_tiplab()\nd <- data.frame(label = x$tip.label, \n                value = rnorm(30))\np2 <- facet_plot(p, panel = \"Dot\", data = d, \n            geom = geom_point, mapping = aes(x = value)) \n            \np2 <- p2 + theme_bw() + \n    xlim_tree(5) + xlim_expand(c(-5, 5), 'Dot') \n\nd = data.frame(.panel = c('Tree', 'Dot'), \n                lab = c(\"Distance\", \"Dot Units\"), \n                x=c(2.5,0), y=-2)\n\np2 + scale_y_continuous(limits=c(0, 31), \n                        expand=c(0,0), \n                        oob=function(x, ...) x) +\n    geom_text(aes(label=lab), data=d) + \n    coord_cartesian(clip='off')  + \n    theme(plot.margin=margin(6, 6, 40, 6))"},{"path":"faq.html","id":"faq-under-the-tree","chapter":"A Frequently asked questions","heading":"A.7 Plot something behind the phylogeny","text":"ggtree function plot tree structure normally add layers top tree.want layers behind tree layer, can reverse order layers.Another solution use ggplot() instead ggtree() + geom_tree() add layer tree structure correct position layer stack.\nFigure .13: Add layers behind tree structure. layer top tree structure (). Reverse layer order (B). Add layer behind tree layer (C).\n","code":"\nset.seed(1982)\nx <- rtree(5)\np <- ggtree(x) + geom_hilight(node=7, alpha=1)\np$layers <- rev(p$layers)\nggplot(x) + geom_hilight(node=7, alpha=1) + geom_tree() + theme_tree()     "},{"path":"faq.html","id":"faq-enlarge-center-space","chapter":"A Frequently asked questions","heading":"A.8 Enlarge center space in circular/fan layout tree","text":"question asked several times20, published example can found https://www.ncbi.nlm.nih.gov/pubmed/27605062. Increasing percentage center white space circular tree useful avoid overlapping tip labels increase readibility tree moving nodes branches . can done simply using +xlim() allocate space, just like Figure 4.3G, assign long root branch similar ‚ÄúRoot Length‚Äù parameter FigTree.\nFigure .14: Enlarge center space circular tree. Allocate space xlim () long root branch (B).\n","code":"\nset.seed(1982)\ntree <- rtree(30)\nplot_grid(\n  ggtree(tree, layout='circular') + xlim(-10, NA),\n  ggtree(tree, layout='circular') + geom_rootedge(5),\n  labels = c(\"A\", \"B\", ncol=2)\n)"},{"path":"faq.html","id":"use-the-most-distant-tip-from-the-root-as-the-origin-of-the-time-scale","chapter":"A Frequently asked questions","heading":"A.9 Use the most distant tip from the root as the origin of the time scale","text":"revts reverse x-axis setting recent tip 0. can use scale_x_continuous(labels=abs) label x-axis using absolute values.\nFigure .15: Origin time scale. Forward: root tips (). Backward: distant tip root (B).\n","code":"\ntr <- rtree(10)\np <- ggtree(tr) + theme_tree2()\np2 <- revts(p) + scale_x_continuous(labels=abs)\nplot_grid(p, p2, ncol=2, labels=c(\"A\", \"B\"))"},{"path":"faq.html","id":"export-edit","chapter":"A Frequently asked questions","heading":"A.10 Edit tree graphic details","text":"can hard modify plot details ordinary users using ggplot2/ggtree. recommend using eoffice package export ggtree output ‚ÄòMicrosoft Office‚Äô Document edit tree graphic ‚ÄòPowerPoint‚Äô.","code":""},{"path":"related-tools.html","id":"related-tools","chapter":"B Related tools","heading":"B Related tools","text":"","code":""},{"path":"related-tools.html","id":"MicrobiotaProcess-hierarchical","chapter":"B Related tools","heading":"B.1 MicrobiotaProcess: Convert taxonomy or hierachical clustering result to treedata","text":"microbiome ecological data, taxonomy names widely used visualized hierarchical relationship associated dataset. However, taxonomy names often promiscuous omissive. convert_to_treedata MicrobiotaProcess solves problem well. can automatically extract upper level taxonomic information complete , taxonomy names confused missing. also can convert information treedata object, can visualized ggtree.\nFigure B.1: Get hierachical clustering tree taxonomy names.\n","code":"\nlibrary(MicrobiotaProcess)\nlibrary(ggtree)\ndata(kostic2012crc)\ntaxa <- data.frame(kostic2012crc@tax_table, check.names=FALSE)\n\ntree <- convert_to_treedata(data=taxa)\n\np <- ggtree(tree, layout=\"circular\", size=0.2) +\n     geom_tiplab(size=1)\np"},{"path":"related-tools.html","id":"rtol","chapter":"B Related tools","heading":"B.2 rtol: An R interface to Open Tree API","text":"rtol (Michonneau, Brown, Winter 2016) R package interact Open Tree Life data APIs.\nFigure B.2: Get induced subtree big Open Tree.\n","code":"\n## example from: https://github.com/ropensci/rotl\nlibrary(rotl)\napes <- c(\"Pongo\", \"Pan\", \"Gorilla\", \"Hoolock\", \"Homo\")\n(resolved_names <- tnrs_match_names(apes))##   search_string unique_name approximate_match ott_id\n## 1         pongo       Pongo             FALSE 417949\n## 2           pan         Pan             FALSE 417957\n## 3       gorilla     Gorilla             FALSE 417969\n## 4       hoolock     Hoolock             FALSE 712902\n## 5          homo        Homo             FALSE 770309\n##   is_synonym          flags number_matches\n## 1      FALSE                             2\n## 2      FALSE sibling_higher              1\n## 3      FALSE sibling_higher              1\n## 4      FALSE                             1\n## 5      FALSE sibling_higher              1\ntr <- tol_induced_subtree(ott_ids = ott_id(resolved_names))\nggtree(tr) + geom_tiplab() + xlim(NA, 5)"},{"path":"related-tools.html","id":"plotly","chapter":"B Related tools","heading":"B.3 Convert ggtree to plotly object","text":"One way make quick interactive phylogenetic tree using ggtree plotly package. ggplotly() able convert ggtree object plotly object. Note ggtree package also supports interactive manipulation phylogenetic tree via identify() method.\nFigure B.3: Interactive phylogenetic tree combining ggtree plotly.\n","code":"\n# example from https://twitter.com/drandersgs/status/965996335882059776\n\n# LOAD LIBS ---------------------------------------------------------------\nlibrary(ape)\nlibrary(ggtree)\nlibrary(plotly)\n# CREATE A TREE -------------------------------------------------------------\nn_samples <- 20\nn_grp <- 4\ntree <- ape::rtree(n = n_samples)\n# CREATE SOME METADATA ----------------------------------------------------\nid <- tree$tip.label\nset.seed(42)\ngrp <- sample(LETTERS[1:n_grp], size = n_samples, replace = T)\ndat <- tibble::tibble(id = id,\n                      grp = grp)\n# PLOT THE TREE -----------------------------------------------------------\np1 <- ggtree(tree)\nmetat <- p1$data %>%\n  dplyr::inner_join(dat, c('label' = 'id'))\np2 <- p1 +\n  geom_point(data = metat,\n             aes(x = x,\n                 y = y,\n                 colour = grp,\n                 label = id))\nplotly::ggplotly(p2)"},{"path":"related-tools.html","id":"commicR","chapter":"B Related tools","heading":"B.4 Comic (xkcd-like) phylogenetic tree","text":"","code":"\nlibrary(htmltools)    \nlibrary(XML)    \nlibrary(gridSVG)    \nlibrary(ggplot2)    \nlibrary(ggtree)\nlibrary(comicR)    \n\np <- ggtree(rtree(30), layout=\"circular\")  +\n    geom_tiplab(aes(label=label), color=\"purple\")\nprint(p)\nsvg <- grid.export(name=\"\", res=100)$svg\ntagList(\n    tags$div(\n             id = \"ggtree_comic\",\n             tags$style(\"#ggtree_comic text {font-family:Chalkduster;}\"),\n             HTML(saveXML(svg)),\n             comicR(\"#ggtree_comic\", ff=5)\n         )\n) # %>% html_print"},{"path":"related-tools.html","id":"ascii-tree","chapter":"B Related tools","heading":"B.5 Print ASCII-art rooted tree","text":"neat print ASCII-art phylogeny. Sometimes don‚Äôt want plot tree, just take glance tree structure without leaving focus R console. However, good idea print whole tree ASCII text tree large. Sometimes just want look specific portion tree immediate relatives. scenario, can use treeio::tree_subset() function (see session 2.4) extract selected portion tree. can print ASCII-art tree subset explore evolutionary relationship interested species R console.ggtree supports parsing tip labels emoji create phylomoji. data.tree emojifont packages, can also print phylomoji ASCII text.Another way print ASCII-art pf phylogeny use ascii() device defined devout package. example:","code":"\nlibrary(data.tree)\ntree <- rtree(10)\nd <- as.data.frame(as.Node(tree))\nnames(d) <- NULL\nprint(d, row.names=FALSE)                           \n 11                        \n  ¬¶--12                    \n  ¬¶   ¬¶--13                \n  ¬¶   ¬¶   ¬¶--t10           \n  ¬¶   ¬¶   ¬∞--14            \n  ¬¶   ¬¶       ¬¶--15        \n  ¬¶   ¬¶       ¬¶   ¬¶--t5    \n  ¬¶   ¬¶       ¬¶   ¬∞--16    \n  ¬¶   ¬¶       ¬¶       ¬¶--t4\n  ¬¶   ¬¶       ¬¶       ¬∞--t1\n  ¬¶   ¬¶       ¬∞--t7        \n  ¬¶   ¬∞--17                \n  ¬¶       ¬¶--t8            \n  ¬¶       ¬∞--t3            \n  ¬∞--18                    \n      ¬¶--19                \n      ¬¶   ¬¶--t2            \n      ¬¶   ¬∞--t9            \n      ¬∞--t6                \nlibrary(emojifont)\n\ntt <- '((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));'\ntree <- read.tree(text = tt)\ntree$tip.label <- emoji(tree$tip.label)\nd <- as.data.frame(as.Node(tree))\nnames(d) <- NULL\nprint(d, row.names=FALSE)                  \n 7                \n  ¬¶--8            \n  ¬¶   ¬¶--üêå        \n  ¬¶   ¬∞--üçÑ        \n  ¬∞--9            \n      ¬¶--10       \n      ¬¶   ¬¶--11   \n      ¬¶   ¬¶   ¬¶--üåª\n      ¬¶   ¬¶   ¬∞--üå≤\n      ¬¶   ¬∞--üçÉ    \n      ¬∞--ü•ó        \nlibrary(devout)\nascii(width=80)\nggtree(rtree(5))\ninvisible(dev.off())                                                                                \n                                                                   #########    \n                                                                   #            \n                               #####################################            \n                               #                                   #            \n                               #                                   #######      \n   #############################                                                \n   #                           #                                                \n   #                           #                                                \n   #                           ########                                         \n   #                                                                            \n   #                                                                            \n   #                                                                            \n   #               ##############################                               \n   #               #                                                            \n   #################                                                            \n                   #                                                            \n                   ##############################                               \n                                                                                \n                                                                                 "},{"path":"related-tools.html","id":"facet-zoom","chapter":"B Related tools","heading":"B.6 Zoom in selected portion","text":"\nFigure B.4: Zoom selected clade.\n","code":"\nset.seed(2019-08-05)\nx <- rtree(30)\nnn <- tidytree::offspring(x, 43, self_include=TRUE)\nggtree(x) + ggforce::facet_zoom(xy = node %in% nn)"},{"path":"related-tools.html","id":"ggimage-tips","chapter":"B Related tools","heading":"B.7 Tips for using ggtree with ggimage","text":"ggtree supports annotating tree silhouette images via ggimage package. ggimage provides grammar graphic syntax work image files. allows processing images fly via image_fun parameter, accepts function process magick-image object. magick package provides several functions functions can combined perform particular task.","code":""},{"path":"related-tools.html","id":"ggimage-rm-image-bg","chapter":"B Related tools","heading":"B.7.1 Example 1: Remove background of images","text":"\nFigure B.5: Remove image background. Plotting silhouette images phylogenetic tree without () (B) background remove.\n","code":"\nset.seed(1982)\nx <- rtree(5)\np <- ggtree(x) + theme_grey()\np1 <- p + geom_nodelab(image=\"img/frogs/frog.jpg\", geom=\"image\", size=.12) + \n          ggtitle(\"original image\")\np2 <- p + geom_nodelab(image=\"img/frogs/frog.jpg\", geom=\"image\", size=.12,\n            image_fun= function(.) magick::image_transparent(., \"white\")) + \n            ggtitle(\"image with background removed\")\nplot_grid(p1, p2, ncol=2)"},{"path":"related-tools.html","id":"ggimage-bgimage","chapter":"B Related tools","heading":"B.7.2 Example 2: Plot tree on a background image","text":"geom_bgimage add layer image put layer bottom layer stack. normal layer doesn‚Äôt change structure output ggtree object. Users can add annotation layers without background image layer.\nFigure B.6: Use image file tree background.\n","code":"\nggtree(rtree(20), size=1.5, color=\"white\") + \n  geom_bgimage('img/blackboard.jpg') + \n  geom_tiplab(color=\"white\", size=5, family='xkcd')"},{"path":"related-tools.html","id":"run-ggtree-in-jupyter-notebook","chapter":"B Related tools","heading":"B.8 Run ggtree in Jupyter notebook","text":"Jupyter notebook installed system, can install IRkernel following command R:can use ggtree R packages Jupyter notebook. screenshot recreating Figure 8.6 Jupyter notebook.\nFigure B.7: ggtree Jupyter notebook. Running ggtree Jupyter notebook via R kernel.\n","code":"\ninstall.packages(\"IRkernel\")\nIRkernel::installspec()"},{"path":"figures-and-tables.html","id":"figures-and-tables","chapter":"C Figures and Tables","heading":"C Figures and Tables","text":"\nTable C.1: Geometric layers supported ‚Äògeom_facet()‚Äô ‚Äòfacet_plot()‚Äô\n\nTable C.2: Tree-like objects supported ggtree\n","code":""},{"path":"session-info.html","id":"session-info","chapter":"D Session Info","heading":"D Session Info","text":"book written using R Markdown compiled bookdown package. session information system thesis compiled:","code":"## R version 4.0.3 (2020-10-10) \n##  Platform: x86_64-pc-linux-gnu (64-bit) \n##  Running under: Arch Linux \n##   \n##  locale: \n##   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               \n##   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     \n##   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    \n##   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  \n##   [9] LC_ADDRESS=C               LC_TELEPHONE=C             \n##  [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        \n##   \n##  attached base packages: \n##  [1] stats4    parallel  stats     graphics  grDevices \n##  [6] utils     datasets  methods   base      \n##   \n##  other attached packages: \n##   [1] knitr_1.30          ggtree_2.4.0        \n##   [3] treeio_1.14.0       tidytree_0.3.4      \n##   [5] kableExtra_1.3.1    dplyr_1.0.2         \n##   [7] ggplot2_3.3.2       cowplot_1.1.0       \n##   [9] emojifont_0.5.3     phylobase_0.8.10    \n##  [11] igraph_1.2.6        Biostrings_2.58.0   \n##  [13] XVector_0.30.0      IRanges_2.24.0      \n##  [15] S4Vectors_0.28.0    BiocGenerics_0.36.0 \n##  [17] ape_5.4-1           conflicted_1.0.4    \n##  [19] bookdown_0.21.3     \n##   \n##  loaded via a namespace (and not attached): \n##   [1] httr_1.4.2              sass_0.2.0.9005         \n##   [3] tidyr_1.1.2             jsonlite_1.7.1          \n##   [5] viridisLite_0.3.0       showtext_0.9            \n##   [7] BiocManager_1.30.10     rvcheck_0.1.8           \n##   [9] showtextdb_3.0          yaml_2.2.1              \n##  [11] progress_1.2.2          pillar_1.4.6            \n##  [13] lattice_0.20-41         glue_1.4.2              \n##  [15] uuid_0.1-4              digest_0.6.27           \n##  [17] RColorBrewer_1.1-2      rvest_0.3.6             \n##  [19] bootstraplib_0.2.1.9000 colorspace_1.4-1        \n##  [21] htmltools_0.5.0.9002    plyr_1.8.6              \n##  [23] XML_3.99-0.5            pkgconfig_2.0.3         \n##  [25] rncl_0.8.4              zlibbioc_1.36.0         \n##  [27] sysfonts_0.8.1          purrr_0.3.4             \n##  [29] patchwork_1.0.1         scales_1.1.1            \n##  [31] webshot_0.5.2           downlit_0.2.1           \n##  [33] tibble_3.0.4            generics_0.1.0          \n##  [35] ellipsis_0.3.1          withr_2.3.0             \n##  [37] lazyeval_0.2.2          proto_1.0.0             \n##  [39] magrittr_1.5            crayon_1.3.4            \n##  [41] memoise_1.1.0           evaluate_0.14           \n##  [43] badger_0.0.8            fs_1.5.0                \n##  [45] nlme_3.1-150            MASS_7.3-53             \n##  [47] xml2_1.3.2              tools_4.0.3             \n##  [49] prettyunits_1.1.1       hms_0.5.3               \n##  [51] lifecycle_0.2.0         stringr_1.4.0           \n##  [53] aplot_0.0.6             munsell_0.5.0           \n##  [55] ade4_1.7-16             compiler_4.0.3          \n##  [57] jquerylib_0.1.2         RNeXML_2.4.5            \n##  [59] rlang_0.4.8             grid_4.0.3              \n##  [61] rstudioapi_0.11         rappdirs_0.3.1          \n##  [63] icon_0.1.0              rmarkdown_2.5           \n##  [65] gtable_0.3.0            reshape2_1.4.4          \n##  [67] R6_2.5.0                dlstats_0.1.3           \n##  [69] stringi_1.5.3           Rcpp_1.0.5              \n##  [71] vctrs_0.3.4             tidyselect_1.1.0        \n##  [73] xfun_0.19"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Amer, Abdrazak, Sheila Galvin, Claire M Healy, Gary P Moran. 2017. ‚ÄúMicrobiome Potentially Malignant Oral Leukoplakia Exhibits Enrichment Fusobacterium, Leptotrichia, Campylobacter, Rothia Species.‚Äù Frontiers Microbiology 8: 2391. https://doi.org/10.3389/fmicb.2017.02391.Arenas, Miguel. 2015. ‚ÄúTrends Substitution Models Molecular Evolution.‚Äù Frontiers Genetics 6 (October). https://doi.org/10.3389/fgene.2015.00319.Asnicar, Francesco, George Weingart, Timothy L Tickle, Curtis Huttenhower, Nicola Segata. 2015. ‚ÄúCompact Graphical Representation Phylogenetic Data Metadata Graphlan.‚Äù PeerJ 3: e1029. https://doi.org/10.7717/peerj.1029.Berger, Simon ., Denis Krompass, Alexandros Stamatakis. 2011. ‚ÄúPerformance, Accuracy, Web Server Evolutionary Placement Short Sequence Reads Maximum Likelihood.‚Äù Systematic Biology, March, 291‚Äì302. https://doi.org/10.1093/sysbio/syr010.Bosi, Emanuele, Jonathan M. Monk, Ramy K. Aziz, Marco Fondi, Victor Nizet, Bernhard √ò. Palsson. 2016. ‚ÄúComparative Genome-Scale Modelling Staphylococcus Aureus Strains Identifies Strain-Specific Metabolic Capabilities Linked Pathogenicity.‚Äù Proceedings National Academy Sciences United States America 113 (26): E3801‚ÄìE3809. https://doi.org/10.1073/pnas.1523199113.Bouckaert, Remco, Joseph Heled, Denise K√ºhnert, Tim Vaughan, Chieh-Hsi Wu, Dong Xie, Marc . Suchard, Andrew Rambaut, Alexei J. Drummond. 2014. ‚ÄúBEAST 2: Software Platform Bayesian Evolutionary Analysis.‚Äù PLoS Comput Biol 10 (4): e1003537. https://doi.org/10.1371/journal.pcbi.1003537.Boussau, Bastien, Gergely J. Sz√∂ll≈ësi, Laurent Duret, Manolo Gouy, Eric Tannier, Vincent Daubin. 2013. ‚ÄúGenome-Scale Coestimation Species Gene Trees.‚Äù Genome Research 23 (2): 323‚Äì30. https://doi.org/10.1101/gr.141978.112.Callahan, Benjamin J., Paul J. McMurdie, Michael J. Rosen, Andrew W. Han, Amy Jo . Johnson, Susan P. Holmes. 2016. ‚ÄúDADA2: High-Resolution Sample Inference Illumina Amplicon Data.‚Äù Nature Methods 13 (7): 581‚Äì83. https://doi.org/10.1038/nmeth.3869.Chen, Zigui, Wendy C. S. Ho, Siaw Shi Boon, Priscilla T. Y. Law, Martin C. W. Chan, Rob DeSalle, Robert D. Burk, Paul K. S. Chan. 2017. ‚ÄúAncient Evolution Dispersion Human Papillomavirus 58 Variants.‚Äù Journal Virology 91 (21): e01285‚Äì17. https://doi.org/10.1128/JVI.01285-17.Chevenet, Fran√ßois, Christine Brun, Anne-Laure Ba√±uls, Bernard Jacq, Richard Christen. 2006. ‚ÄúTreeDyn: Towards Dynamic Graphics Annotations Analyses Trees.‚Äù BMC Bioinformatics 7 (October): 439. https://doi.org/10.1186/1471-2105-7-439.Chow, Nancy ., Jos√© F. Mu√±oz, Lalitha Gade, Elizabeth L. Berkow, Xiao Li, Rory M. Welsh, Kaitlin Forsberg, et al. 2020. ‚ÄúTracing Evolutionary History Global Expansion Candida Auris Using Population Genomic Analyses.‚Äù Edited Geraldine Butler Kirsten Nielsen. mBio 11 (2). https://doi.org/10.1128/mBio.03364-19.Felsenstein, J. 1981. ‚ÄúEvolutionary Trees DNA Sequences: Maximum Likelihood Approach.‚Äù Journal Molecular Evolution 17 (6): 368‚Äì76.Felsenstein, Joseph. 1989. ‚ÄúPHYLIP - Phylogeny Inference Package (Version 3.2).‚Äù Cladistics 5: 164‚Äì66.‚Äî‚Äî‚Äî. 1978. ‚ÄúCases Parsimony Compatibility Methods Positively Misleading.‚Äù Systematic Biology 27 (4): 401‚Äì10. https://doi.org/10.1093/sysbio/27.4.401.Fitch, Walter M. 1971. ‚ÄúToward Defining Course Evolution: Minimum Change Specific Tree Topology.‚Äù Systematic Zoology 20 (4): 406‚Äì16. https://doi.org/10.2307/2412116.Gentleman, Robert C, Vincent J Carey, Douglas M Bates, Ben Bolstad, Marcel Dettling, Sandrine Dudoit, Byron Ellis, et al. 2004. ‚ÄúBioconductor: Open Software Development Computational Biology Bioinformatics.‚Äù Genome Biology 5 (10): R80. https://doi.org/10.1186/gb-2004-5-10-r80.Goldman, N., Z. Yang. 1994. ‚ÄúCodon-Based Model Nucleotide Substitution Protein-Coding DNA Sequences.‚Äù Molecular Biology Evolution 11 (5): 725‚Äì36.Grubaugh, Nathan D., Jason T. Ladner, Moritz U. G. Kraemer, Gytis Dudas, Amanda L. Tan, Karthik Gangavarapu, Michael R. Wiley, et al. 2017. ‚ÄúGenomic Epidemiology Reveals Multiple Introductions Zika Virus United States.‚Äù Nature 546 (7658): 401‚Äì5. https://doi.org/10.1038/nature22400.Gupta, Ankit, Vineet K Sharma. 2015. ‚ÄúUsing Taxon-Specific Genes Taxonomic Classification Bacterial Genomes.‚Äù BMC Genomics 16 (1). https://doi.org/10.1186/s12864-015-1542-0., Ya-Qing, Long Chen, Wen-Bo Xu, Hong Yang, Han-Zhong Wang, Wen-Ping Zong, Hui-Xia Xian, et al. 2013. ‚ÄúEmergence, Circulation, Spatiotemporal Phylogenetic Analysis Coxsackievirus A6- Coxsackievirus A10-Associated Hand, Foot, Mouth Disease Infections 2008 2012 Shenzhen, China.‚Äù Journal Clinical Microbiology 51 (11): 3560‚Äì6. https://doi.org/10.1128/JCM.01231-13., Zhen, Raad Z Gharaibeh, Rachel C Newsome, Jllian L Pope, Michael W Dougherty, Sarah Tomkovich, Benoit Pons, et al. 2019. ‚ÄúCampylobacter Jejuni Promotes Colorectal Tumorigenesis Action Cytolethal Distending Toxin.‚Äù Gut 68 (2): 289‚Äì300. https://doi.org/10.1136/gutjnl-2018-317200., Zilong, Huangkai Zhang, Shenghan Gao, Martin J. Lercher, Wei-Hua Chen, Songnian Hu. 2016. ‚ÄúEvolview V2: Online Visualization Management Tool Customized Annotated Phylogenetic Trees.‚Äù Nucleic Acids Research 44 (W1): W236‚Äì241. https://doi.org/10.1093/nar/gkw370.H√∂hna, Sebastian, Tracy . Heath, Bastien Boussau, Michael J. Landis, Fredrik Ronquist, John P. Huelsenbeck. 2014. ‚ÄúProbabilistic Graphical Model Representation Phylogenetics.‚Äù Systematic Biology 63 (5): 753‚Äì71. https://doi.org/10.1093/sysbio/syu039.H√∂hna, Sebastian, Michael J. Landis, Tracy . Heath, Bastien Boussau, Nicolas Lartillot, Brian R. Moore, John P. Huelsenbeck, Fredrik Ronquist. 2016. ‚ÄúRevBayes: Bayesian Phylogenetic Inference Using Graphical Models Interactive Model-Specification Language.‚Äù Systematic Biology 65 (4): 726‚Äì36. https://doi.org/10.1093/sysbio/syw021.Huelsenbeck, J. P., F. Ronquist. 2001. ‚ÄúMRBAYES: Bayesian Inference Phylogenetic Trees.‚Äù Bioinformatics (Oxford, England) 17 (8): 754‚Äì55.Huson, Daniel H., Celine Scornavacca. 2012. ‚ÄúDendroscope 3: Interactive Tool Rooted Phylogenetic Trees Networks.‚Äù Systematic Biology 61 (6): 1061‚Äì7. https://doi.org/10.1093/sysbio/sys062.Jombart, Thibaut, David M. Aanensen, Marc Baguelin, Paul Birrell, Simon Cauchemez, Anton Camacho, Caroline Colijn, et al. 2014. ‚ÄúOutbreakTools: New Platform Disease Outbreak Analysis Using R Software.‚Äù Epidemics 7 (June): 28‚Äì34. https://doi.org/10.1016/j.epidem.2014.04.003.Kostic, Aleksandar D, Dirk Gevers, Chandra Sekhar Pedamallu, Monia Michaud, Fujiko Duke, Ashlee M Earl, Akinyemi Ojesina, et al. 2012. ‚ÄúGenomic Analysis Identifies Association Fusobacterium Colorectal Carcinoma.‚Äù Genome Research 22 (2): 292‚Äì98. https://doi.org/10.1101/gr.126573.111.Kuczynski, Justin, Jesse Stombaugh, William Anton Walters, Antonio Gonz√°lez, J. Gregory Caporaso, Rob Knight. 2011. ‚ÄúUsing QIIME Analyze 16S rRNA Gene Sequences Microbial Communities.‚Äù Current Protocols Bioinformatics / Editoral Board, Andreas D. Baxevanis ... [et Al.] CHAPTER (December): Unit10.7. https://doi.org/10.1002/0471250953.bi1007s36.Kumar, Sudhir, Glen Stecher, Koichiro Tamura. 2016. ‚ÄúMEGA7: Molecular Evolutionary Genetics Analysis Version 7.0 Bigger Datasets.‚Äù Molecular Biology Evolution 33 (7): 1870‚Äì4. https://doi.org/10.1093/molbev/msw054.Kunin, Victor, Philip Hugenholtz. 2010. ‚ÄúPyroTagger : Fast , Accurate Pipeline Analysis rRNA Amplicon Pyrosequence Data.‚Äù Open Journal, 1‚Äì8. http://www.theopenjournal.org/toj_articles/1.Lam, Tommy Tsan-Yuk, Chung-Chau Hon, Philippe Lemey, Oliver G. Pybus, Mang Shi, Hein Min Tun, Jun Li, Jingwei Jiang, Edward C. Holmes, Frederick Chi-Ching Leung. 2012. ‚ÄúPhylodynamics H5N1 Avian Influenza Virus Indonesia.‚Äù Molecular Ecology 21 (12): 3062‚Äì77. https://doi.org/10.1111/j.1365-294X.2012.05577.x.Lam, Tommy Tsan-Yuk, Boping Zhou, Jia Wang, Yujuan Chai, Yongyi Shen, Xinchun Chen, Chi Ma, et al. 2015. ‚ÄúDissemination, Divergence Establishment H7N9 Influenza Viruses China.‚Äù Nature 522 (7554): 102‚Äì5. https://doi.org/10.1038/nature14348.Larsen, Frederik T., Bertrand Bed‚ÄôHom, Bernt Guldbrandtsen, Tina S. Dalgaard. 2019. ‚ÄúIdentification Tissue-Expression Profiling Novel Chicken c-Type Lectin-Like Domain Containing Proteins Potential Targets Carbohydrate-Based Vaccine Strategies.‚Äù Molecular Immunology 114 (October): 216‚Äì25. https://doi.org/10.1016/j.molimm.2019.07.022.Lemmon, Alan R., Emily C. Moriarty. 2004. ‚ÄúImportance Proper Model Assumption Bayesian Phylogenetics.‚Äù Systematic Biology 53 (2): 265‚Äì77. https://doi.org/10.1080/10635150490423520.Letunic, Ivica, Peer Bork. 2007. ‚ÄúInteractive Tree Life (iTOL): Online Tool Phylogenetic Tree Display Annotation.‚Äù Bioinformatics 23 (1): 127‚Äì28. https://doi.org/10.1093/bioinformatics/btl529.Liang, Huyi, Tommy Tsan-Yuk Lam, Xiaohui Fan, Xinchun Chen, Yu Zeng, Ji Zhou, Lian Duan, et al. 2014. ‚ÄúExpansion Genotypic Diversity Establishment 2009 H1N1 Pandemic-Origin Internal Genes Pigs China.‚Äù Journal Virology, July, JVI.01327‚Äì14. https://doi.org/10.1128/JVI.01327-14.Lott, Steffen C., Bj√∂rn Vo√ü, Wolfgang R. Hess, Claudia Steglich. 2015. ‚ÄúCoVennTree: New Method Comparative Analysis Large Datasets.‚Äù Frontiers Genetics 6: 43. https://doi.org/10.3389/fgene.2015.00043.Maddison, David R., David L. Swofford, Wayne P. Maddison, David Cannatella. 1997. ‚ÄúNexus: Extensible File Format Systematic Information.‚Äù Systematic Biology 46 (4): 590‚Äì621. https://doi.org/10.1093/sysbio/46.4.590.Matsen, Frederick ., Noah G. Hoffman, Aaron Gallagher, Alexandros Stamatakis. 2012. ‚ÄúFormat Phylogenetic Placements.‚Äù PLoS ONE 7 (2): e31009. https://doi.org/10.1371/journal.pone.0031009.Matsen, Frederick ., Robin B. Kodner, E Virginia Armbrust. 2010. ‚ÄúPplacer: Linear Time Maximum-Likelihood Bayesian Phylogenetic Placement Sequences onto Fixed Reference Tree.‚Äù BMC Bioinformatics 11: 538. https://doi.org/10.1186/1471-2105-11-538.Matsen, Frederick , Robin B Kodner, E Virginia Armbrust. 2010. ‚ÄúPplacer: Linear Time Maximum-Likelihood Bayesian Phylogenetic Placement Sequences onto Fixed Reference Tree.‚Äù BMC Bioinformatics 11 (1): 538. https://doi.org/10.1186/1471-2105-11-538.McMurdie, Paul J., Susan Holmes. 2013. ‚ÄúPhyloseq: R Package Reproducible Interactive Analysis Graphics Microbiome Census Data.‚Äù PLoS ONE 8 (4): e61217. https://doi.org/10.1371/journal.pone.0061217.Michonneau, Fran√ßois, Joseph W. Brown, David J. Winter. 2016. ‚ÄúRotl: R Package Interact Open Tree Life Data.‚Äù Methods Ecology Evolution 7 (12): 1476‚Äì81. https://doi.org/10.1111/2041-210X.12593.Morgan, Xochitl C., Nicola Segata, Curtis Huttenhower. 2013. ‚ÄúBiodiversity Functional Genomics Human Microbiome.‚Äù Trends Genetics 29 (1): 51‚Äì58. https://doi.org/10.1016/J.TIG.2012.09.005.Neher, Richard ., Trevor Bedford, Rodney S. Daniels, Colin . Russell, Boris . Shraiman. 2016. ‚ÄúPrediction, Dynamics, Visualization Antigenic Phenotypes Seasonal Influenza Viruses.‚Äù Proceedings National Academy Sciences 113 (12): E1701‚ÄìE1709. https://doi.org/10.1073/pnas.1525578113.Page, Roderic D. M. 2002. ‚ÄúVisualizing Phylogenetic Trees Using TreeView.‚Äù Current Protocols Bioinformatics Chapter 6 (August): Unit 6.2. https://doi.org/10.1002/0471250953.bi0602s01.Paradis, Emmanuel, Julien Claude, Korbinian Strimmer. 2004. ‚ÄúAPE: Analyses Phylogenetics Evolution R Language.‚Äù Bioinformatics 20 (2): 289‚Äì90. https://doi.org/10.1093/bioinformatics/btg412.Pond, Sergei L. Kosakovsky, Simon D. W. Frost, Spencer V. Muse. 2005. ‚ÄúHyPhy: Hypothesis Testing Using Phylogenies.‚Äù Bioinformatics (Oxford, England) 21 (5): 676‚Äì79. https://doi.org/10.1093/bioinformatics/bti079.Rannala, B., Z. Yang. 1996. ‚ÄúProbability Distribution Molecular Evolutionary Trees: New Method Phylogenetic Inference.‚Äù Journal Molecular Evolution 43 (3): 304‚Äì11.R Core Team. 2016. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/.Retief, J. D. 2000. ‚ÄúPhylogenetic Analysis Using PHYLIP.‚Äù Methods Molecular Biology (Clifton, N.J.) 132: 243‚Äì58.Revell, Liam J. 2012. ‚ÄúPhytools: R Package Phylogenetic Comparative Biology (Things).‚Äù Methods Ecology Evolution 3 (2): 217‚Äì23. https://doi.org/10.1111/j.2041-210X.2011.00169.x.Sanderson, Michael J. 2003. ‚ÄúR8s: Inferring Absolute Rates Molecular Evolution Divergence Times Absence Molecular Clock.‚Äù Bioinformatics 19 (2): 301‚Äì2. https://doi.org/10.1093/bioinformatics/19.2.301.Schliep, Klaus Peter. 2011. ‚ÄúPhangorn: Phylogenetic Analysis R.‚Äù Bioinformatics 27 (4): 592‚Äì93. https://doi.org/10.1093/bioinformatics/btq706.Schloss, Patrick D., Sarah L. Westcott, Thomas Ryabin, Justine R. Hall, Martin Hartmann, Emily B. Hollister, Ryan . Lesniewski, et al. 2009. ‚ÄúIntroducing Mothur: Open-Source, Platform-Independent, Community-Supported Software Describing Comparing Microbial Communities.‚Äù Applied Environmental Microbiology 75 (23): 7537‚Äì41. https://doi.org/10.1128/AEM.01541-09.Schmidt, Heiko ., Korbinian Strimmer, Martin Vingron, Arndt von Haeseler. 2002. ‚ÄúTREE-PUZZLE: Maximum Likelihood Phylogenetic Analysis Using Quartets Parallel Computing.‚Äù Bioinformatics (Oxford, England) 18 (3): 502‚Äì4.Sch√∂n, Isa, Rylan Shearn, Koen Martens, Annette Koenders, Stuart Halse. 2015. ‚ÄúAge Origin Australian Bennelongia (Crustacea, Ostracoda).‚Äù Hydrobiologia 750 (1): 125‚Äì46. https://doi.org/10.1007/s10750-014-2159-z.Shoemaker, J. S., W. M. Fitch. 1989. ‚ÄúEvidence Nuclear Sequences Invariable Sites Considered Sequence Divergence Calculated.‚Äù Molecular Biology Evolution 6 (3): 270‚Äì89.Stamatakis, Alexandros. 2014. ‚ÄúRAxML Version 8: Tool Phylogenetic Analysis Post-Analysis Large Phylogenies.‚Äù Bioinformatics, January, btu033. https://doi.org/10.1093/bioinformatics/btu033.Venkatesh, Divya, Marjolein J. Poen, Theo M. Bestebroer, Rachel D. Scheuer, Oanh Vuong, Mzia Chkhaidze, Anna Machablishvili, et al. 2018. ‚ÄúAvian Influenza Viruses Wild Birds: Virus Evolution Multihost Ecosystem.‚Äù Journal Virology 92 (15). https://doi.org/10.1128/JVI.00433-18.Vos, Rutger ., James P. Balhoff, Jason . Caravas, Mark T. Holder, Hilmar Lapp, Wayne P. Maddison, Peter E. Midford, et al. 2012. ‚ÄúNeXML: Rich, Extensible, Verifiable Representation Comparative Data Metadata.‚Äù Systematic Biology 61 (4): 675‚Äì89. https://doi.org/10.1093/sysbio/sys025.Wang, Li-Gen, Tommy Tsan-Yuk Lam, Shuangbin Xu, Zehan Dai, Lang Zhou, Tingze Feng, Pingfan Guo, et al. 2020. ‚ÄúTreeio: R Package Phylogenetic Tree Input Output Richly Annotated Associated Data.‚Äù Molecular Biology Evolution 37 (2): 599‚Äì603. https://doi.org/10.1093/molbev/msz240.Wickham, Hadley. 2009. Ggplot2: Elegant Graphics Data Analysis. 1st ed. Springer.‚Äî‚Äî‚Äî. 2016. Ggplot2: Elegant Graphics Data Analysis. Springer. http://ggplot2.org.Wilgenbusch, James C., David Swofford. 2003. ‚ÄúInferring Evolutionary Trees PAUP*.‚Äù Current Protocols Bioinformatics Chapter 6 (February): Unit 6.4. https://doi.org/10.1002/0471250953.bi0604s00.Wilkinson, Leland, D. Wills, D. Rope, . Norton, R. Dubbs. 2005. Grammar Graphics. 2nd edition. New York: Springer.Wong, Vanessa K., Stephen Baker, Derek J. Pickard, Julian Parkhill, Andrew J. Page, Nicholas . Feasey, Robert . Kingsley, et al. 2015. ‚ÄúPhylogeographical Analysis Dominant Multidrug-Resistant H58 Clade Salmonella Typhi Identifies Inter- Intracontinental Transmission Events.‚Äù Journal Article. Nature Genetics 47 (6): 632‚Äì39. https://doi.org/10.1038/ng.3281.Wu, Na, Xi Yang, Ruifen Zhang, Jun Li, Xue Xiao, Yongfei Hu, Yanfei Chen, et al. 2013. ‚ÄúDysbiosis Signature Fecal Microbiota Colorectal Cancer Patients.‚Äù Microbial Ecology 66 (2): 462‚Äì70. https://doi.org/10.1007/s00248-013-0245-9.Yang, Z. 1994. ‚ÄúMaximum Likelihood Phylogenetic Estimation DNA Sequences Variable Rates Sites: Approximate Methods.‚Äù Journal Molecular Evolution 39 (3): 306‚Äì14.Yang, Ziheng. 2007. ‚ÄúPAML 4: Phylogenetic Analysis Maximum Likelihood.‚Äù Molecular Biology Evolution 24 (8): 1586‚Äì91. https://doi.org/10.1093/molbev/msm088.Yu, Guangchuang. 2020. ‚ÄúUsing Ggtree Visualize Data Tree-Like Structures.‚Äù Current Protocols Bioinformatics 69 (1): e96. https://doi.org/10.1002/cpbi.96.Yu, Guangchuang, Tommy Tsan-Yuk Lam, Huachen Zhu, Yi Guan. 2018. ‚ÄúTwo Methods Mapping Visualizing Associated Data Phylogeny Using Ggtree.‚Äù Molecular Biology Evolution 35 (12): 3041‚Äì3. https://doi.org/10.1093/molbev/msy194.Yu, Guangchuang, David K. Smith, Huachen Zhu, Yi Guan, Tommy Tsan-Yuk Lam. 2017. ‚ÄúGgtree: R Package Visualization Annotation Phylogenetic Trees Covariates Associated Data.‚Äù Methods Ecology Evolution 8 (1): 28‚Äì36. https://doi.org/10.1111/2041-210X.12628.Zmasek, Christian M., Sean R. Eddy. 2001. ‚ÄúATV: Display Manipulation Annotated Phylogenetic Trees.‚Äù Bioinformatics 17 (4): 383‚Äì84. https://doi.org/10.1093/bioinformatics/17.4.383.","code":""}]
