[
["index.html", "Data Integration, Manipulation and Visualization of Phylogenetic Trees Preface", " Data Integration, Manipulation and Visualization of Phylogenetic Trees Guangchuang Yu Preface You can’t even begin to understand biology, you can’t understand life, unless you understand what it’s all there for, how it arose - and that means evolution. — Richard Dawkins "],
["importing-tree-with-data.html", "Chapter 1 Importing tree with data", " Chapter 1 Importing tree with data hello world. "],
["manipulating-tree-with-data.html", "Chapter 2 Manipulating tree with data", " Chapter 2 Manipulating tree with data treeio + tidytree "],
["exporting-tree-with-data.html", "Chapter 3 Exporting tree with data", " Chapter 3 Exporting tree with data "],
["phylogenetic-tree-visualization.html", "Chapter 4 Phylogenetic Tree Visualization 4.1 Viewing a phylogenetic tree with ggtree 4.2 Layout 4.3 Displaying tree scale (evolution distance) 4.4 Displaying nodes/tips 4.5 Displaying labels 4.6 Update tree view with a new tree 4.7 Theme 4.8 Visualize a list of trees 4.9 Rescale tree 4.10 Zoom on a portion of tree 4.11 Color tree", " Chapter 4 Phylogenetic Tree Visualization To view a phylogenetic tree, we first need to parse the tree file into R. The ggtree (Yu et al. 2017) package supports many file formats via the treeio package, including output files of commonly used software packages in evolutionary biology. For more details, plase refer to the treeio vignette. library(&quot;treeio&quot;) library(&quot;ggtree&quot;) nwk &lt;- system.file(&quot;extdata&quot;, &quot;sample.nwk&quot;, package=&quot;treeio&quot;) tree &lt;- read.tree(nwk) 4.1 Viewing a phylogenetic tree with ggtree The ggtree package extends ggplot2 (Wickham 2009) package to support viewing phylogenetic tree. It implements geom_tree layer for displaying phylogenetic tree, as shown below: ggplot(tree, aes(x, y)) + geom_tree() + theme_tree() The function, ggtree, was implemented as a short cut to visualize a tree, and it works exactly the same as shown above. ggtree takes all the advantages of ggplot2. For example, we can change the color, size and type of the lines as we do with ggplot2. ggtree(tree, color=&quot;firebrick&quot;, size=1, linetype=&quot;dotted&quot;) By default, the tree is viewed in ladderize form, user can set the parameter ladderize = FALSE to disable it. ggtree(tree, ladderize=FALSE) The branch.length is used to scale the edge, user can set the parameter branch.length = “none” to only view the tree topology (cladogram) or other numerical variable to scale the tree (e.g. dN/dS, see also in Tree Annotation vignette). ggtree(tree, branch.length=&quot;none&quot;) 4.2 Layout Currently, ggtree supports several layouts, including: rectangular (by default) slanted circular fan for phylogram (by default) and cladogram if user explicitly setting branch.length=‘none’. Unrooted (equal angle and daylight methods), time-scaled and 2-dimensional layouts are also supported. 4.2.1 Phylogram and Cladogram library(ggtree) set.seed(2017-02-16) tr &lt;- rtree(50) ggtree(tr) ggtree(tr, layout=&quot;slanted&quot;) ggtree(tr, layout=&quot;circular&quot;) ggtree(tr, layout=&quot;fan&quot;, open.angle=120) ggtree(tr, layout=&quot;equal_angle&quot;) ggtree(tr, layout=&quot;daylight&quot;) ggtree(tr, branch.length=&#39;none&#39;) ggtree(tr, branch.length=&#39;none&#39;, layout=&#39;circular&#39;) ggtree(tr, layout=&quot;daylight&quot;, branch.length=&#39;none&#39;) There are also other possible layouts that can be drawn by modifying scales/coordination, for examples, reverse label of time scale, repropotion circular/fan tree, etc.. ggtree(tr) + scale_x_reverse() ggtree(tr) + coord_flip() ggtree(tr) + scale_x_reverse() + coord_flip() print(ggtree(tr), newpage=TRUE, vp=grid::viewport(angle=-30, width=.9, height=.9)) ggtree(tr, layout=&#39;slanted&#39;) + coord_flip() ggtree(tr, layout=&#39;slanted&#39;, branch.length=&#39;none&#39;) + coord_flip() + scale_y_reverse() +scale_x_reverse() ggtree(tr, layout=&#39;circular&#39;) + xlim(-10, NA) ggtree(tr) + scale_x_reverse() + coord_polar(theta=&#39;y&#39;) ggtree(tr) + scale_x_reverse(limits=c(10, 0)) + coord_polar(theta=&#39;y&#39;) 4.2.2 Time-scaled tree A phylogenetic tree can be scaled by time (time-scaled tree) by specifying the parameter, mrsd (most recent sampling date). tree2d &lt;- read.beast(system.file(&quot;extdata&quot;, &quot;twoD.tree&quot;, package=&quot;treeio&quot;)) ggtree(tree2d, mrsd=&quot;2014-05-01&quot;) + theme_tree2() 4.2.3 Two dimensional tree ggtree implemented two dimensional tree. It accepts parameter yscale to scale the y-axis based on the selected tree attribute. The attribute should be numerical variable. If it is character/category variable, user should provides a name vector of mapping the variable to numeric by passing it to parameter yscale_mapping. ggtree(tree2d, mrsd=&quot;2014-05-01&quot;, yscale=&quot;NGS&quot;, yscale_mapping=c(N2=2, N3=3, N4=4, N5=5, N6=6, N7=7)) + theme_classic() + theme(axis.line.x=element_line(), axis.line.y=element_line()) + theme(panel.grid.major.x=element_line(color=&quot;grey20&quot;, linetype=&quot;dotted&quot;, size=.3), panel.grid.major.y=element_blank()) + scale_y_continuous(labels=paste0(&quot;N&quot;, 2:7)) In this example, the figure demonstrates the quantity of y increase along the trunk. User can highlight the trunk with different line size or color using the functions described in Tree Manipulation vignette. 4.3 Displaying tree scale (evolution distance) To show tree scale, user can use geom_treescale() layer. ggtree(tree) + geom_treescale() geom_treescale() supports the following parameters: x and y for tree scale position width for the length of the tree scale fontsize for the size of the text linesize for the size of the line offset for relative position of the line and the text color for color of the tree scale ggtree(tree) + geom_treescale(x=0, y=12, width=6, color=&#39;red&#39;) ggtree(tree) + geom_treescale(fontsize=8, linesize=2, offset=-1) We can also use theme_tree2() to display the tree scale by adding x axis. ggtree(tree) + theme_tree2() Tree scale is not restricted to evolution distance, ggtree can re-scale the tree with other numerical variable. More details can be found in the Tree Annotation vignette. 4.4 Displaying nodes/tips Showing all the internal nodes and tips in the tree can be done by adding a layer of points using geom_nodepoint, geom_tippoint or geom_point. ggtree(tree) + geom_point(aes(shape=isTip, color=isTip), size=3) p &lt;- ggtree(tree) + geom_nodepoint(color=&quot;#b5e521&quot;, alpha=1/4, size=10) p + geom_tippoint(color=&quot;#FDAC4F&quot;, shape=8, size=3) 4.5 Displaying labels Users can use geom_text or geom_label to display the node (if available) and tip labels simultaneously or geom_tiplab to only display tip labels: p + geom_tiplab(size=3, color=&quot;purple&quot;) geom_tiplab not only supports using text or label geom to display labels, it also supports image geom to label tip with image files. A corresponding geom, geom_nodelab is also provided for displaying node labels. For details of label nodes with images, please refer to the vignette, Annotating phylogenetic tree with images. For circular and unrooted layout, ggtree supports rotating node labels according to the angles of the branches. ggtree(tree, layout=&quot;circular&quot;) + geom_tiplab(aes(angle=angle), color=&#39;blue&#39;) To make it more readable for human eye, ggtree provides a geom_tiplab2 for circular layout (see post 1 and 2). ggtree(tree, layout=&quot;circular&quot;) + geom_tiplab2(color=&#39;blue&#39;) By default, the positions are based on the node positions, we can change them to based on the middle of the branch/edge. p + geom_tiplab(aes(x=branch), size=3, color=&quot;purple&quot;, vjust=-0.3) Based on the middle of branch is very useful when annotating transition from parent node to child node. 4.6 Update tree view with a new tree In previous example, we have a p object that stored the tree viewing of 13 tips and internal nodes highlighted with specific colored big dots. If users want to apply this pattern (we can imaging a more complex one) to a new tree, you don’t need to build the tree step by step. ggtree provides an operator, %&lt;%, for applying the visualization pattern to a new tree. For example, the pattern in the p object will be applied to a new tree with 50 tips as shown below: p %&lt;% rtree(50) 4.7 Theme theme_tree() defined a totally blank canvas, while theme_tree2() adds phylogenetic distance (via x-axis). These two themes all accept a parameter of bgcolor that defined the background color. Users can pass any theme components to the theme_tree() function to modify them. ggtree(rtree(30), color=&quot;red&quot;) + theme_tree(&quot;steelblue&quot;) ggtree(rtree(20), color=&quot;white&quot;) + theme_tree(&quot;black&quot;) 4.8 Visualize a list of trees ggtree supports multiPhylo object and a list of trees can be viewed simultaneously. trees &lt;- lapply(c(10, 20, 40), rtree) class(trees) &lt;- &quot;multiPhylo&quot; ggtree(trees) + facet_wrap(~.id, scale=&quot;free&quot;) + geom_tiplab() One hundred bootstrap trees can also be view simultaneously. btrees &lt;- read.tree(system.file(&quot;extdata/RAxML&quot;, &quot;RAxML_bootstrap.H3&quot;, package=&quot;treeio&quot;)) ggtree(btrees) + facet_wrap(~.id, ncol=10) Another way to view the bootstrap trees is to merge them together to form a density tree. We can add a layer of the best tree on the top of the density tree. p &lt;- ggtree(btrees, layout=&quot;rectangular&quot;, color=&quot;lightblue&quot;, alpha=.3) best_tree &lt;- read.tree(system.file(&quot;extdata/RAxML&quot;, &quot;RAxML_bipartitionsBranchLabels.H3&quot;, package=&quot;treeio&quot;)) df &lt;- fortify(best_tree, branch.length=&#39;none&#39;) p+geom_tree(data=df, color=&#39;firebrick&#39;) 4.9 Rescale tree Most of the phylogenetic trees are scaled by evolutionary distance (substitution/site). In ggtree, users can re-scale a phylogenetic tree by any numerical variable inferred by evolutionary analysis (e.g. dN/dS). library(&quot;treeio&quot;) beast_file &lt;- system.file(&quot;examples/MCC_FluA_H3.tree&quot;, package=&quot;ggtree&quot;) beast_tree &lt;- read.beast(beast_file) beast_tree ## &#39;treedata&#39; S4 object that stored information of ## &#39;C:/Users/YGC/Library/R/library/ggtree/examples/MCC_FluA_H3.tree&#39;. ## ## ...@ phylo: ## Phylogenetic tree with 76 tips and 75 internal nodes. ## ## Tip labels: ## A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, A/New_York/452/1999, A/New_York/238/2005, A/New_York/523/1998, ... ## ## Rooted; includes branch lengths. ## ## with the following features available: ## &#39;height&#39;, &#39;height_0.95_HPD&#39;, &#39;height_median&#39;, ## &#39;height_range&#39;, &#39;length&#39;, &#39;length_0.95_HPD&#39;, ## &#39;length_median&#39;, &#39;length_range&#39;, &#39;posterior&#39;, &#39;rate&#39;, ## &#39;rate_0.95_HPD&#39;, &#39;rate_median&#39;, &#39;rate_range&#39;. p1 &lt;- ggtree(beast_tree, mrsd=&#39;2013-01-01&#39;) + theme_tree2() + ggtitle(&quot;Divergence time&quot;) p2 &lt;- ggtree(beast_tree, branch.length=&#39;rate&#39;) + theme_tree2() + ggtitle(&quot;Substitution rate&quot;) library(cowplot) plot_grid(p1, p2, ncol=2) mlcfile &lt;- system.file(&quot;extdata/PAML_Codeml&quot;, &quot;mlc&quot;, package=&quot;treeio&quot;) mlc_tree &lt;- read.codeml_mlc(mlcfile) p1 &lt;- ggtree(mlc_tree) + theme_tree2() + ggtitle(&quot;nucleotide substitutions per codon&quot;) p2 &lt;- ggtree(mlc_tree, branch.length=&#39;dN_vs_dS&#39;) + theme_tree2() + ggtitle(&quot;dN/dS tree&quot;) plot_grid(p1, p2, ncol=2) In addition to specify branch.length in tree visualization, users can change branch length stored in tree object by using rescale_tree function. beast_tree2 &lt;- rescale_tree(beast_tree, branch.length=&#39;rate&#39;) ggtree(beast_tree2) + theme_tree2() 4.10 Zoom on a portion of tree ggtree provides gzoom function that similar to zoom function provided in ape. This function plots simultaneously a whole phylogenetic tree and a portion of it. It aims at exploring very large trees. library(&quot;ape&quot;) data(chiroptera) library(&quot;ggtree&quot;) gzoom(chiroptera, grep(&quot;Plecotus&quot;, chiroptera$tip.label)) Zoom in selected clade of a tree that was already annotated with ggtree is also supported. groupInfo &lt;- split(chiroptera$tip.label, gsub(&quot;_\\\\w+&quot;, &quot;&quot;, chiroptera$tip.label)) chiroptera &lt;- groupOTU(chiroptera, groupInfo) p &lt;- ggtree(chiroptera, aes(color=group)) + geom_tiplab() + xlim(NA, 23) gzoom(p, grep(&quot;Plecotus&quot;, chiroptera$tip.label), xmax_adjust=2) 4.11 Color tree In ggtree, coloring phylogenetic tree is easy, by using aes(color=VAR) to map the color of tree based on a specific variable (numeric and category are both supported). ggtree(beast_tree, aes(color=rate)) + scale_color_continuous(low=&#39;darkgreen&#39;, high=&#39;red&#39;) + theme(legend.position=&quot;right&quot;) User can use any feature (if available), including clade posterior and dN/dS etc., to scale the color of the tree. References "],
["phylogenetic-tree-annotation.html", "Chapter 5 Phylogenetic Tree Annotation 5.1 Annotate clades 5.2 Labelling associated taxa (Monophyletic, Polyphyletic or Paraphyletic) 5.3 Highlight clades 5.4 Taxa connection 5.5 Tree annotation with output from evolution software", " Chapter 5 Phylogenetic Tree Annotation 5.1 Annotate clades ggtree (Yu et al. 2017) implements geom_cladelabel layer to annotate a selected clade with a bar indicating the clade with a corresponding label. The geom_cladelabel layer accepts a selected internal node number. To get the internal node number, please refer to Tree Manipulation vignette. set.seed(2015-12-21) tree &lt;- rtree(30) p &lt;- ggtree(tree) + xlim(NA, 6) p + geom_cladelabel(node=45, label=&quot;test label&quot;) + geom_cladelabel(node=34, label=&quot;another clade&quot;) Users can set the parameter, align = TRUE, to align the clade label, and use the parameter, offset, to adjust the position. p + geom_cladelabel(node=45, label=&quot;test label&quot;, align=TRUE, offset=.5) + geom_cladelabel(node=34, label=&quot;another clade&quot;, align=TRUE, offset=.5) Users can change the color of the clade label via the parameter color. p + geom_cladelabel(node=45, label=&quot;test label&quot;, align=T, color=&#39;red&#39;) + geom_cladelabel(node=34, label=&quot;another clade&quot;, align=T, color=&#39;blue&#39;) Users can change the angle of the clade label text and relative position from text to bar via the parameter offset.text. p + geom_cladelabel(node=45, label=&quot;test label&quot;, align=T, angle=270, hjust=&#39;center&#39;, offset.text=.5) + geom_cladelabel(node=34, label=&quot;another clade&quot;, align=T, angle=45) The size of the bar and text can be changed via the parameters barsize and fontsize respectively. p + geom_cladelabel(node=45, label=&quot;test label&quot;, align=T, angle=270, hjust=&#39;center&#39;, offset.text=.5, barsize=1.5) + geom_cladelabel(node=34, label=&quot;another clade&quot;, align=T, angle=45, fontsize=8) Users can also use geom_label to label the text. p + geom_cladelabel(node=34, label=&quot;another clade&quot;, align=T, geom=&#39;label&#39;, fill=&#39;lightblue&#39;) 5.1.1 Annotate clades for unrooted tree ggtree provides geom_clade2 for labeling clades of unrooted layout trees. pg &lt;- ggtree(tree, layout=&quot;daylight&quot;) pg + geom_cladelabel2(node=45, label=&quot;test label&quot;, angle=10) + geom_cladelabel2(node=34, label=&quot;another clade&quot;, angle=305) 5.2 Labelling associated taxa (Monophyletic, Polyphyletic or Paraphyletic) geom_cladelabel is designed for labelling Monophyletic (Clade) while there are related taxa that are not form a clade. ggtree provides geom_strip to add a strip/bar to indicate the association with optional label (see the issue). nwk &lt;- system.file(&quot;extdata&quot;, &quot;sample.nwk&quot;, package=&quot;treeio&quot;) tree &lt;- read.tree(nwk) ggtree(tree) + geom_tiplab() + geom_strip(5, 7, barsize=2, color=&#39;red&#39;) + geom_strip(6, 12, barsize=2, color=&#39;blue&#39;) 5.3 Highlight clades ggtree implements geom_hilight layer, that accepts an internal node number and add a layer of rectangle to highlight the selected clade. ggtree(tree) + geom_hilight(node=21, fill=&quot;steelblue&quot;, alpha=.6) + geom_hilight(node=17, fill=&quot;darkgreen&quot;, alpha=.6) ggtree(tree, layout=&quot;circular&quot;) + geom_hilight(node=21, fill=&quot;steelblue&quot;, alpha=.6) + geom_hilight(node=23, fill=&quot;darkgreen&quot;, alpha=.6) Another way to highlight selected clades is setting the clades with different colors and/or line types as demonstrated in Tree Manipulation vignette. 5.3.1 Highlight balances In addition to geom_hilight, ggtree also implements geom_balance which is designed to highlight neighboring subclades of a given internal node. ggtree(tree) + geom_balance(node=16, fill=&#39;steelblue&#39;, color=&#39;white&#39;, alpha=0.6, extend=1) + geom_balance(node=19, fill=&#39;darkgreen&#39;, color=&#39;white&#39;, alpha=0.6, extend=1) 5.3.2 Highlight clades for unrooted tree ggtree provides geom_hilight_encircle to support highlight clades for unrooted layout trees. pg + geom_hilight_encircle(node=45) + geom_hilight_encircle(node=34, fill=&#39;darkgreen&#39;) 5.4 Taxa connection Some evolutionary events (e.g. reassortment, horizontal gene transfer) can be modeled by a simple tree. ggtree provides geom_taxalink layer that allows drawing straight or curved lines between any of two nodes in the tree, allow it to represent evolutionary events by connecting taxa. ggtree(tree) + geom_tiplab() + geom_taxalink(&#39;A&#39;, &#39;E&#39;) + geom_taxalink(&#39;F&#39;, &#39;K&#39;, color=&#39;red&#39;, arrow=grid::arrow(length=grid::unit(0.02, &quot;npc&quot;))) 5.5 Tree annotation with output from evolution software The treeio package implemented several parser functions to parse output from commonly used software in evolutionary biology. Here, we used BEAST (Bouckaert et al. 2014) output as an example. For details, please refer to the Importer vignette. file &lt;- system.file(&quot;extdata/BEAST&quot;, &quot;beast_mcc.tree&quot;, package=&quot;treeio&quot;) beast &lt;- read.beast(file) ggtree(beast, aes(color=rate)) + geom_range(range=&#39;length_0.95_HPD&#39;, color=&#39;red&#39;, alpha=.6, size=2) + geom_nodelab(aes(x=branch, label=round(posterior, 2)), vjust=-.5, size=3) + scale_color_continuous(low=&quot;darkgreen&quot;, high=&quot;red&quot;) + theme(legend.position=c(.1, .8)) References "],
["visual-exploration-of-phylogenetic-tree.html", "Chapter 6 Visual Exploration of Phylogenetic Tree 6.1 Internal node number 6.2 View Clade 6.3 Group Clades 6.4 Group OTUs 6.5 Collapse clade 6.6 Expand collapsed clade 6.7 Scale clade 6.8 Rotate clade 6.9 Flip clade 6.10 Open tree 6.11 Rotate tree 6.12 Interactive tree manipulation", " Chapter 6 Visual Exploration of Phylogenetic Tree 6.1 Internal node number Some of the functions in ggtree work with clade and accept a parameter of internal node number. To get the internal node number, user can use geom_text2 to display it: nwk &lt;- system.file(&quot;extdata&quot;, &quot;sample.nwk&quot;, package=&quot;treeio&quot;) tree &lt;- read.tree(nwk) ggtree(tree) + geom_text2(aes(subset=!isTip, label=node), hjust=-.3) + geom_tiplab() Another way to get the internal node number is using MRCA() function by providing a vector of taxa names. The function will return node number of input taxa’s most recent commond ancestor (MRCA). It works with tree and graphic object. MRCA(tree, tip=c(&#39;A&#39;, &#39;E&#39;)) ## [1] 17 MRCA(tree, tip=c(&#39;H&#39;, &#39;G&#39;)) ## [1] 21 p &lt;- ggtree(tree) MRCA(p, tip=c(&#39;A&#39;, &#39;E&#39;)) ## [1] 17 6.2 View Clade ggtree provides a function viewClade to visualize a clade of a phylogenetic tree. viewClade(p+geom_tiplab(), node=21) 6.3 Group Clades The ggtree package defined several functions to manipulate tree view. groupClade and groupOTU methods were designed for clustering clades or related OTUs. groupClade accepts an internal node or a vector of internal nodes to cluster clade/clades. Both groupClade and groupOTU work fine with tree and graphic object. tree &lt;- groupClade(tree, .node=21) ggtree(tree, aes(color=group, linetype=group)) The following command will produce the same figure. ggtree(read.tree(nwk)) %&gt;% groupClade(.node=21) + aes(color=group, linetype=group) With groupClade and groupOTU, it’s easy to highlight selected taxa and easy to select taxa to display related features. tree &lt;- groupClade(tree, .node=c(21, 17)) ggtree(tree, aes(color=group, linetype=group)) + geom_tiplab(aes(subset=(group==2))) 6.4 Group OTUs groupOTU accepts a vector of OTUs (taxa name) or a list of OTUs. groupOTU will trace back from OTUs to their most recent common ancestor and cluster them together. Related OTUs are not necessarily within a clade, they can be monophyletic (clade), polyphyletic or paraphyletic. tree &lt;- groupOTU(tree, .node=c(&quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;)) ggtree(tree, aes(color=group)) + geom_tiplab() groupOTU can also input a list of tip groups. cls &lt;- list(c1=c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;), c2=c(&quot;F&quot;, &quot;G&quot;, &quot;H&quot;), c3=c(&quot;L&quot;, &quot;K&quot;, &quot;I&quot;, &quot;J&quot;), c4=&quot;M&quot;) tree &lt;- groupOTU(tree, cls) library(&quot;colorspace&quot;) ggtree(tree, aes(color=group, linetype=group)) + geom_tiplab() + scale_color_manual(values=c(&quot;black&quot;, rainbow_hcl(4))) + theme(legend.position=&quot;right&quot;) groupOTU also works with graphic object. p &lt;- ggtree(tree) groupOTU(p, LETTERS[1:5]) + aes(color=group) + geom_tiplab() + scale_color_manual(values=c(&quot;black&quot;, &quot;firebrick&quot;)) The following example use groupOTU to display taxa classification. library(&quot;ape&quot;) data(chiroptera) groupInfo &lt;- split(chiroptera$tip.label, gsub(&quot;_\\\\w+&quot;, &quot;&quot;, chiroptera$tip.label)) chiroptera &lt;- groupOTU(chiroptera, groupInfo) ggtree(chiroptera, aes(color=group), layout=&#39;circular&#39;) + geom_tiplab(size=1, aes(angle=angle)) 6.5 Collapse clade With collapse function, user can collapse a selected clade. cp &lt;- collapse(p, node=21) cp + geom_point2(aes(subset=(node == 21)), size=5, shape=23, fill=&quot;steelblue&quot;) 6.6 Expand collapsed clade The collapsed clade can be expanded via expand function. cp %&gt;% expand(node=21) p1 &lt;- ggtree(tree) p2 &lt;- collapse(p1, 21) + geom_point2(aes(subset=(node==21)), size=5, shape=23, fill=&quot;blue&quot;) p3 &lt;- collapse(p2, 17) + geom_point2(aes(subset=(node==17)), size=5, shape=23, fill=&quot;red&quot;) p4 &lt;- expand(p3, 17) p5 &lt;- expand(p4, 21) library(cowplot) plot_grid(p1, p2, p3, p4, p5, ncol=5) 6.7 Scale clade Collpase selected clades can save some space, another approach is to zoom out clade to a small scale. plot_grid(ggtree(tree) + geom_hilight(21, &quot;steelblue&quot;), ggtree(tree) %&gt;% scaleClade(21, scale=0.3) + geom_hilight(21, &quot;steelblue&quot;), ncol=2) Of course, scaleClade can accept scale larger than 1 and zoom in the selected portion. plot_grid(ggtree(tree) + geom_hilight(17, fill=&quot;steelblue&quot;) + geom_hilight(21, fill=&quot;darkgreen&quot;), ggtree(tree) %&gt;% scaleClade(17, scale=2) %&gt;% scaleClade(21, scale=0.3) + geom_hilight(17, &quot;steelblue&quot;) + geom_hilight(21, fill=&quot;darkgreen&quot;), ncol=2) 6.8 Rotate clade A selected clade can be rotated by 180 degree using rotate function. tree &lt;- groupClade(tree, c(21, 17)) p &lt;- ggtree(tree, aes(color=group)) + scale_color_manual(values=c(&quot;black&quot;, &quot;firebrick&quot;, &quot;steelblue&quot;)) p2 &lt;- rotate(p, 21) %&gt;% rotate(17) plot_grid(p, p2, ncol=2) set.seed(2016-05-29) p &lt;- ggtree(tree &lt;- rtree(50)) + geom_tiplab() for (n in reorder(tree, &#39;postorder&#39;)$edge[,1] %&gt;% unique) { p &lt;- rotate(p, n) print(p + geom_point2(aes(subset=(node == n)), color=&#39;red&#39;)) } 6.9 Flip clade The positions of two selected clades (should share a same parent) can be flip over using flip function. plot_grid(p, flip(p, 17, 21), ncol=2) 6.10 Open tree ggtree supports fan layout and can also transform the circular layout tree to a fan tree by specifying an open angle to open_tree function. set.seed(123) tr &lt;- rtree(50) p &lt;- ggtree(tr, layout=&#39;circular&#39;) + geom_tiplab2() for (angle in seq(0, 270, 10)) { print(open_tree(p, angle=angle) + ggtitle(paste(&quot;open angle:&quot;, angle))) } 6.11 Rotate tree Rotating a circular tree is supported by rotate_tree function. for (angle in seq(0, 270, 10)) { print(rotate_tree(p, angle) + ggtitle(paste(&quot;rotate angle:&quot;, angle))) } 6.12 Interactive tree manipulation Interactive tree manipulation is also possible, please refer to https://guangchuangyu.github.io/2016/06/identify-method-for-ggtree. "],
["plotting-tree-with-data.html", "Chapter 7 Plotting tree with data 7.1 Visualize tree with associated matrix 7.2 Visualize tree with multiple sequence alignment 7.3 Plot tree with associated data", " Chapter 7 Plotting tree with data Integrating user data to annotate phylogenetic tree can be done at different levels. The treeio package implements full_join methods to combine tree data to phylogenetic tree object. The tidytree package supports linking tree data to phylogeny using tidyverse verbs. ggtree supports mapping external data to phylogeny for visualization and annotation on the fly. 7.0.1 The %&lt;+% operator Suppose we have the following data that associate with the tree and would like to attach the data in the tree. nwk &lt;- system.file(&quot;extdata&quot;, &quot;sample.nwk&quot;, package=&quot;treeio&quot;) tree &lt;- read.tree(nwk) p &lt;- ggtree(tree) dd &lt;- data.frame(taxa = LETTERS[1:13], place = c(rep(&quot;GZ&quot;, 5), rep(&quot;HK&quot;, 3), rep(&quot;CZ&quot;, 4), NA), value = round(abs(rnorm(13, mean=70, sd=10)), digits=1)) ## you don&#39;t need to order the data ## data was reshuffled just for demonstration dd &lt;- dd[sample(1:13, 13), ] row.names(dd) &lt;- NULL print(dd) taxa place value D GZ 78.4 K CZ 72.7 C GZ 83.0 H HK 102.6 E GZ 75.3 M NA 67.1 J CZ 70.4 A GZ 51.5 B GZ 56.6 L CZ 79.6 F HK 55.9 I CZ 68.0 G HK 86.1 We can imaging that the place column stores the location that we isolated the species and value column stores numerical values (e.g. bootstrap values). We have demonstrated using the operator, %&lt;%, to update a tree view with a new tree. Here, we will introduce another operator, %&lt;+%, that attaches annotation data to a tree view. The only requirement of the input data is that its first column should be matched with the node/tip labels of the tree. After attaching the annotation data to the tree by %&lt;+%, all the columns in the data are visible to ggtree. As an example, here we attach the above annotation data to the tree view, p, and add a layer that showing the tip labels and colored them by the isolation site stored in place column. p &lt;- p %&lt;+% dd + geom_tiplab(aes(color=place)) + geom_tippoint(aes(size=value, shape=place, color=place), alpha=0.25) p + theme(legend.position=&quot;right&quot;) Once the data was attached, it is always attached. So that we can add other layers to display these information easily. p + geom_text(aes(color=place, label=place), hjust=1, vjust=-0.4, size=3) + geom_text(aes(color=place, label=value), hjust=1, vjust=1.4, size=3) 7.1 Visualize tree with associated matrix The gheatmap function is designed to visualize phylogenetic tree with heatmap of associated matrix. In the following example, we visualized a tree of H3 influenza viruses with their associated genotype. beast_file &lt;- system.file(&quot;examples/MCC_FluA_H3.tree&quot;, package=&quot;ggtree&quot;) beast_tree &lt;- read.beast(beast_file) genotype_file &lt;- system.file(&quot;examples/Genotype.txt&quot;, package=&quot;ggtree&quot;) genotype &lt;- read.table(genotype_file, sep=&quot;\\t&quot;, stringsAsFactor=F) colnames(genotype) &lt;- sub(&quot;\\\\.$&quot;, &quot;&quot;, colnames(genotype)) p &lt;- ggtree(beast_tree, mrsd=&quot;2013-01-01&quot;) + geom_treescale(x=2008, y=1, offset=2) p &lt;- p + geom_tiplab(size=2) gheatmap(p, genotype, offset=5, width=0.5, font.size=3, colnames_angle=-45, hjust=0) + scale_fill_manual(breaks=c(&quot;HuH3N2&quot;, &quot;pdm&quot;, &quot;trig&quot;), values=c(&quot;steelblue&quot;, &quot;firebrick&quot;, &quot;darkgreen&quot;)) The width parameter is to control the width of the heatmap. It supports another parameter offset for controlling the distance between the tree and the heatmap, for instance to allocate space for tip labels. For time-scaled tree, as in this example, it’s more often to use x axis by using theme_tree2. But with this solution, the heatmap is just another layer and will change the x axis. To overcome this issue, we implemented scale_x_ggtree to set the x axis more reasonable. p &lt;- ggtree(beast_tree, mrsd=&quot;2013-01-01&quot;) + geom_tiplab(size=2, align=TRUE, linesize=.5) + theme_tree2() pp &lt;- (p + scale_y_continuous(expand=c(0, 0.3))) %&gt;% gheatmap(genotype, offset=8, width=0.6, colnames=FALSE) %&gt;% scale_x_ggtree() ## Scale for &#39;y&#39; is already present. Adding another scale ## for &#39;y&#39;, which will replace the existing scale. pp + theme(legend.position=&quot;right&quot;) 7.2 Visualize tree with multiple sequence alignment With msaplot function, user can visualize multiple sequence alignment with phylogenetic tree, as demonstrated below: fasta &lt;- system.file(&quot;examples/FluA_H3_AA.fas&quot;, package=&quot;ggtree&quot;) msaplot(ggtree(beast_tree), fasta) A specific slice of the alignment can also be displayed by specific window parameter. msaplot(ggtree(beast_tree), fasta, window=c(150, 200)) + coord_polar(theta=&#39;y&#39;) 7.3 Plot tree with associated data For associating phylogenetic tree with different type of plot produced by user’s data, ggtree provides facet_plot function which accepts an input data.frame and a geom function to draw the input data. The data will be displayed in an additional panel of the plot. tr &lt;- rtree(30) d1 &lt;- data.frame(id=tr$tip.label, val=rnorm(30, sd=3)) p &lt;- ggtree(tr) p2 &lt;- facet_plot(p, panel=&quot;dot&quot;, data=d1, geom=geom_point, aes(x=val), color=&#39;firebrick&#39;) d2 &lt;- data.frame(id=tr$tip.label, value=abs(rnorm(30, mean=100, sd=50))) facet_plot(p2, panel=&#39;bar&#39;, data=d2, geom=geom_segment, aes(x=0, xend=value, y=y, yend=y), size=3, color=&#39;steelblue&#39;) + theme_tree2() "],
["annotating-tree-with-silhouette-images-and-sub-plots.html", "Chapter 8 Annotating Tree with Silhouette Images and Sub-plots 8.1 Annotating Tree with Images 8.2 Annotating Tree with Phylopic 8.3 Annotating Tree with Sub-plots 8.4 Have Fun with Phylomoji", " Chapter 8 Annotating Tree with Silhouette Images and Sub-plots 8.1 Annotating Tree with Images We usually use text to label taxa, i.e. displaying taxa names. If the text is image file name (either local or remote), ggtree can read the image and display the actual image as label of the taxa. The geom_tiplab and geom_nodelab are capable to render silhouette image by internally called ggimage package. library(ggimage) library(ggtree) nwk &lt;- &quot;((((bufonidae, dendrobatidae), ceratophryidae), (centrolenidae, leptodactylidae)), hylidae);&quot; x = read.tree(text = nwk) ggtree(x) + xlim(NA, 7) + ylim(NA, 6.2) + geom_tiplab(aes(image=paste0(&quot;img/frogs/&quot;, label, &#39;.jpg&#39;)), geom=&quot;image&quot;, offset=2, align=2, size=.2) + geom_tiplab(geom=&#39;label&#39;, offset=1, hjust=.5) + geom_image(x=.8, y=5.5, image=&quot;img/frogs/frog.jpg&quot;, size=.2) 8.2 Annotating Tree with Phylopic Phylopic contains more than 3200 silhouettes and covers almost all life forms. ggtree also supports using phylopic1 to annotate the tree. Most importantly, we can color the image using numerical/categorical variable. tree &lt;- ape::read.nexus(&quot;https://raw.githubusercontent.com/rgriff23/Dissertation/master/Chapter_2/data/tree.nex&quot;) phylopic_info &lt;- data.frame(node = c(124, 113, 110, 96, 89, 70), phylopic = c(&quot;7fb9bea8-e758-4986-afb2-95a2c3bf983d&quot;, &quot;bac25f49-97a4-4aec-beb6-f542158ebd23&quot;, &quot;f598fb39-facf-43ea-a576-1861304b2fe4&quot;, &quot;aceb287d-84cf-46f1-868c-4797c4ac54a8&quot;, &quot;0174801d-15a6-4668-bfe0-4c421fbe51e8&quot;, &quot;72f2f854-f3cd-4666-887c-35d5c256ab0f&quot;), species = c(&quot;galagoids&quot;, &quot;lemurs&quot;, &quot;tarsiers&quot;, &quot;cebids&quot;, &quot;hominoids&quot;, &quot;cercopithecoids&quot;)) pg &lt;- ggtree(tree) pg %&lt;+% phylopic_info + geom_nodelab(aes(image=phylopic, color=species, subset=!is.na(species)), geom=&quot;phylopic&quot;) + theme(legend.position=c(.1, .8)) 8.3 Annotating Tree with Sub-plots ggtree provides a function, inset, for adding subplots to a phylogenetic tree. The input is a tree graphic object and a named list of ggplot graphic objects (can be any kind of charts), these objects should named by node numbers. To facilitate adding bar and pie charts (e.g. summarized stats of results from ancestral reconstruction) to phylogenetic tree, ggtree provides nodepie and nodebar functions to create a list of pie or bar charts. 8.3.1 Annotate with bar charts set.seed(2015-12-31) tr &lt;- rtree(15) p &lt;- ggtree(tr) a &lt;- runif(14, 0, 0.33) b &lt;- runif(14, 0, 0.33) c &lt;- runif(14, 0, 0.33) d &lt;- 1 - a - b - c dat &lt;- data.frame(a=a, b=b, c=c, d=d) ## input data should have a column of `node` that store the node number dat$node &lt;- 15+1:14 ## cols parameter indicate which columns store stats (a, b, c and d in this example) bars &lt;- nodebar(dat, cols=1:4) inset(p, bars, width=.2, height=1) Users can set the color via the parameter color. The x position can be one of ‘node’ or ‘branch’ and can be adjusted by the parameter hjust and vjust for horizontal and vertical adjustment respecitvely. bars2 &lt;- nodebar(dat, cols=1:4, position=&#39;dodge&#39;, color=c(a=&#39;blue&#39;, b=&#39;red&#39;, c=&#39;green&#39;, d=&#39;cyan&#39;)) p2 &lt;- inset(p, bars2, x=&#39;branch&#39;, width=.2, height=1, vjust=-.3) print(p2) 8.3.2 Annotate with pie charts Similarly, users can use nodepie function to generate a list of pie charts and place these charts to annotate corresponding nodes. Both nodebar and nodepie accepts parameter alpha to allow transparency. pies &lt;- nodepie(dat, cols=1:4, alpha=.6) inset(p, pies, width=1, height=1, hjust=-.06) 8.3.3 Annotate with other types of charts The inset function accepts a list of ggplot graphic objects and these input objects are not restricted to pie or bar charts. They can be any kinds of charts and hybrid of these charts. pies_and_bars &lt;- bars2 pies_and_bars[9:14] &lt;- pies[9:14] inset(p, pies_and_bars, width=.3, height=1) d &lt;- lapply(1:15, rnorm, n=100) ylim &lt;- range(unlist(d)) bx &lt;- lapply(d, function(y) { dd &lt;- data.frame(y=y) ggplot(dd, aes(x=1, y=y))+geom_boxplot() + ylim(ylim) + theme_inset() }) names(bx) &lt;- 1:15 inset(p, bx, width=.2, height=2, hjust=-.05) After annotating with insets, users can further annotate the tree with another layer of insets. p2 &lt;- inset(p, bars2, x=&#39;branch&#39;, width=.5, height=1, vjust=-.4) p2 &lt;- inset(p2, pies, x=&#39;branch&#39;, vjust=.4, width=.5, height=1) bx2 &lt;- lapply(bx, function(g) g+coord_flip()) inset(p2, bx2, width=2, height=1, vjust=.04, hjust=p2$data$x[1:15]-5) + xlim(NA, 6) 8.4 Have Fun with Phylomoji #phylomoji is fun and it is internally supported by ggtree since 20152. Here, we will use ggtree to recreate the figure: library(ggplot2) library(ggtree) tt = &#39;((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));&#39; tree = read.tree(text = tt) d &lt;- data.frame(label = c(&#39;snail&#39;,&#39;mushroom&#39;, &#39;sunflower&#39;, &#39;evergreen_tree&#39;,&#39;leaves&#39;, &#39;green_salad&#39;), group = c(&#39;animal&#39;, &#39;fungi&#39;, &#39;flowering plant&#39;, &#39;conifers&#39;, &#39;ferns&#39;, &#39;mosses&#39;)) ggtree(tree, linetype = &quot;dashed&quot;, size=1, color=&#39;firebrick&#39;) %&lt;+% d + xlim(0, 4.5) + ylim(0.5, 6.5) + geom_tiplab(aes(color=label), parse=&quot;emoji&quot;, size=15, vjust=.25) + geom_tiplab(aes(label = group), geom=&quot;label&quot;, x=3.5, hjust=.5) With ggtree, it is easy to generate phylomoji. The emoji is treated as text, like abc. We can use emojis to label taxa, clade, color and ratate emoji with any given color and angle. 8.4.1 emoji in cirular/fan layout tree p &lt;- ggtree(tree, layout = &quot;circular&quot;, size=1) + geom_tiplab2(aes(color=label), parse=&quot;emoji&quot;, size=10, vjust=.25) print(p) ## fan layout p2 &lt;- open_tree(p, angle=200) print(p2) p2 %&gt;% rotate_tree(-90) 8.4.2 emoji to label clades set.seed(123) tr &lt;- rtree(30) ggtree(tr) + xlim(NA, 5) + geom_cladelabel(node=41, label=&quot;chicken&quot;, parse=&quot;emoji&quot;, fontsize=12, align=TRUE, color=&quot;firebrick&quot;) + geom_cladelabel(node=51, label=&quot;duck&quot;, parse=&quot;emoji&quot;, fontsize=12, align=TRUE, color=&quot;steelblue&quot;) + geom_cladelabel(node=32, label=&quot;family&quot;, parse=&quot;emoji&quot;, fontsize=12, align=TRUE, color=&quot;darkkhaki&quot;) 8.4.3 Apple Color Emoji Although R’s graphical devices don’t support AppleColorEmoji font, it’s still possible to use it. We can export the plot to svg file and render it in Safari. library(ggtree) tree_text &lt;- &quot;(((((cow, (whale, dolphin)), (pig2, boar)), camel), fish), seedling);&quot; x &lt;- read.tree(text=tree_text) library(ggimage) library(gridSVG) p &lt;- ggtree(x, size=2) + geom_tiplab(size=20, parse=&#39;emoji&#39;) + xlim(NA, 7) + ylim(NA, 8.5) + geom_phylopic(image=&quot;79ad5f09-cf21-4c89-8e7d-0c82a00ce728&quot;, color=&quot;firebrick&quot;, alpha = .3, size=Inf) p ps = grid.export(&quot;emoji.svg&quot;, addClass=T) https://twitter.com/guangchuangyu/status/593443854541434882↩ https://twitter.com/guangchuangyu/status/662095056610811904 and https://twitter.com/guangchuangyu/status/667337429704011777↩ "],
["references.html", "References", " References "]
]
